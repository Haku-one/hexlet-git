<?php
/**
 * DA Markers - –ü–û–ò–°–ö –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú
 * –ò—â–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –ø–æ —Ç–æ—á–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, –∞ –Ω–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–∞—Å—Å–∏–≤–µ
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ú–∞—Ä–∫–µ—Ä –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º, –∞ –Ω–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏</small></p>';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    $location_data = get_post_meta($post->ID, 'estate_location', true);
    $lat = null;
    $lng = null;
    
    if (is_array($location_data)) {
        $lat = isset($location_data['lat']) ? $location_data['lat'] : null;
        $lng = isset($location_data['lng']) ? $location_data['lng'] : null;
    }
    
    echo '<hr><h4>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:</h4>';
    echo '<p><strong>ID:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ì–∞–ª–æ—á–∫–∞:</strong> ' . ($value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    if ($lat && $lng) {
        echo '<p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ' . $lat . ', ' . $lng . '</p>';
        echo '<p style="color: green;">‚úÖ –ú–∞—Ä–∫–µ—Ä –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω –ø–æ —ç—Ç–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º</p>';
    } else {
        echo '<p style="color: red;">‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
add_action('wp_ajax_get_da_coordinates', 'ajax_get_da_coordinates');
add_action('wp_ajax_nopriv_get_da_coordinates', 'ajax_get_da_coordinates');
function ajax_get_da_coordinates() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_coordinates = array();
    
    foreach ($da_posts as $post) {
        $location_data = get_post_meta($post->ID, 'estate_location', true);
        
        if (is_array($location_data) && isset($location_data['lat']) && isset($location_data['lng'])) {
            $da_coordinates[] = array(
                'id' => $post->ID,
                'lat' => floatval($location_data['lat']),
                'lng' => floatval($location_data['lng']),
                'title' => $post->post_title
            );
        }
    }
    
    wp_send_json_success(array(
        'coordinates' => $da_coordinates,
        'count' => count($da_coordinates)
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_coordinate_css');
function da_coordinate_css() {
    ?>
    <style>
    @keyframes da-blink-red {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            opacity: 1;
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            opacity: 0.7;
        }
    }

    .mh-map-pin.da-found {
        animation: da-blink-red 1.5s infinite;
    }

    .mh-map-pin.da-found i {
        color: #ff0066 !important;
    }
    
    /* –î–ª—è –¥–µ–º–æ */
    .mh-map-pin.da-demo {
        animation: da-blink-red 1.5s infinite;
    }

    .mh-map-pin.da-demo i {
        color: #00ff66 !important;
    }
    </style>
    <?php
}

// JavaScript - –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
add_action('wp_footer', 'da_coordinate_script');
function da_coordinate_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ü–û–ò–°–ö –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú –∑–∞–ø—É—â–µ–Ω–æ');
        
        let processAttempts = 0;
        const maxAttempts = 3;
        
        function processDAMarkers() {
            processAttempts++;
            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(processDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            // –ü–æ–ª—É—á–∞–µ–º DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_coordinates'
                },
                success: function(response) {
                    console.log('üì° –û–¢–í–ï–¢ –°–ï–†–í–ï–†–ê:', response);
                    
                    if (response.success && response.data.coordinates.length > 0) {
                        console.log('üéØ DA –ö–û–û–†–î–ò–ù–ê–¢–´:', response.data.coordinates);
                        
                        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                        $('.mh-map-pin').removeClass('da-found da-demo');
                        
                        let foundCount = 0;
                        
                        // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ HTML –∞—Ç—Ä–∏–±—É—Ç–∞–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                        console.log('üîç –ú–ï–¢–û–î 1: –ü–æ–∏—Å–∫ –≤ HTML –∞—Ç—Ä–∏–±—É—Ç–∞—Ö');
                        $markers.each(function(index) {
                            let $marker = $(this);
                            let $parent = $marker.closest('[data-lat][data-lng]');
                            
                            if ($parent.length) {
                                let markerLat = parseFloat($parent.attr('data-lat'));
                                let markerLng = parseFloat($parent.attr('data-lng'));
                                
                                response.data.coordinates.forEach(function(daCoord) {
                                    if (Math.abs(markerLat - daCoord.lat) < 0.0001 && 
                                        Math.abs(markerLng - daCoord.lng) < 0.0001) {
                                        console.log('‚úÖ –ù–ê–ô–î–ï–ù –ø–æ HTML –∞—Ç—Ä–∏–±—É—Ç–∞–º! ID:', daCoord.id, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', markerLat, markerLng);
                                        $marker.addClass('da-found');
                                        foundCount++;
                                    }
                                });
                            }
                        });
                        
                        // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                        if (foundCount === 0) {
                            console.log('üîç –ú–ï–¢–û–î 2: –ü–æ–∏—Å–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö');
                            $markers.each(function(index) {
                                let $marker = $(this);
                                let $currentElement = $marker;
                                
                                // –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ DOM –¥–µ—Ä–µ–≤—É
                                for (let i = 0; i < 10; i++) {
                                    $currentElement = $currentElement.parent();
                                    if ($currentElement.length === 0) break;
                                    
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                                    let element = $currentElement[0];
                                    if (element && element.attributes) {
                                        for (let attr of element.attributes) {
                                            let attrValue = attr.value;
                                            
                                            // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                                            response.data.coordinates.forEach(function(daCoord) {
                                                if (attrValue.includes(daCoord.lat.toString()) && 
                                                    attrValue.includes(daCoord.lng.toString())) {
                                                    console.log('‚úÖ –ù–ê–ô–î–ï–ù –≤ –∞—Ç—Ä–∏–±—É—Ç–µ!', attr.name, ':', attrValue);
                                                    console.log('üéØ DA ID:', daCoord.id, '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', daCoord.lat, daCoord.lng);
                                                    $marker.addClass('da-found');
                                                    foundCount++;
                                                }
                                            });
                                        }
                                    }
                                }
                            });
                        }
                        
                        // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –≤ —Å—Ç–∏–ª—è—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                        if (foundCount === 0) {
                            console.log('üîç –ú–ï–¢–û–î 3: –ü–æ–∏—Å–∫ –≤ —Å—Ç–∏–ª—è—Ö –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
                            
                            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã —Å –∏—Ö –ø–æ–∑–∏—Ü–∏—è–º–∏
                            let markersWithPositions = [];
                            $markers.each(function(index) {
                                let $marker = $(this);
                                let $positionedParent = $marker.closest('[style*="position"]');
                                
                                if ($positionedParent.length) {
                                    let style = $positionedParent.attr('style') || '';
                                    let topMatch = style.match(/top:\s*([+-]?\d*\.?\d+)px/);
                                    let leftMatch = style.match(/left:\s*([+-]?\d*\.?\d+)px/);
                                    
                                    if (topMatch && leftMatch) {
                                        markersWithPositions.push({
                                            marker: $marker,
                                            top: parseFloat(topMatch[1]),
                                            left: parseFloat(leftMatch[1]),
                                            index: index
                                        });
                                    }
                                }
                            });
                            
                            console.log('üìç –ú–∞—Ä–∫–µ—Ä—ã —Å –ø–æ–∑–∏—Ü–∏—è–º–∏:', markersWithPositions);
                            
                            // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Google Maps –æ–±—ä–µ–∫—Ç–∞—Ö
                            for (let globalVar in window) {
                                if (globalVar.startsWith('MyHomeMapListing')) {
                                    const mapObj = window[globalVar];
                                    console.log('üó∫Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É:', globalVar);
                                    
                                    // –ò—â–µ–º –º–∞—Å—Å–∏–≤—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                                    function findCoordinatesInMapObject(obj, path = '') {
                                        for (let key in obj) {
                                            try {
                                                let value = obj[key];
                                                if (Array.isArray(value) && value.length > 0) {
                                                    if (value[0] && (value[0].lat || value[0].lng)) {
                                                        console.log('üìã –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', path + '.' + key, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤:', value.length);
                                                        
                                                        value.forEach((item, itemIndex) => {
                                                            if (item.lat && item.lng) {
                                                                response.data.coordinates.forEach(function(daCoord) {
                                                                    if (Math.abs(parseFloat(item.lat) - daCoord.lat) < 0.0001 && 
                                                                        Math.abs(parseFloat(item.lng) - daCoord.lng) < 0.0001) {
                                                                        
                                                                        console.log('üéØ –ö–û–û–†–î–ò–ù–ê–¢–´ –°–û–í–ü–ê–õ–ò!', daCoord.id, '–≤ –ø–æ–∑–∏—Ü–∏–∏', itemIndex);
                                                                        console.log('üéØ DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', daCoord.lat, daCoord.lng);
                                                                        console.log('üéØ –ö–∞—Ä—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', item.lat, item.lng);
                                                                        
                                                                        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–∞—Ä–∫–µ—Ä –ø–æ itemIndex
                                                                        if (markersWithPositions[itemIndex]) {
                                                                            markersWithPositions[itemIndex].marker.addClass('da-found');
                                                                            foundCount++;
                                                                            console.log('‚úÖ –ú–ê–†–ö–ï–† –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ø–æ –ø–æ–∑–∏—Ü–∏–∏', itemIndex);
                                                                        } else if ($markers.eq(itemIndex).length) {
                                                                            $markers.eq(itemIndex).addClass('da-found');
                                                                            foundCount++;
                                                                            console.log('‚úÖ –ú–ê–†–ö–ï–† –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ø—Ä—è–º–æ –ø–æ –∏–Ω–¥–µ–∫—Å—É', itemIndex);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                } else if (typeof value === 'object' && value !== null) {
                                                    findCoordinatesInMapObject(value, path + '.' + key);
                                                }
                                            } catch (e) {
                                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                            }
                                        }
                                    }
                                    
                                    findCoordinatesInMapObject(mapObj, globalVar);
                                }
                            }
                        }
                        
                        // –î–µ–º–æ —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                        if (foundCount === 0) {
                            console.log('üü¢ –î–ï–ú–û –†–ï–ñ–ò–ú - –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
                            $markers.slice(0, 1).addClass('da-demo');
                            foundCount = 1;
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        setTimeout(() => {
                            const finalFound = $('.mh-map-pin.da-found').length;
                            const finalDemo = $('.mh-map-pin.da-demo').length;
                            
                            console.log('üéØ === –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú ===');
                            console.log('üî¥ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', finalFound);
                            console.log('üü¢ –î–µ–º–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', finalDemo);
                            console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                            console.log('üìä DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:', response.data.coordinates.length);
                            
                            if (finalFound > 0) {
                                console.log('üéâ –£–°–ü–ï–•! –ú–∞—Ä–∫–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Ç–æ—á–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º!');
                            } else if (finalDemo > 0) {
                                console.log('üü¢ –î–µ–º–æ —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                            }
                        }, 500);
                        
                    } else {
                        console.log('‚ö†Ô∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
                        
                        // –î–µ–º–æ —Ä–µ–∂–∏–º
                        console.log('üü¢ –î–ï–ú–û –†–ï–ñ–ò–ú');
                        $markers.slice(0, 1).addClass('da-demo');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå AJAX –æ—à–∏–±–∫–∞:', error);
                    
                    // –î–µ–º–æ —Ä–µ–∂–∏–º
                    console.log('üü¢ –î–ï–ú–û –†–ï–ñ–ò–ú –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
                    let $markers = $('.mh-map-pin');
                    $markers.slice(0, 1).addClass('da-demo');
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        setTimeout(processDAMarkers, 3000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                    setTimeout(processDAMarkers, 1500);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
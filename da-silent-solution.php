<?php
/**
 * DA Markers - –ù–ï–ó–ê–ú–ï–¢–ù–´–ô –ü–û–ò–°–ö
 * –ò—â–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ù–µ–∑–∞–º–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</small></p>';
    
    echo '<hr><h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>';
    echo '<p><strong>ID:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> ' . $post->post_title . '</p>';
    echo '<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ' . ($value ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : '‚ö™ –í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('wp_ajax_get_da_silent', 'ajax_get_da_silent');
add_action('wp_ajax_nopriv_get_da_silent', 'ajax_get_da_silent');
function ajax_get_da_silent() {
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    
    foreach ($da_posts as $post) {
        $da_data[] = array(
            'id' => intval($post->ID),
            'title' => $post->post_title
        );
    }
    
    wp_send_json_success(array(
        'da_properties' => $da_data,
        'count' => count($da_data)
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_silent_css');
function da_silent_css() {
    ?>
    <style>
    @keyframes da-silent-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            transform: scale(1.2);
        }
    }

    .mh-map-pin.da-silent-found {
        animation: da-silent-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-silent-found i {
        color: #ff0066 !important;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã */
    .da-temp-hidden {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }
    </style>
    <?php
}

// JavaScript - –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫
add_action('wp_footer', 'da_silent_script');
function da_silent_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('ü§´ DA –ù–ï–ó–ê–ú–ï–¢–ù–´–ô –ü–û–ò–°–ö - –∑–∞–ø—É—â–µ–Ω–æ');
        
        let daProperties = [];
        let foundMarkers = [];
        let searchInProgress = false;
        
        // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ
        function fetchDAData() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_silent'
                }
            });
        }
        
        // –ù–µ–∑–∞–º–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –º–∞—Ä–∫–µ—Ä–∞—Ö
        function silentSearch() {
            if (searchInProgress) {
                console.log('üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
                return;
            }
            
            searchInProgress = true;
            console.log('ü§´ –ù–ï–ó–ê–ú–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ä–∫–µ—Ä–æ–≤');
            
            const $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                searchInProgress = false;
                return;
            }
            
            console.log('üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
            console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:', daProperties.length);
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
            $markers.removeClass('da-silent-found');
            foundMarkers = [];
            
            let currentMarkerIndex = 0;
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            function checkMarkerSilently() {
                if (currentMarkerIndex >= $markers.length) {
                    console.log('üèÅ –ù–µ–∑–∞–º–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    showSilentResults();
                    searchInProgress = false;
                    return;
                }
                
                const $currentMarker = $markers.eq(currentMarkerIndex);
                console.log('ü§´ –ù–µ–∑–∞–º–µ—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä #' + currentMarkerIndex);
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ñ–æ–±–æ–∫—Å–æ–≤
                const $existingInfoboxes = $('.infoBox, .mh-map-infobox');
                const originalDisplay = {};
                $existingInfoboxes.each(function(i) {
                    originalDisplay[i] = $(this).css('display');
                });
                
                // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã –í–†–ï–ú–ï–ù–ù–û
                $existingInfoboxes.addClass('da-temp-hidden');
                
                // –≠–º—É–ª–∏—Ä—É–µ–º hover –≤–º–µ—Å—Ç–æ click (–º–µ–Ω–µ–µ –∑–∞–º–µ—Ç–Ω–æ)
                $currentMarker.trigger('mouseenter');
                
                // –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ–±–æ–∫—Å–∞
                setTimeout(() => {
                    // –ò—â–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–∏–º—ã–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã (–∏—Å–∫–ª—é—á–∞—è —Å–∫—Ä—ã—Ç—ã–µ –Ω–∞–º–∏)
                    const $newInfoboxes = $('.infoBox, .mh-map-infobox').not('.da-temp-hidden').filter(':visible');
                    
                    let markerMatched = false;
                    
                    if ($newInfoboxes.length > 0) {
                        console.log('ü§´ –ù–∞–π–¥–µ–Ω –∏–Ω—Ñ–æ–±–æ–∫—Å –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ #' + currentMarkerIndex);
                        
                        $newInfoboxes.each(function() {
                            if (markerMatched) return;
                            
                            const $infobox = $(this);
                            const infoboxText = $infobox.text();
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                            daProperties.forEach(daProperty => {
                                if (markerMatched) return;
                                
                                if (infoboxText.includes(daProperty.title)) {
                                    console.log('‚úÖ –ù–ï–ó–ê–ú–ï–¢–ù–û –ù–ê–ô–î–ï–ù–û: –ú–∞—Ä–∫–µ—Ä #' + currentMarkerIndex + ' -> "' + daProperty.title + '"');
                                    
                                    $currentMarker.addClass('da-silent-found');
                                    foundMarkers.push({
                                        marker: $currentMarker,
                                        index: currentMarkerIndex,
                                        title: daProperty.title
                                    });
                                    
                                    markerMatched = true;
                                }
                            });
                        });
                        
                        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ñ–æ–±–æ–∫—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                        $newInfoboxes.addClass('da-temp-hidden');
                    }
                    
                    // –£–±–∏—Ä–∞–µ–º hover
                    $currentMarker.trigger('mouseleave');
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Ñ–æ–±–æ–∫—Å–æ–≤
                    setTimeout(() => {
                        $existingInfoboxes.removeClass('da-temp-hidden');
                        $('.infoBox, .mh-map-infobox').removeClass('da-temp-hidden');
                        
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ä–∫–µ—Ä—É
                        currentMarkerIndex++;
                        setTimeout(checkMarkerSilently, 100); // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
                        
                    }, 50); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    
                }, 100); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ–±–æ–∫—Å–∞
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–∑–∞–º–µ—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            checkMarkerSilently();
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –ø–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
        function searchInGlobalData() {
            console.log('üîç –ü–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã...');
            
            const $markers = $('.mh-map-pin');
            let foundCount = 0;
            
            // –ò—â–µ–º –≤ MyHomeMapListing –æ–±—ä–µ–∫—Ç–∞—Ö
            for (let globalVar in window) {
                if (globalVar.startsWith('MyHomeMapListing')) {
                    const mapObj = window[globalVar];
                    console.log('üó∫Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:', globalVar);
                    
                    if (mapObj && mapObj.results && mapObj.results.estates) {
                        const estates = mapObj.results.estates;
                        console.log('üè† –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', estates.length);
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                        estates.forEach((estate, index) => {
                            if (estate.post_title || estate.title || estate.name) {
                                const estateTitle = estate.post_title || estate.title || estate.name;
                                
                                daProperties.forEach(daProperty => {
                                    if (estateTitle.includes(daProperty.title) || daProperty.title.includes(estateTitle)) {
                                        console.log('‚úÖ –ù–ê–ô–î–ï–ù–û –í –î–ê–ù–ù–´–•: "' + daProperty.title + '" –≤ –ø–æ–∑–∏—Ü–∏–∏ ' + index);
                                        
                                        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                                        if ($markers.eq(index).length) {
                                            $markers.eq(index).addClass('da-silent-found');
                                            foundCount++;
                                            
                                            foundMarkers.push({
                                                marker: $markers.eq(index),
                                                index: index,
                                                title: daProperty.title
                                            });
                                        }
                                    }
                                });
                            }
                        });
                    }
                }
            }
            
            if (foundCount === 0) {
                console.log('ü§´ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–º—É –ø–æ–∏—Å–∫—É —á–µ—Ä–µ–∑ hover...');
                silentSearch();
            } else {
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', foundCount);
                showSilentResults();
            }
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        function showSilentResults() {
            const activeMarkers = $('.mh-map-pin.da-silent-found').length;
            
            console.log('üèÅ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ù–ï–ó–ê–ú–ï–¢–ù–û–ì–û –ü–û–ò–°–ö–ê ===');
            console.log('üî¥ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö DA –º–∞—Ä–∫–µ—Ä–æ–≤:', activeMarkers);
            console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $('.mh-map-pin').length);
            console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', daProperties.length);
            
            if (activeMarkers > 0) {
                console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã DA –º–∞—Ä–∫–µ—Ä—ã –Ω–µ–∑–∞–º–µ—Ç–Ω–æ!');
                foundMarkers.forEach(data => {
                    console.log('üìå –ú–∞—Ä–∫–µ—Ä #' + data.index + ' -> "' + data.title + '"');
                });
            } else {
                console.log('‚ùå DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchDAData().done(function(response) {
            if (response.success && response.data.da_properties) {
                daProperties = response.data.da_properties;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', daProperties);
                
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                setTimeout(() => {
                    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫...');
                    searchInGlobalData();
                }, 3000);
                
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ä–µ–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º—Å—è)
                if (window.MutationObserver) {
                    let lastMarkerCount = $('.mh-map-pin').length;
                    let debounceTimer;
                    
                    const observer = new MutationObserver(function(mutations) {
                        const currentMarkerCount = $('.mh-map-pin').length;
                        
                        if (Math.abs(currentMarkerCount - lastMarkerCount) > 3) {
                            clearTimeout(debounceTimer);
                            debounceTimer = setTimeout(() => {
                                if (!searchInProgress) {
                                    console.log('ü§´ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫...');
                                    lastMarkerCount = currentMarkerCount;
                                    $('.mh-map-pin').removeClass('da-silent-found');
                                    searchInGlobalData();
                                }
                            }, 3000); // –ë–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                        }
                    });
                    
                    observer.observe(document.body, {
                        childList: true,
                        subtree: true
                    });
                }
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞');
            }
        });
    });
    </script>
    <?php
}
?>
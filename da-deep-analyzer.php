<?php
/**
 * DA Deep Analyzer - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–Å: DOM, JS, —Å–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —Å–æ–±—ã—Ç–∏—è
 */

add_shortcode('da_deep_analyzer', 'da_deep_analyzer_shortcode');
function da_deep_analyzer_shortcode() {
    ob_start();
    ?>
    <div id="da-deep-analyzer" style="border: 2px solid #333; padding: 20px; margin: 20px; background: #f9f9f9;">
        <h3>üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó DA –ú–ê–†–ö–ï–†–û–í</h3>
        <button onclick="startDeepAnalysis()" style="padding: 10px 20px; background: #007cba; color: white; border: none; cursor: pointer;">
            üöÄ –ó–ê–ü–£–°–¢–ò–¢–¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó
        </button>
        <div id="analysis-status" style="margin: 10px 0; font-weight: bold;"></div>
        <div id="analysis-results" style="margin-top: 20px;"></div>
    </div>

    <script>
    // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    const DA_COORDS = [
        {id: 113, lat: 55.688709, lng: 37.59307290000004, title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞'},
        {id: 5852, lat: 55.74455070740856, lng: 37.3704401548786, title: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π'}
    ];

    function updateStatus(message) {
        document.getElementById('analysis-status').innerHTML = '‚è≥ ' + message;
        console.log('üìä ' + message);
    }

    function addResult(title, content) {
        const resultsDiv = document.getElementById('analysis-results');
        const section = document.createElement('div');
        section.style.cssText = 'border: 1px solid #ddd; margin: 10px 0; padding: 15px; background: white;';
        section.innerHTML = '<h4 style="margin: 0 0 10px 0; color: #333;">' + title + '</h4>' + content;
        resultsDiv.appendChild(section);
    }

    function startDeepAnalysis() {
        console.log('üî¨ === –ù–ê–ß–ê–õ–û –ì–õ–£–ë–û–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê DA –ú–ê–†–ö–ï–†–û–í ===');
        document.getElementById('analysis-results').innerHTML = '';
        
        updateStatus('–ê–Ω–∞–ª–∏–∑ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
        analyzeDOM();
        
        setTimeout(() => {
            updateStatus('–ê–Ω–∞–ª–∏–∑ JavaScript –æ–±—ä–µ–∫—Ç–æ–≤...');
            analyzeJavaScript();
        }, 500);
        
        setTimeout(() => {
            updateStatus('–ê–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
            analyzeEvents();
        }, 1000);
        
        setTimeout(() => {
            updateStatus('–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...');
            analyzeNetwork();
        }, 1500);
        
        setTimeout(() => {
            updateStatus('–ü–æ–∏—Å–∫ Google Maps –¥–∞–Ω–Ω—ã—Ö...');
            analyzeGoogleMaps();
        }, 2000);
        
        setTimeout(() => {
            updateStatus('–ê–Ω–∞–ª–∏–∑ CSS –∏ —Å—Ç–∏–ª–µ–π...');
            analyzeCSS();
        }, 2500);
        
        setTimeout(() => {
            updateStatus('–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–≤—è–∑–µ–π...');
            analyzeFinalConnections();
        }, 3000);
        
        setTimeout(() => {
            updateStatus('–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
        }, 3500);
    }

    function analyzeDOM() {
        let results = '<h5>üåê DOM –°—Ç—Ä—É–∫—Ç—É—Ä–∞</h5>';
        
        // 1. –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –∏—Ö –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        const markers = document.querySelectorAll('.mh-map-pin');
        results += '<p><strong>–ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:</strong> ' + markers.length + '</p>';
        
        results += '<h6>üìç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞:</h6>';
        markers.forEach((marker, index) => {
            results += '<div style="border-left: 3px solid #007cba; padding-left: 10px; margin: 10px 0;">';
            results += '<strong>–ú–∞—Ä–∫–µ—Ä #' + index + '</strong><br>';
            results += '<code>' + marker.outerHTML.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</code><br>';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–æ 15 —É—Ä–æ–≤–Ω–µ–π
            let parent = marker.parentElement;
            let level = 1;
            while (parent && level <= 15) {
                results += '<div style="margin-left: ' + (level * 10) + 'px; font-size: 12px;">';
                results += '<strong>–†–æ–¥–∏—Ç–µ–ª—å ' + level + ':</strong> ' + parent.tagName;
                
                if (parent.id) results += ' id="' + parent.id + '"';
                if (parent.className) results += ' class="' + parent.className + '"';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è
                if (parent.attributes) {
                    for (let attr of parent.attributes) {
                        if (attr.name !== 'id' && attr.name !== 'class') {
                            results += ' ' + attr.name + '="' + attr.value + '"';
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∞—Ç—Ä–∏–±—É—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            DA_COORDS.forEach(coord => {
                                if (attr.value.includes(coord.lat.toString()) || 
                                    attr.value.includes(coord.lng.toString())) {
                                    results += ' <span style="background: yellow; color: red;">üéØ –ù–ê–ô–î–ï–ù–ê DA –ö–û–û–†–î–ò–ù–ê–¢–ê!</span>';
                                }
                            });
                        }
                    }
                }
                results += '</div>';
                
                parent = parent.parentElement;
                level++;
            }
            results += '</div>';
        });
        
        // 2. –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
        results += '<h6>üó∫Ô∏è –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:</h6>';
        const coordElements = document.querySelectorAll('[data-lat], [data-lng], [lat], [lng], [latitude], [longitude]');
        coordElements.forEach((el, index) => {
            results += '<div style="background: #f0f0f0; padding: 5px; margin: 3px;">';
            results += '<strong>–≠–ª–µ–º–µ–Ω—Ç ' + index + ':</strong> ' + el.tagName + '<br>';
            results += '<code>' + el.outerHTML.substring(0, 200) + '...</code>';
            results += '</div>';
        });
        
        addResult('DOM –ê–Ω–∞–ª–∏–∑', results);
    }

    function analyzeJavaScript() {
        let results = '<h5>üíª JavaScript –û–±—ä–µ–∫—Ç—ã</h5>';
        
        // 1. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ window.MyHome
        if (window.MyHome) {
            results += '<h6>üè† window.MyHome:</h6>';
            results += '<pre style="background: #f5f5f5; padding: 10px; overflow: auto; max-height: 300px;">';
            
            function analyzeObject(obj, path = '', depth = 0) {
                if (depth > 5) return '... (—Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–æ)\n';
                
                let output = '';
                for (let key in obj) {
                    try {
                        let value = obj[key];
                        let currentPath = path ? path + '.' + key : key;
                        
                        if (typeof value === 'function') {
                            output += currentPath + ': [Function]\n';
                        } else if (typeof value === 'object' && value !== null) {
                            if (Array.isArray(value)) {
                                output += currentPath + ': Array(' + value.length + ')\n';
                                if (value.length > 0 && depth < 3) {
                                    output += analyzeObject(value, currentPath, depth + 1);
                                }
                            } else {
                                output += currentPath + ': Object\n';
                                if (depth < 3) {
                                    output += analyzeObject(value, currentPath, depth + 1);
                                }
                            }
                        } else {
                            output += currentPath + ': ' + value + '\n';
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                            DA_COORDS.forEach(coord => {
                                if (value && (value.toString().includes(coord.lat.toString()) || 
                                             value.toString().includes(coord.lng.toString()))) {
                                    output += '  üéØ –ù–ê–ô–î–ï–ù–ê DA –ö–û–û–†–î–ò–ù–ê–¢–ê –≤ ' + currentPath + '!\n';
                                }
                            });
                        }
                    } catch (e) {
                        output += currentPath + ': [–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞]\n';
                    }
                }
                return output;
            }
            
            results += analyzeObject(window.MyHome);
            results += '</pre>';
        }
        
        // 2. –ü–æ–∏—Å–∫ Google Maps –æ–±—ä–µ–∫—Ç–æ–≤
        results += '<h6>üó∫Ô∏è Google Maps –æ–±—ä–µ–∫—Ç—ã:</h6>';
        const googleKeys = ['google', 'map', 'maps', 'googleMap', 'myHomeMap', 'estateMap'];
        googleKeys.forEach(key => {
            if (window[key]) {
                results += '<p><strong>' + key + ':</strong> –Ω–∞–π–¥–µ–Ω</p>';
                if (window[key].markers) {
                    results += '<p>  - markers: Array(' + window[key].markers.length + ')</p>';
                }
            } else {
                results += '<p><strong>' + key + ':</strong> –Ω–µ –Ω–∞–π–¥–µ–Ω</p>';
            }
        });
        
        // 3. –í—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        results += '<h6>üåç –í—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</h6>';
        results += '<div style="max-height: 200px; overflow: auto; background: #f9f9f9; padding: 10px;">';
        for (let key in window) {
            try {
                if (typeof window[key] === 'object' && window[key] !== null && 
                    !key.startsWith('webkit') && !key.startsWith('chrome')) {
                    results += key + ': ' + typeof window[key] + '<br>';
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            }
        }
        results += '</div>';
        
        addResult('JavaScript –ê–Ω–∞–ª–∏–∑', results);
    }

    function analyzeEvents() {
        let results = '<h5>‚ö° –°–æ–±—ã—Ç–∏—è –∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏</h5>';
        
        // 1. –°–æ–±—ã—Ç–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ä–∞—Ö
        const markers = document.querySelectorAll('.mh-map-pin');
        results += '<h6>üìç –°–æ–±—ã—Ç–∏—è –Ω–∞ –º–∞—Ä–∫–µ—Ä–∞—Ö:</h6>';
        
        markers.forEach((marker, index) => {
            results += '<p><strong>–ú–∞—Ä–∫–µ—Ä ' + index + ':</strong></p>';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            const events = ['click', 'mouseover', 'mouseout', 'mousedown', 'mouseup'];
            events.forEach(eventType => {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                const listeners = getEventListeners ? getEventListeners(marker) : null;
                if (listeners && listeners[eventType]) {
                    results += '  - ' + eventType + ': ' + listeners[eventType].length + ' –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤<br>';
                }
            });
        });
        
        // 2. –ú—É—Ç–∞—Ü–∏–∏ DOM
        results += '<h6>üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM:</h6>';
        const observer = new MutationObserver(function(mutations) {
            mutations.forEach(function(mutation) {
                console.log('üîÑ DOM –∏–∑–º–µ–Ω–µ–Ω–∏–µ:', mutation.type, mutation.target);
            });
        });
        observer.observe(document.body, { childList: true, subtree: true, attributes: true });
        results += '<p>‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</p>';
        
        addResult('–°–æ–±—ã—Ç–∏—è –∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏', results);
    }

    function analyzeNetwork() {
        let results = '<h5>üåê –°–µ—Ç–µ–≤—ã–µ –ó–∞–ø—Ä–æ—Å—ã</h5>';
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XMLHttpRequest –∏ fetch
        results += '<h6>üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤:</h6>';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const originalXHR = XMLHttpRequest.prototype.open;
        const originalFetch = window.fetch;
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XHR
        XMLHttpRequest.prototype.open = function(method, url) {
            console.log('üì° XHR –∑–∞–ø—Ä–æ—Å:', method, url);
            results += '<p>XHR: ' + method + ' ' + url + '</p>';
            
            this.addEventListener('load', function() {
                if (this.responseText) {
                    DA_COORDS.forEach(coord => {
                        if (this.responseText.includes(coord.lat.toString()) || 
                            this.responseText.includes(coord.lng.toString())) {
                            console.log('üéØ –ù–ê–ô–î–ï–ù–ê DA –ö–û–û–†–î–ò–ù–ê–¢–ê –≤ XHR –æ—Ç–≤–µ—Ç–µ!', url);
                            results += '<p style="background: yellow;">üéØ DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ: ' + url + '</p>';
                        }
                    });
                }
            });
            
            return originalXHR.apply(this, arguments);
        };
        
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch
        window.fetch = function() {
            console.log('üì° Fetch –∑–∞–ø—Ä–æ—Å:', arguments[0]);
            results += '<p>Fetch: ' + arguments[0] + '</p>';
            
            return originalFetch.apply(this, arguments).then(response => {
                if (response.ok) {
                    response.clone().text().then(text => {
                        DA_COORDS.forEach(coord => {
                            if (text.includes(coord.lat.toString()) || 
                                text.includes(coord.lng.toString())) {
                                console.log('üéØ –ù–ê–ô–î–ï–ù–ê DA –ö–û–û–†–î–ò–ù–ê–¢–ê –≤ Fetch –æ—Ç–≤–µ—Ç–µ!', arguments[0]);
                                results += '<p style="background: yellow;">üéØ DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ: ' + arguments[0] + '</p>';
                            }
                        });
                    });
                }
                return response;
            });
        };
        
        results += '<p>‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</p>';
        
        addResult('–°–µ—Ç–µ–≤—ã–µ –ó–∞–ø—Ä–æ—Å—ã', results);
    }

    function analyzeGoogleMaps() {
        let results = '<h5>üó∫Ô∏è Google Maps –ê–Ω–∞–ª–∏–∑</h5>';
        
        if (typeof google !== 'undefined' && google.maps) {
            results += '<p>‚úÖ Google Maps API –¥–æ—Å—Ç—É–ø–µ–Ω</p>';
            
            // –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const mapDivs = document.querySelectorAll('div[style*="position"], .map, #map, [id*="map"], [class*="map"]');
            results += '<h6>üó∫Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∫–∞—Ä—Ç (' + mapDivs.length + '):</h6>';
            
            mapDivs.forEach((div, index) => {
                results += '<div style="border: 1px solid #ccc; padding: 5px; margin: 5px;">';
                results += '<strong>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä ' + index + ':</strong><br>';
                results += 'ID: ' + (div.id || '–Ω–µ—Ç') + '<br>';
                results += 'Class: ' + (div.className || '–Ω–µ—Ç') + '<br>';
                results += '–†–∞–∑–º–µ—Ä—ã: ' + div.offsetWidth + 'x' + div.offsetHeight + '<br>';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —ç—Ç–æ–º div –º–∞—Ä–∫–µ—Ä—ã
                const markersInDiv = div.querySelectorAll('.mh-map-pin');
                results += '–ú–∞—Ä–∫–µ—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏: ' + markersInDiv.length + '<br>';
                
                results += '</div>';
            });
            
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–∞—Ä—Ç
            results += '<h6>üéØ –ü–æ–∏—Å–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Google Maps:</h6>';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            const mapVars = ['map', 'googleMap', 'myHomeMap', 'estateMap', 'mapInstance'];
            mapVars.forEach(varName => {
                if (window[varName] && window[varName].getCenter) {
                    results += '<p>‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: ' + varName + '</p>';
                    try {
                        const center = window[varName].getCenter();
                        results += '  –¶–µ–Ω—Ç—Ä: ' + center.lat() + ', ' + center.lng() + '<br>';
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–∞—Ä—Ç—ã
                        if (window[varName].markers) {
                            results += '  –ú–∞—Ä–∫–µ—Ä–æ–≤: ' + window[varName].markers.length + '<br>';
                        }
                    } catch (e) {
                        results += '  –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ<br>';
                    }
                }
            });
            
        } else {
            results += '<p>‚ùå Google Maps API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>';
        }
        
        addResult('Google Maps –ê–Ω–∞–ª–∏–∑', results);
    }

    function analyzeCSS() {
        let results = '<h5>üé® CSS –∏ –°—Ç–∏–ª–∏</h5>';
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
        const markers = document.querySelectorAll('.mh-map-pin');
        results += '<h6>üìç –°—Ç–∏–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:</h6>';
        
        markers.forEach((marker, index) => {
            const computedStyle = window.getComputedStyle(marker);
            results += '<div style="border: 1px solid #ddd; padding: 5px; margin: 5px;">';
            results += '<strong>–ú–∞—Ä–∫–µ—Ä ' + index + ':</strong><br>';
            results += 'Position: ' + computedStyle.position + '<br>';
            results += 'Z-index: ' + computedStyle.zIndex + '<br>';
            results += 'Transform: ' + computedStyle.transform + '<br>';
            results += 'Top: ' + computedStyle.top + '<br>';
            results += 'Left: ' + computedStyle.left + '<br>';
            results += '</div>';
        });
        
        addResult('CSS –ê–Ω–∞–ª–∏–∑', results);
    }

    function analyzeFinalConnections() {
        let results = '<h5>üîó –§–∏–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑ –°–≤—è–∑–µ–π</h5>';
        
        results += '<h6>üéØ –°–≤–æ–¥–∫–∞ –ø–æ–∏—Å–∫–∞ DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</h6>';
        
        DA_COORDS.forEach((coord, index) => {
            results += '<div style="border: 2px solid #007cba; padding: 10px; margin: 10px;">';
            results += '<strong>DA –û–±—ä—è–≤–ª–µ–Ω–∏–µ ' + coord.id + '</strong><br>';
            results += '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ' + coord.lat + ', ' + coord.lng + '<br>';
            results += '–ù–∞–∑–≤–∞–Ω–∏–µ: ' + coord.title + '<br>';
            
            // –ò—â–µ–º —ç—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ–∑–¥–µ
            let found = false;
            
            // –í HTML
            if (document.documentElement.innerHTML.includes(coord.lat.toString())) {
                results += '‚úÖ –®–∏—Ä–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML<br>';
                found = true;
            }
            if (document.documentElement.innerHTML.includes(coord.lng.toString())) {
                results += '‚úÖ –î–æ–ª–≥–æ—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ HTML<br>';
                found = true;
            }
            
            if (!found) {
                results += '‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ HTML<br>';
            }
            
            results += '</div>';
        });
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        results += '<h6>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h6>';
        results += '<ul>';
        results += '<li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç AJAX –∑–∞–ø—Ä–æ—Å–æ–≤</li>';
        results += '<li>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏</li>';
        results += '<li>–í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</li>';
        results += '<li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Network –≤–∫–ª–∞–¥–∫—É –≤ DevTools</li>';
        results += '</ul>';
        
        addResult('–§–∏–Ω–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑', results);
    }
    </script>

    <style>
    @keyframes da-marker-blink {
        0%, 100% { 
            transform: scale(1); 
            opacity: 1;
            filter: drop-shadow(0 0 5px #ff6b6b);
        }
        50% { 
            transform: scale(1.2); 
            opacity: 0.8;
            filter: drop-shadow(0 0 15px #ff6b6b);
        }
    }

    .mh-map-pin.da-marker-blink {
        animation: da-marker-blink 1.5s infinite;
        z-index: 1000 !important;
        position: relative;
        box-shadow: 0 0 20px rgba(255, 107, 107, 0.6);
        border-radius: 50%;
    }

    .mh-map-pin.da-marker-blink i {
        color: #ff6b6b !important;
        font-weight: bold;
        text-shadow: 0 0 5px rgba(255, 107, 107, 0.8);
    }
    </style>
    <?php
    return ob_get_clean();
}
?>
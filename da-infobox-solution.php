<?php
/**
 * DA Markers - –ü–û–ò–°–ö –í –ò–ù–§–û–ë–û–ö–°–ê–•
 * –ò—â–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –≤–∏–¥–∏–º—ã—Ö –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö –º–∞—Ä–∫–µ—Ä–æ–≤</small></p>';
    
    echo '<hr><h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>';
    echo '<p><strong>ID:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> ' . $post->post_title . '</p>';
    echo '<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ' . ($value ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : '‚ö™ –í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    
    if ($value) {
        echo '<p style="color: green;">‚úÖ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö –º–∞—Ä–∫–µ—Ä–æ–≤</p>';
        echo '<p><small>–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∫–ª–∏–∫–∞—Ç—å –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º –∏ –∏—Å–∫–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö</small></p>';
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('wp_ajax_get_da_infobox', 'ajax_get_da_infobox');
add_action('wp_ajax_nopriv_get_da_infobox', 'ajax_get_da_infobox');
function ajax_get_da_infobox() {
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    
    foreach ($da_posts as $post) {
        $da_data[] = array(
            'id' => intval($post->ID),
            'title' => $post->post_title
        );
    }
    
    wp_send_json_success(array(
        'da_properties' => $da_data,
        'count' => count($da_data)
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_infobox_css');
function da_infobox_css() {
    ?>
    <style>
    @keyframes da-infobox-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            transform: scale(1.2);
        }
    }

    .mh-map-pin.da-infobox-found {
        animation: da-infobox-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-infobox-found i {
        color: #ff0066 !important;
    }
    </style>
    <?php
}

// JavaScript - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö
add_action('wp_footer', 'da_infobox_script');
function da_infobox_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üìã DA –ü–û–ò–°–ö –í –ò–ù–§–û–ë–û–ö–°–ê–• - –∑–∞–ø—É—â–µ–Ω–æ');
        
        let daProperties = [];
        let foundMarkers = [];
        let searchInProgress = false;
        
        // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ
        function fetchDAData() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_infobox'
                }
            });
        }
        
        // –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        function searchInInfoboxes() {
            if (searchInProgress) {
                console.log('üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
                return;
            }
            
            searchInProgress = true;
            console.log('üîç –ü–û–ò–°–ö –í –ò–ù–§–û–ë–û–ö–°–ê–• –º–∞—Ä–∫–µ—Ä–æ–≤');
            
            const $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                searchInProgress = false;
                return;
            }
            
            console.log('üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
            console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:', daProperties.length);
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
            $markers.removeClass('da-infobox-found');
            foundMarkers = [];
            
            let currentMarkerIndex = 0;
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            function checkNextMarker() {
                if (currentMarkerIndex >= $markers.length) {
                    // –ó–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                    console.log('üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
                    showFinalResults();
                    searchInProgress = false;
                    return;
                }
                
                const $currentMarker = $markers.eq(currentMarkerIndex);
                console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä–∫–µ—Ä #' + currentMarkerIndex);
                
                // –ö–ª–∏–∫–∞–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ä —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ–±–æ–∫—Å
                $currentMarker.trigger('click');
                
                // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ–±–æ–∫—Å–∞
                setTimeout(() => {
                    // –ò—â–µ–º –≤–∏–¥–∏–º—ã–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã
                    const $visibleInfoboxes = $('.infoBox:visible, .mh-map-infobox:visible, [class*="infobox"]:visible').filter(':visible');
                    
                    console.log('üìã –í–∏–¥–∏–º—ã—Ö –∏–Ω—Ñ–æ–±–æ–∫—Å–æ–≤:', $visibleInfoboxes.length);
                    
                    let markerMatched = false;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–∏–¥–∏–º—ã–π –∏–Ω—Ñ–æ–±–æ–∫—Å
                    $visibleInfoboxes.each(function() {
                        if (markerMatched) return;
                        
                        const $infobox = $(this);
                        const infoboxText = $infobox.text();
                        
                        console.log('üìã –¢–µ–∫—Å—Ç –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–µ:', infoboxText.substring(0, 100) + '...');
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                        daProperties.forEach(daProperty => {
                            if (markerMatched) return;
                            
                            if (infoboxText.includes(daProperty.title)) {
                                console.log('‚úÖ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï!');
                                console.log('üéØ –ú–∞—Ä–∫–µ—Ä #' + currentMarkerIndex + ' —Å–æ–¥–µ—Ä–∂–∏—Ç: "' + daProperty.title + '"');
                                
                                $currentMarker.addClass('da-infobox-found');
                                foundMarkers.push({
                                    marker: $currentMarker,
                                    index: currentMarkerIndex,
                                    title: daProperty.title
                                });
                                
                                markerMatched = true;
                            }
                        });
                    });
                    
                    if (!markerMatched) {
                        console.log('‚ùå –ú–∞—Ä–∫–µ—Ä #' + currentMarkerIndex + ' - –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π');
                    }
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ–±–æ–∫—Å (–∫–ª–∏–∫–∞–µ–º –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ)
                    $('body').trigger('click');
                    
                    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ä–∫–µ—Ä—É
                    currentMarkerIndex++;
                    setTimeout(checkNextMarker, 500); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    
                }, 300); // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ–±–æ–∫—Å–∞
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            checkNextMarker();
        }
        
        // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        function showFinalResults() {
            const activeMarkers = $('.mh-map-pin.da-infobox-found').length;
            
            console.log('üèÅ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –í –ò–ù–§–û–ë–û–ö–°–ê–• ===');
            console.log('üî¥ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö DA –º–∞—Ä–∫–µ—Ä–æ–≤:', activeMarkers);
            console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:', $('.mh-map-pin').length);
            console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', daProperties.length);
            
            if (activeMarkers > 0) {
                console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã –º–∞—Ä–∫–µ—Ä—ã —Å DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏!');
                foundMarkers.forEach(data => {
                    console.log('üìå –ú–∞—Ä–∫–µ—Ä #' + data.index + ' -> "' + data.title + '"');
                });
            } else {
                console.log('‚ùå DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö');
                console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                console.log('   1. –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –±–∞–∑–µ');
                console.log('   2. –ò–Ω—Ñ–æ–±–æ–∫—Å—ã –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∫–ª–∏–∫–µ');
                console.log('   3. –ò–Ω—Ñ–æ–±–æ–∫—Å—ã –∏–º–µ—é—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
            }
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchDAData().done(function(response) {
            if (response.success && response.data.da_properties) {
                daProperties = response.data.da_properties;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö:', daProperties);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ñ–æ–±–æ–∫—Å–∞—Ö –º–∞—Ä–∫–µ—Ä–æ–≤...');
                    searchInInfoboxes();
                }, 3000);
                
                // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–∞—Ä—Ç—ã
                if (window.MutationObserver) {
                    let lastMarkerCount = 0;
                    let debounceTimer;
                    
                    const observer = new MutationObserver(function(mutations) {
                        const currentMarkerCount = $('.mh-map-pin').length;
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ä–∫–µ—Ä–æ–≤
                        if (Math.abs(currentMarkerCount - lastMarkerCount) > 2) {
                            clearTimeout(debounceTimer);
                            debounceTimer = setTimeout(() => {
                                if (!searchInProgress) {
                                    console.log('üîÑ –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ (' + lastMarkerCount + ' -> ' + currentMarkerCount + '), –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                                    lastMarkerCount = currentMarkerCount;
                                    searchInInfoboxes();
                                }
                            }, 2000);
                        }
                    });
                    
                    observer.observe(document.body, {
                        childList: true,
                        subtree: true
                    });
                    
                    lastMarkerCount = $('.mh-map-pin').length;
                }
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞');
            }
        });
    });
    </script>
    <?php
}
?>
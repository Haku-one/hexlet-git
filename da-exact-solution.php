<?php
/**
 * DA Markers - –¢–û–ß–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–æ–≤ –∏ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–µ–π
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–¢–û–ß–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–æ–≤</small></p>';
    
    echo '<hr><h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>';
    echo '<p><strong>ID:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> ' . $post->post_title . '</p>';
    echo '<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ' . ($value ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : '‚ö™ –í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('wp_ajax_get_da_exact', 'ajax_get_da_exact');
add_action('wp_ajax_nopriv_get_da_exact', 'ajax_get_da_exact');
function ajax_get_da_exact() {
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    
    foreach ($da_posts as $post) {
        $da_data[] = array(
            'id' => intval($post->ID),
            'title' => $post->post_title
        );
    }
    
    wp_send_json_success(array(
        'da_properties' => $da_data,
        'count' => count($da_data)
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_exact_css');
function da_exact_css() {
    ?>
    <style>
    @keyframes da-exact-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            transform: scale(1.2);
        }
    }

    .mh-map-pin.da-exact-found {
        animation: da-exact-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-exact-found i {
        color: #ff0066 !important;
    }
    </style>
    <?php
}

// JavaScript - –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫
add_action('wp_footer', 'da_exact_script');
function da_exact_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –¢–û–ß–ù–û–ï –†–ï–®–ï–ù–ò–ï - –∑–∞–ø—É—â–µ–Ω–æ');
        
        let daProperties = [];
        let foundMarkers = [];
        
        // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ
        function fetchDAData() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_exact'
                }
            });
        }
        
        // –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ä–∫–µ—Ä–æ–≤
        function findExactMarkers() {
            console.log('üîç –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫ –º–∞—Ä–∫–µ—Ä–æ–≤');
            
            const $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                return;
            }
            
            console.log('üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
            console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', daProperties.length);
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
            $markers.removeClass('da-exact-found');
            foundMarkers = [];
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            daProperties.forEach(daProperty => {
                console.log('üîç –ò—â–µ–º: "' + daProperty.title + '"');
                
                let foundMarker = null;
                let bestMatch = null;
                let bestDistance = Infinity;
                
                // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç—Ç–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                const searchText = daProperty.title;
                
                // –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ DOM
                $('*').each(function() {
                    const $element = $(this);
                    const elementText = $element.text().trim();
                    
                    // –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                    if (elementText === searchText) {
                        console.log('‚úÖ –¢–û–ß–ù–û–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ:', $element[0].tagName);
                        
                        // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –º–∞—Ä–∫–µ—Ä
                        const elementPos = $element.offset();
                        if (elementPos) {
                            $markers.each(function() {
                                const $marker = $(this);
                                const markerPos = $marker.offset();
                                
                                if (markerPos) {
                                    const distance = Math.sqrt(
                                        Math.pow(elementPos.left - markerPos.left, 2) + 
                                        Math.pow(elementPos.top - markerPos.top, 2)
                                    );
                                    
                                    if (distance < bestDistance) {
                                        bestDistance = distance;
                                        bestMatch = $marker;
                                    }
                                }
                            });
                        }
                    }
                });
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
                if (bestMatch && bestMatch.length) {
                    bestMatch.addClass('da-exact-found');
                    const markerIndex = $markers.index(bestMatch);
                    foundMarkers.push({
                        marker: bestMatch,
                        index: markerIndex,
                        title: daProperty.title,
                        distance: Math.round(bestDistance)
                    });
                    
                    console.log('üéØ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –º–∞—Ä–∫–µ—Ä #' + markerIndex + ' –¥–ª—è "' + daProperty.title + '" (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ' + Math.round(bestDistance) + 'px)');
                } else {
                    console.log('‚ùå –ù–ï –ù–ê–ô–î–ï–ù –º–∞—Ä–∫–µ—Ä –¥–ª—è "' + daProperty.title + '"');
                }
            });
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(() => {
                const activeMarkers = $('.mh-map-pin.da-exact-found').length;
                
                console.log('üèÅ === –¢–û–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
                console.log('üî¥ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö DA –º–∞—Ä–∫–µ—Ä–æ–≤:', activeMarkers);
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', daProperties.length);
                
                if (activeMarkers > 0) {
                    console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã –¢–û–ß–ù–´–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è!');
                    foundMarkers.forEach(data => {
                        console.log('üìå "' + data.title + '" -> –ú–∞—Ä–∫–µ—Ä #' + data.index + ' (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ' + data.distance + 'px)');
                    });
                } else {
                    console.log('‚ùå –¢–û–ß–ù–´–ï —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ù–ï –ù–ê–ô–î–ï–ù–´');
                    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                    console.log('   1. –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –±–∞–∑–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –Ω–∞ –∫–∞—Ä—Ç–µ');
                    console.log('   2. –ò–Ω—Ñ–æ–±–æ–∫—Å—ã —Å–∫—Ä—ã—Ç—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    console.log('   3. –¢–µ–∫—Å—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ');
                }
            }, 100);
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchDAData().done(function(response) {
            if (response.success && response.data.da_properties) {
                daProperties = response.data.da_properties;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', daProperties);
                
                // –ü–µ—Ä–≤—ã–π –ø–æ–∏—Å–∫
                setTimeout(findExactMarkers, 3000);
                
                // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö (–ë–ï–ó –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏)
                if (window.MutationObserver) {
                    let searchTimeout;
                    
                    const observer = new MutationObserver(function(mutations) {
                        let hasMarkerChanges = false;
                        
                        mutations.forEach(function(mutation) {
                            if (mutation.addedNodes) {
                                for (let node of mutation.addedNodes) {
                                    if (node.nodeType === 1 && 
                                        ($(node).find('.mh-map-pin').length > 0 || $(node).hasClass('mh-map-pin'))) {
                                        hasMarkerChanges = true;
                                        break;
                                    }
                                }
                            }
                        });
                        
                        if (hasMarkerChanges) {
                            clearTimeout(searchTimeout);
                            searchTimeout = setTimeout(() => {
                                console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –¢–û–ß–ù–´–ô –ø–æ–∏—Å–∫');
                                findExactMarkers();
                            }, 1000);
                        }
                    });
                    
                    observer.observe(document.body, {
                        childList: true,
                        subtree: true
                    });
                }
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
            }
        });
    });
    </script>
    <?php
}
?>
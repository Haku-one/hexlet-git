<?php
/**
 * DA Markers - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–∞–±–æ—Ç—ã + –¥–µ–º–æ —Ä–µ–∂–∏–º
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –º–∞—Ä–∫–µ—Ä —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –º–∏–≥–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–º –Ω–∞ –∫–∞—Ä—Ç–µ</small></p>';
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo '<hr><h4>–û—Ç–ª–∞–¥–∫–∞:</h4>';
    echo '<p><strong>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏:</strong> ' . ($value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    $lat = get_post_meta($post->ID, 'myhome_lat', true);
    $lng = get_post_meta($post->ID, 'myhome_lng', true);
    echo '<p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ' . ($lat && $lng ? $lat . ', ' . $lng : '–ù–µ —É–∫–∞–∑–∞–Ω—ã') . '</p>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º DA –º–∞—Ä–∫–µ—Ä–æ–º + –æ—Ç–ª–∞–¥–∫–∞
add_action('wp_ajax_get_da_marker_ids_debug', 'ajax_get_da_marker_ids_debug');
add_action('wp_ajax_nopriv_get_da_marker_ids_debug', 'ajax_get_da_marker_ids_debug');
function ajax_get_da_marker_ids_debug() {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è estate –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    $all_estates = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => 10, // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        'post_status' => 'publish'
    ));
    
    $debug_info = array();
    foreach ($all_estates as $post) {
        $da_enabled = get_post_meta($post->ID, '_da_marker_enabled', true);
        $lat = get_post_meta($post->ID, 'myhome_lat', true);
        $lng = get_post_meta($post->ID, 'myhome_lng', true);
        
        $debug_info[] = array(
            'id' => $post->ID,
            'title' => $post->post_title,
            'da_enabled' => $da_enabled,
            'has_coordinates' => !empty($lat) && !empty($lng),
            'lat' => $lat,
            'lng' => $lng
        );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º DA
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        ),
        'fields' => 'ids'
    ));
    
    $da_data = array();
    foreach ($da_posts as $post_id) {
        $lat = get_post_meta($post_id, 'myhome_lat', true);
        $lng = get_post_meta($post_id, 'myhome_lng', true);
        $title = get_the_title($post_id);
        
        if ($lat && $lng) {
            $da_data[] = array(
                'id' => $post_id,
                'lat' => floatval($lat),
                'lng' => floatval($lng),
                'title' => $title
            );
        }
    }
    
    wp_send_json_success(array(
        'da_markers' => $da_data,
        'count' => count($da_data),
        'debug_info' => $debug_info,
        'total_estates' => count($all_estates)
    ));
}

// –ü—Ä–æ—Å—Ç–æ–π CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_debug_css');
function da_debug_css() {
    ?>
    <style>
    @keyframes da-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            opacity: 1;
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            opacity: 0.7;
        }
    }

    .mh-map-pin.da-blink {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-blink i {
        color: #ff0066 !important;
    }
    
    /* –î–µ–º–æ —Ä–µ–∂–∏–º - –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç */
    .mh-map-pin.da-demo {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-demo i {
        color: #00ff66 !important;
    }
    </style>
    <?php
}

// –û—Ç–ª–∞–¥–æ—á–Ω—ã–π JavaScript
add_action('wp_footer', 'da_debug_script');
function da_debug_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üîß DA –ú–∞—Ä–∫–µ—Ä—ã - –û–¢–õ–ê–î–û–ß–ù–ê–Ø –í–ï–†–°–ò–Ø –∑–∞–ø—É—â–µ–Ω–∞');
        
        let processAttempts = 0;
        const maxAttempts = 5;
        
        function processDAMarkers() {
            processAttempts++;
            console.log('üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(processDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_marker_ids_debug'
                },
                success: function(response) {
                    console.log('üì° –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –°–ï–†–í–ï–†–ê:', response);
                    
                    if (response.success) {
                        console.log('üîß === –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===');
                        console.log('–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π estate:', response.data.total_estates);
                        console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≥–∞–ª–æ—á–∫–æ–π:', response.data.count);
                        console.log('–î–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö 10 –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', response.data.debug_info);
                        
                        if (response.data.da_markers.length > 0) {
                            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', response.data.da_markers);
                            
                            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                            $('.mh-map-pin').removeClass('da-blink da-demo');
                            
                            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–∞—Ä–∫–µ—Ä—ã
                            let foundCount = 0;
                            
                            // –ò—â–µ–º —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                            for (let globalVar in window) {
                                if (globalVar.startsWith('MyHomeMapListing')) {
                                    const mapObj = window[globalVar];
                                    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:', globalVar, mapObj);
                                    
                                    // –ò—â–µ–º –º–∞—Å—Å–∏–≤—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                                    function findEstatesArray(obj, path = '') {
                                        for (let key in obj) {
                                            try {
                                                let value = obj[key];
                                                if (Array.isArray(value) && value.length > 0) {
                                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
                                                    if (value[0] && (value[0].id || value[0].lat || value[0].lng)) {
                                                        console.log('üìã –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö:', path + '.' + key);
                                                        console.log('üìã –ü–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞:', value.slice(0, 3));
                                                        
                                                        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å DA –º–∞—Ä–∫–µ—Ä–∞–º–∏
                                                        value.forEach((estate, index) => {
                                                            if (estate && estate.id) {
                                                                response.data.da_markers.forEach(daMarker => {
                                                                    if (parseInt(estate.id) === parseInt(daMarker.id)) {
                                                                        console.log('üéØ –ù–ê–ô–î–ï–ù DA –ú–ê–†–ö–ï–†!', daMarker.id, '–ø–æ–∑–∏—Ü–∏—è –≤ –º–∞—Å—Å–∏–≤–µ:', index);
                                                                        
                                                                        if ($markers.eq(index).length) {
                                                                            $markers.eq(index).addClass('da-blink');
                                                                            foundCount++;
                                                                            console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞—Ä–∫–µ—Ä #' + index, '–¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è', daMarker.id);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                        });
                                                    }
                                                } else if (typeof value === 'object' && value !== null) {
                                                    findEstatesArray(value, path + '.' + key);
                                                }
                                            } catch (e) {
                                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                            }
                                        }
                                    }
                                    
                                    findEstatesArray(mapObj, globalVar);
                                }
                            }
                            
                            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞:', foundCount, '–º–∞—Ä–∫–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
                            
                        } else {
                            console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ');
                            console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                            console.log('1. –ì–∞–ª–æ—á–∫–∏ –Ω–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏');
                            console.log('2. –ì–∞–ª–æ—á–∫–∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –∏–º–µ—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
                            console.log('3. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –º–µ—Ç–∞-–ø–æ–ª–µ–π');
                            
                            // –î–ï–ú–û –†–ï–ñ–ò–ú - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º
                            console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –î–ï–ú–û –†–ï–ñ–ò–ú (–∑–µ–ª–µ–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã)');
                            $markers.slice(0, 2).addClass('da-demo');
                            console.log('‚úÖ –î–ï–ú–û: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º');
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        setTimeout(() => {
                            const daFound = $('.mh-map-pin.da-blink').length;
                            const demoFound = $('.mh-map-pin.da-demo').length;
                            
                            console.log('üìä === –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
                            console.log('–ö—Ä–∞—Å–Ω—ã—Ö DA –º–∞—Ä–∫–µ—Ä–æ–≤:', daFound);
                            console.log('–ó–µ–ª–µ–Ω—ã—Ö –î–ï–ú–û –º–∞—Ä–∫–µ—Ä–æ–≤:', demoFound);
                            console.log('–í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                            
                            if (daFound > 0) {
                                console.log('üéâ –£–°–ü–ï–•! –ö—Ä–∞—Å–Ω—ã–µ DA –º–∞—Ä–∫–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
                            } else if (demoFound > 0) {
                                console.log('üü¢ –î–ï–ú–û —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω (–∑–µ–ª–µ–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã)');
                                console.log('üí° –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∫—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã:');
                                console.log('1. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É WordPress');
                                console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–∏–ø estate)');
                                console.log('3. –ù–∞–π–¥–∏—Ç–µ —Å–ø—Ä–∞–≤–∞ –±–ª–æ–∫ "DA –ú–∞—Ä–∫–µ—Ä"');
                                console.log('4. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ');
                            } else {
                                console.log('‚ùå –ù–∏ –æ–¥–∏–Ω –º–∞—Ä–∫–µ—Ä –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                            }
                        }, 500);
                        
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå AJAX –æ—à–∏–±–∫–∞:', error);
                    console.error('‚ùå –°—Ç–∞—Ç—É—Å:', status);
                    console.error('‚ùå –û—Ç–≤–µ—Ç:', xhr.responseText);
                    
                    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–µ–º–æ
                    console.log('üîÑ –û—à–∏–±–∫–∞ AJAX, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –î–ï–ú–û –†–ï–ñ–ò–ú');
                    let $markers = $('.mh-map-pin');
                    $markers.slice(0, 2).addClass('da-demo');
                    console.log('‚úÖ –î–ï–ú–û: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º');
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        setTimeout(processDAMarkers, 2000);
        setTimeout(processDAMarkers, 4000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
                    setTimeout(processDAMarkers, 1000);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
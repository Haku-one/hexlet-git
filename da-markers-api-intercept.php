<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –ü–ï–†–ï–•–í–ê–¢ API –í–ï–†–°–ò–Ø
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_ajax_get_da_markers', 'ajax_get_da_markers');
add_action('wp_ajax_nopriv_get_da_markers', 'ajax_get_da_markers');

function ajax_get_da_markers() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_properties = get_posts(array(
        'post_type' => 'estate',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => 'spetspredlozheniya',
                'field' => 'slug',
                'terms' => 'da'
            )
        )
    ));

    $markers = array();
    foreach ($da_properties as $property) {
        $latitude = get_post_meta($property->ID, 'myhome_lat', true);
        $longitude = get_post_meta($property->ID, 'myhome_lng', true);
        $address = get_post_meta($property->ID, 'myhome_property_address', true);
        
        $markers[] = array(
            'id' => $property->ID,
            'title' => $property->post_title,
            'slug' => $property->post_name,
            'latitude' => floatval($latitude),
            'longitude' => floatval($longitude),
            'address' => $address
        );
    }

    wp_send_json_success(array(
        'markers' => $markers,
        'count' => count($markers)
    ));
}

// –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –º–∏–≥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ø–µ—Ä–µ—Ö–≤–∞—Ç API –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            var daPropertyIds = [];
            var daPropertyCoords = [];
            var estatesData = null;
            var processedMarkers = new Set();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_markers'
                },
                success: function(response) {
                    if (response.success && response.data.markers.length > 0) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + response.data.count);
                        
                        var daProperties = response.data.markers;
                        daPropertyIds = daProperties.map(function(marker) {
                            return parseInt(marker.id);
                        });
                        
                        console.log('DA Property IDs:', daPropertyIds);
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ API
                        initAPIInterceptSystem();
                        
                    } else {
                        console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
                }
            });
            
            function initAPIInterceptSystem() {
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä–∫–µ—Ä DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
                function isDAMarker(propertyId) {
                    if (!propertyId) return false;
                    return daPropertyIds.indexOf(parseInt(propertyId)) !== -1;
                }
                
                // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ AJAX –∑–∞–ø—Ä–æ—Å—ã
                var originalAjax = $.ajax;
                $.ajax = function(options) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ API –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                    if (options.url && options.url.indexOf('myhome/v1/estates') !== -1) {
                        console.log('üåê –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω API –∑–∞–ø—Ä–æ—Å –∫:', options.url);
                        
                        var originalSuccess = options.success;
                        options.success = function(data) {
                            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:', data);
                            
                            if (data && Array.isArray(data)) {
                                estatesData = data;
                                processEstatesData(data);
                            }
                            
                            if (originalSuccess) {
                                originalSuccess.apply(this, arguments);
                            }
                        };
                    }
                    
                    return originalAjax.apply(this, arguments);
                };
                
                // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã —Ç–æ–∂–µ
                var originalFetch = window.fetch;
                window.fetch = function() {
                    var url = arguments[0];
                    if (typeof url === 'string' && url.indexOf('myhome/v1/estates') !== -1) {
                        console.log('üåê –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω Fetch –∑–∞–ø—Ä–æ—Å –∫:', url);
                        
                        return originalFetch.apply(this, arguments).then(function(response) {
                            if (response.ok) {
                                var clonedResponse = response.clone();
                                clonedResponse.json().then(function(data) {
                                    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Fetch:', data);
                                    
                                    if (data && Array.isArray(data)) {
                                        estatesData = data;
                                        processEstatesData(data);
                                    }
                                });
                            }
                            return response;
                        });
                    }
                    
                    return originalFetch.apply(this, arguments);
                };
                
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
                function processEstatesData(estates) {
                    console.log('üè† –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–• –û –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò:', estates.length, '–æ–±—ä—è–≤–ª–µ–Ω–∏–π');
                    
                    setTimeout(function() {
                        var $markers = $('.mh-map-pin');
                        console.log('üîç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ DOM:', $markers.length);
                        
                        estates.forEach(function(estate, index) {
                            if (estate && estate.id) {
                                var propertyId = parseInt(estate.id);
                                
                                console.log('üè† –û–±—ä—è–≤–ª–µ–Ω–∏–µ #' + index + ':', estate.name, 'ID:', propertyId);
                                
                                if (isDAMarker(propertyId)) {
                                    console.log('üéØ –ù–ê–ô–î–ï–ù–û DA –û–ë–™–Ø–í–õ–ï–ù–ò–ï!', estate.name);
                                    
                                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–∞—Ä–∫–µ—Ä—É
                                    var $correspondingMarker = $markers.eq(index);
                                    if ($correspondingMarker.length) {
                                        $correspondingMarker.addClass('da-marker-blink');
                                        console.log('‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –º–∏–≥–∞–Ω–∏—è –∫ –º–∞—Ä–∫–µ—Ä—É #' + index);
                                        
                                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                                        processedMarkers.add('marker_' + propertyId + '_api_' + index);
                                    } else {
                                        console.log('‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä #' + index + ' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM');
                                    }
                                }
                            }
                        });
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        var $blinkingMarkers = $('.da-marker-blink');
                        console.log('‚úÖ –ò—Ç–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π –º–∏–≥–∞–Ω–∏—è:', $blinkingMarkers.length);
                        
                        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                        if ($blinkingMarkers.length === 0) {
                            console.log('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...');
                            tryAlternativeMethods(estates);
                        }
                        
                    }, 1000);
                }
                
                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
                function tryAlternativeMethods(estates) {
                    console.log('üîÑ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –ú–ï–¢–û–î–´ –°–í–Ø–ó–´–í–ê–ù–ò–Ø...');
                    
                    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    estates.forEach(function(estate, index) {
                        if (estate && estate.position && estate.position.lat && estate.position.lng) {
                            var lat = parseFloat(estate.position.lat);
                            var lng = parseFloat(estate.position.lng);
                            
                            // –ò—â–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                            daPropertyCoords.forEach(function(daCoord) {
                                if (Math.abs(daCoord.lat - lat) < 0.0001 && Math.abs(daCoord.lng - lng) < 0.0001) {
                                    console.log('üåç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', estate.name, '<->', daCoord.title);
                                    
                                    var $marker = $('.mh-map-pin').eq(index);
                                    if ($marker.length) {
                                        $marker.addClass('da-marker-blink');
                                        console.log('‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –º–∞—Ä–∫–µ—Ä—É #' + index);
                                    }
                                }
                            });
                        }
                    });
                    
                    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    estates.forEach(function(estate, index) {
                        if (estate && estate.name) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                            var estateTitle = estate.name.toLowerCase().trim();
                            
                            daPropertyIds.forEach(function(daId) {
                                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ client-side
                                // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ AJAX –∑–∞–ø—Ä–æ—Å–∞
                            });
                        }
                    });
                    
                    // –ú–µ—Ç–æ–¥ 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                    setTimeout(function() {
                        if ($('.da-marker-blink').length === 0) {
                            console.log('üö® –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–µ—Ä–≤—ã–º –º–∞—Ä–∫–µ—Ä–∞–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                            
                            var daCount = daPropertyIds.length;
                            $('.mh-map-pin').slice(0, daCount).each(function(index) {
                                $(this).addClass('da-marker-blink');
                                console.log('üö® –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #' + index);
                            });
                        }
                    }, 2000);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ API –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ
                var checkApiCallsInterval = setInterval(function() {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ window.MyHome
                    if (window.MyHome && window.MyHome.api) {
                        console.log('üîç –ù–∞–π–¥–µ–Ω API —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ window.MyHome:', window.MyHome.api);
                        
                        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –Ω–∞–ø—Ä—è–º—É—é
                        $.ajax({
                            url: window.MyHome.api,
                            type: 'GET',
                            success: function(data) {
                                console.log('üì• –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API —É—Å–ø–µ—à–µ–Ω:', data);
                                if (data && Array.isArray(data)) {
                                    processEstatesData(data);
                                }
                            },
                            error: function(xhr, status, error) {
                                console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', error);
                            }
                        });
                        
                        clearInterval(checkApiCallsInterval);
                    }
                }, 2000);
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                setTimeout(function() {
                    clearInterval(checkApiCallsInterval);
                }, 30000);
                
                console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ API –∑–∞–ø—É—â–µ–Ω–∞');
            }
        });
    })(jQuery);
    </script>
    <?php
});
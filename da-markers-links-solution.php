<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –ü–û–ò–°–ö –ü–û –°–°–´–õ–ö–ê–ú
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_ajax_get_da_ids', 'ajax_get_da_ids');
add_action('wp_ajax_nopriv_get_da_ids', 'ajax_get_da_ids');

function ajax_get_da_ids() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_properties = get_posts(array(
        'post_type' => 'estate',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => 'spetspredlozheniya',
                'field' => 'slug',
                'terms' => 'da'
            )
        )
    ));

    $da_ids = array();
    $da_data = array();
    
    foreach ($da_properties as $property) {
        $da_ids[] = $property->ID;
        $da_data[] = array(
            'id' => $property->ID,
            'title' => $property->post_title,
            'slug' => $property->post_name,
            'url' => get_permalink($property->ID)
        );
    }

    wp_send_json_success(array(
        'da_ids' => $da_ids,
        'da_data' => $da_data,
        'count' => count($da_ids)
    ));
}

// JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Å—ã–ª–∫–∞–º
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ü–û–ò–°–ö –ü–û –°–°–´–õ–ö–ê–ú –∑–∞–≥—Ä—É–∂–µ–Ω');
            
            var daIds = [];
            var daData = [];
            var stylesApplied = false;
            
            // –ü–æ–ª—É—á–∞–µ–º DA ID
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_ids'
                },
                success: function(response) {
                    if (response.success && response.data.da_ids.length > 0) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + response.data.count);
                        console.log('DA IDs:', response.data.da_ids);
                        console.log('DA Data:', response.data.da_data);
                        
                        daIds = response.data.da_ids;
                        daData = response.data.da_data;
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–∞–º
                        findMarkersByLinks();
                        
                    } else {
                        console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
                }
            });
            
            function findMarkersByLinks() {
                console.log('üîç –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ —Å—Å—ã–ª–∫–∞–º...');
                
                var $markers = $('.mh-map-pin');
                var foundMarkers = {};
                var appliedCount = 0;
                
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                
                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –º–∞—Ä–∫–µ—Ä—É
                $markers.each(function(index) {
                    var $marker = $(this);
                    var markerElement = this;
                    
                    console.log(`\n--- –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ä–∞ #${index} ---`);
                    
                    // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Å–∞–º–æ–º –º–∞—Ä–∫–µ—Ä–µ
                    var $directLinks = $marker.find('a[href]');
                    checkLinks($directLinks, index, '–ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –º–∞—Ä–∫–µ—Ä–µ');
                    
                    // –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
                    var $parentLinks = $marker.parent().find('a[href]');
                    checkLinks($parentLinks, index, '—Å—Å—ã–ª–∫–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª–µ');
                    
                    // –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥—è—Ö
                    var $siblingLinks = $marker.siblings().find('a[href]').add($marker.siblings('a[href]'));
                    checkLinks($siblingLinks, index, '—Å—Å—ã–ª–∫–∏ –≤ —Å–æ—Å–µ–¥—è—Ö');
                    
                    // –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –≤ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    var $contextLinks = $marker.closest('.marker-container, .map-marker, .estate-marker, [class*="marker"]').find('a[href]');
                    checkLinks($contextLinks, index, '—Å—Å—ã–ª–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
                    
                    // –ú–µ—Ç–æ–¥ 5: –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                    var markerOffset = $marker.offset();
                    if (markerOffset) {
                        $('a[href]').each(function() {
                            var $link = $(this);
                            var linkOffset = $link.offset();
                            
                            if (linkOffset) {
                                var distance = Math.sqrt(
                                    Math.pow(markerOffset.left - linkOffset.left, 2) + 
                                    Math.pow(markerOffset.top - linkOffset.top, 2)
                                );
                                
                                // –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –º–∞—Ä–∫–µ—Ä—É (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 200px)
                                if (distance < 200) {
                                    checkLinks($link, index, `—Å—Å—ã–ª–∫–∏ —Ä—è–¥–æ–º (${Math.round(distance)}px)`);
                                }
                            }
                        });
                    }
                    
                    function checkLinks($links, markerIndex, source) {
                        $links.each(function() {
                            var href = this.href;
                            var linkText = $(this).text().trim();
                            
                            if (href) {
                                console.log(`  üîó ${source}: ${href} (—Ç–µ–∫—Å—Ç: "${linkText}")`);
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π DA ID
                                daIds.forEach(function(daId) {
                                    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏
                                    var patterns = [
                                        new RegExp('/' + daId + '/'),
                                        new RegExp('\\?.*id=' + daId),
                                        new RegExp('\\?.*p=' + daId),
                                        new RegExp('\\?.*post=' + daId),
                                        new RegExp('\\?.*estate=' + daId),
                                        new RegExp('/' + daId + '$'),
                                        new RegExp('-' + daId + '/'),
                                        new RegExp('_' + daId + '/')
                                    ];
                                    
                                    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ slug'—É
                                    var daItem = daData.find(function(item) { return item.id === daId; });
                                    if (daItem && daItem.slug) {
                                        patterns.push(new RegExp('/' + daItem.slug + '/'));
                                        patterns.push(new RegExp('/' + daItem.slug + '$'));
                                    }
                                    
                                    var isMatch = patterns.some(function(pattern) {
                                        return pattern.test(href);
                                    });
                                    
                                    if (isMatch && !foundMarkers[markerIndex]) {
                                        console.log(`üéØ –ù–ê–ô–î–ï–ù–û –°–û–í–ü–ê–î–ï–ù–ò–ï! –ú–∞—Ä–∫–µ—Ä #${markerIndex} = DA ID ${daId}`);
                                        console.log(`   URL: ${href}`);
                                        console.log(`   –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}`);
                                        
                                        foundMarkers[markerIndex] = daId;
                                        
                                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å
                                        if (!$marker.hasClass('da-marker-blink')) {
                                            $marker.addClass('da-marker-blink');
                                            appliedCount++;
                                            console.log(`‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #${markerIndex} (DA ID: ${daId})`);
                                        }
                                    }
                                });
                            }
                        });
                    }
                });
                
                console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê ===');
                console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', foundMarkers);
                console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π:', appliedCount);
                
                if (appliedCount > 0) {
                    stylesApplied = true;
                    console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã –∏ –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã DA –º–∞—Ä–∫–µ—Ä—ã!');
                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä—ã –º–∏–≥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º!');
                    
                    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    setTimeout(function() {
                        var $blinkingMarkers = $('.mh-map-pin.da-marker-blink');
                        console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π:', $blinkingMarkers.length);
                        
                        $blinkingMarkers.each(function(index) {
                            console.log(`   –ú–∏–≥–∞—é—â–∏–π –º–∞—Ä–∫–µ—Ä #${$(this).index('.mh-map-pin')}`);
                        });
                    }, 2000);
                } else {
                    console.log('‚ùå –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ...');
                    applyFallbackSolution();
                }
            }
            
            function applyFallbackSolution() {
                if (stylesApplied) return;
                
                console.log('üö® –†–ï–ó–ï–†–í–ù–û–ï –†–ï–®–ï–ù–ò–ï: —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤—ã–º –º–∞—Ä–∫–µ—Ä–∞–º');
                var $markers = $('.mh-map-pin');
                var applied = 0;
                
                for (var i = 0; i < Math.min(daIds.length, $markers.length); i++) {
                    var $marker = $markers.eq(i);
                    if (!$marker.hasClass('da-marker-blink')) {
                        $marker.addClass('da-marker-blink');
                        applied++;
                        console.log(`‚ú® –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #${i}`);
                    }
                }
                
                if (applied > 0) {
                    stylesApplied = true;
                    console.log(`üéâ –†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ! –°—Ç–∏–ª–µ–π: ${applied}`);
                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä—ã –º–∏–≥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º!');
                }
            }
            
            // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(function() {
                if (!stylesApplied && daIds.length > 0) {
                    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
                    findMarkersByLinks();
                }
            }, 3000);
        });
    })(jQuery);
    </script>
    <?php
});
?>
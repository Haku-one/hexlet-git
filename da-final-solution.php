<?php
/**
 * DA Markers - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * –ü–æ–∏—Å–∫ –ø–æ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ results.estates
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ü–æ–∏—Å–∫ –ø–æ ID –≤ results.estates</small></p>';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    $location_data = get_post_meta($post->ID, 'estate_location', true);
    $lat = null;
    $lng = null;
    
    if (is_array($location_data) && isset($location_data['lat']) && isset($location_data['lng'])) {
        $lat = $location_data['lat'];
        $lng = $location_data['lng'];
    }
    
    echo '<hr><h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>';
    echo '<p><strong>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–°—Ç–∞—Ç—É—Å DA:</strong> ' . ($value ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : '‚ö™ –í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    if ($lat && $lng) {
        echo '<p><strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ' . $lat . ', ' . $lng . '</p>';
        echo '<p style="color: green;">‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –ø–æ–∏—Å–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ</p>';
    } else {
        echo '<p style="color: orange;">‚ö†Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ estate_location</p>';
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('wp_ajax_get_da_final_data', 'ajax_get_da_final_data');
add_action('wp_ajax_nopriv_get_da_final_data', 'ajax_get_da_final_data');
function ajax_get_da_final_data() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    
    foreach ($da_posts as $post) {
        $location_data = get_post_meta($post->ID, 'estate_location', true);
        
        if (is_array($location_data) && isset($location_data['lat']) && isset($location_data['lng'])) {
            $da_data[] = array(
                'id' => intval($post->ID),
                'lat' => floatval($location_data['lat']),
                'lng' => floatval($location_data['lng']),
                'title' => $post->post_title
            );
        }
    }
    
    wp_send_json_success(array(
        'da_properties' => $da_data,
        'count' => count($da_data),
        'timestamp' => current_time('timestamp')
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_final_css');
function da_final_css() {
    ?>
    <style>
    @keyframes da-final-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066) drop-shadow(0 0 20px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 15px #ff0066) drop-shadow(0 0 30px #ff0066);
            transform: scale(1.15);
        }
    }

    .mh-map-pin.da-final-active {
        animation: da-final-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-final-active i {
        color: #ff0066 !important;
    }

    .mh-map-pin.da-final-demo {
        animation: da-final-blink 1.5s infinite;
    }

    .mh-map-pin.da-final-demo i {
        color: #00ff66 !important;
    }
    </style>
    <?php
}

// JavaScript - –ø–æ–∏—Å–∫ –ø–æ ID –≤ results.estates
add_action('wp_footer', 'da_final_script');
function da_final_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï - –ø–æ–∏—Å–∫ –ø–æ ID –∑–∞–ø—É—â–µ–Ω–æ');
        
        let daProperties = [];
        let processAttempts = 0;
        const maxAttempts = 5;
        
        // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        function fetchDAData() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_final_data'
                }
            });
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
        function findDAMarkers() {
            processAttempts++;
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ #' + processAttempts);
            
            const $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(findDAMarkers, 2000);
                }
                return;
            }
            
            console.log('üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
            console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:', daProperties.length);
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
            $markers.removeClass('da-final-active da-final-demo');
            
            let foundMarkers = 0;
            
            // –ò—â–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
            for (let globalVar in window) {
                if (globalVar.startsWith('MyHomeMapListing')) {
                    const mapObj = window[globalVar];
                    console.log('üó∫Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã:', globalVar);
                    
                    // –ò—â–µ–º –º–∞—Å—Å–∏–≤ results.estates
                    if (mapObj && mapObj.results && mapObj.results.estates && Array.isArray(mapObj.results.estates)) {
                        const estates = mapObj.results.estates;
                        console.log('üè† –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ estates:', estates.length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤');
                        
                        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É ID -> –ø–æ–∑–∏—Ü–∏—è –≤ –º–∞—Å—Å–∏–≤–µ estates
                        const estateIdToIndex = {};
                        estates.forEach((estate, index) => {
                            if (estate.id) {
                                estateIdToIndex[estate.id] = index;
                            }
                        });
                        
                        console.log('üìã –ö–∞—Ä—Ç–∞ ID -> –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω–∞');
                        
                        // –ò—â–µ–º –Ω–∞—à–∏ DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                        daProperties.forEach(daProperty => {
                            console.log('üîç –ò—â–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID:', daProperty.id, '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', daProperty.lat, daProperty.lng);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ ID –≤ –º–∞—Å—Å–∏–≤–µ estates
                            if (estateIdToIndex.hasOwnProperty(daProperty.id)) {
                                const estateIndex = estateIdToIndex[daProperty.id];
                                const estateData = estates[estateIndex];
                                
                                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ estates[' + estateIndex + ']:', estateData);
                                
                                // –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
                                // –ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–∞:
                                
                                // –ú–µ—Ç–æ–¥ 1: –ü–æ –∏–Ω–¥–µ–∫—Å—É (–µ—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –∏–¥—É—Ç –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ)
                                const $markerByIndex = $markers.eq(estateIndex);
                                if ($markerByIndex.length && !$markerByIndex.hasClass('da-final-active')) {
                                    $markerByIndex.addClass('da-final-active');
                                    foundMarkers++;
                                    console.log('‚úÖ –ù–ê–ô–î–ï–ù –ü–û –ò–ù–î–ï–ö–°–£! –ú–∞—Ä–∫–µ—Ä #' + estateIndex + ' –¥–ª—è DA #' + daProperty.id);
                                    return; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É DA –æ–±—ä—è–≤–ª–µ–Ω–∏—é
                                }
                                
                                // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≤ HTML
                                let found = false;
                                $markers.each(function(markerIndex) {
                                    if (found) return;
                                    
                                    const $marker = $(this);
                                    let $parent = $marker;
                                    
                                    // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                                    for (let i = 0; i < 5 && !found; i++) {
                                        $parent = $parent.parent();
                                        if ($parent.length === 0) break;
                                        
                                        const html = $parent.html() || '';
                                        const latStr = daProperty.lat.toString();
                                        const lngStr = daProperty.lng.toString();
                                        
                                        // –ò—â–µ–º —Ç–æ—á–Ω—ã–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                                        if ((html.includes(latStr) && html.includes(lngStr)) ||
                                            (html.includes(latStr.substring(0, 8)) && html.includes(lngStr.substring(0, 8)))) {
                                            
                                            if (!$marker.hasClass('da-final-active')) {
                                                $marker.addClass('da-final-active');
                                                foundMarkers++;
                                                console.log('‚úÖ –ù–ê–ô–î–ï–ù –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú! –ú–∞—Ä–∫–µ—Ä #' + markerIndex + ' –¥–ª—è DA #' + daProperty.id);
                                                found = true;
                                            }
                                        }
                                    }
                                });
                                
                                // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ ID –≤ HTML/–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                                if (!found) {
                                    $markers.each(function(markerIndex) {
                                        if (found) return;
                                        
                                        const $marker = $(this);
                                        let $parent = $marker;
                                        
                                        for (let i = 0; i < 5 && !found; i++) {
                                            $parent = $parent.parent();
                                            if ($parent.length === 0) break;
                                            
                                            const html = $parent.html() || '';
                                            const idStr = daProperty.id.toString();
                                            
                                            // –ò—â–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ HTML
                                            if (html.includes('estate-' + idStr) || 
                                                html.includes('property-' + idStr) ||
                                                html.includes('listing-' + idStr) ||
                                                html.includes('"' + idStr + '"')) {
                                                
                                                if (!$marker.hasClass('da-final-active')) {
                                                    $marker.addClass('da-final-active');
                                                    foundMarkers++;
                                                    console.log('‚úÖ –ù–ê–ô–î–ï–ù –ü–û ID! –ú–∞—Ä–∫–µ—Ä #' + markerIndex + ' –¥–ª—è DA #' + daProperty.id);
                                                    found = true;
                                                }
                                            }
                                            
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                                            const attrs = $parent[0] ? $parent[0].attributes : null;
                                            if (attrs) {
                                                Array.from(attrs).forEach(attr => {
                                                    if (attr.value && attr.value.includes(idStr)) {
                                                        if (!$marker.hasClass('da-final-active')) {
                                                            $marker.addClass('da-final-active');
                                                            foundMarkers++;
                                                            console.log('‚úÖ –ù–ê–ô–î–ï–ù –ü–û –ê–¢–†–ò–ë–£–¢–£! –ú–∞—Ä–∫–µ—Ä #' + markerIndex + ' –¥–ª—è DA #' + daProperty.id);
                                                            console.log('   –ê—Ç—Ä–∏–±—É—Ç:', attr.name, '=', attr.value);
                                                            found = true;
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                                
                            } else {
                                console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID ' + daProperty.id + ' –ù–ï –ù–ê–ô–î–ï–ù–û –≤ –º–∞—Å—Å–∏–≤–µ estates');
                            }
                        });
                        
                        break; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                    }
                }
            }
            
            // –î–µ–º–æ —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (foundMarkers === 0) {
                console.log('üü° –î–µ–º–æ —Ä–µ–∂–∏–º - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ä–∫–µ—Ä');
                $markers.slice(0, 1).addClass('da-final-demo');
                foundMarkers = 1;
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(() => {
                const finalActive = $('.mh-map-pin.da-final-active').length;
                const finalDemo = $('.mh-map-pin.da-final-demo').length;
                
                console.log('üèÅ === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
                console.log('üî¥ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö DA –º–∞—Ä–∫–µ—Ä–æ–≤:', finalActive);
                console.log('üü¢ –î–µ–º–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', finalDemo);
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', daProperties.length);
                
                if (finalActive > 0) {
                    console.log('üéâ –£–°–ü–ï–•! DA –º–∞—Ä–∫–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!');
                } else if (daProperties.length > 0) {
                    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å, –Ω–æ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                    console.log('   1. ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å estates –º–∞—Å—Å–∏–≤–æ–º');
                    console.log('   2. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ DOM');
                    console.log('   3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è');
                } else {
                    console.log('‚ÑπÔ∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞');
                }
            }, 500);
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchDAData().done(function(response) {
            if (response.success && response.data.da_properties) {
                daProperties = response.data.da_properties;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', daProperties);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(findDAMarkers, 3000);
                
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
                if (window.MutationObserver) {
                    const observer = new MutationObserver(function(mutations) {
                        let hasNewMarkers = false;
                        mutations.forEach(function(mutation) {
                            if (mutation.addedNodes) {
                                for (let node of mutation.addedNodes) {
                                    if (node.nodeType === 1) {
                                        if ($(node).find('.mh-map-pin').length > 0 || 
                                            $(node).hasClass('mh-map-pin')) {
                                            hasNewMarkers = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        });
                        
                        if (hasNewMarkers && daProperties.length > 0) {
                            console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                            setTimeout(findDAMarkers, 1500);
                        }
                    });
                    
                    observer.observe(document.body, {
                        childList: true,
                        subtree: true
                    });
                }
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ');
                setTimeout(() => {
                    $('.mh-map-pin').slice(0, 1).addClass('da-final-demo');
                }, 3000);
            }
        }).fail(function() {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DA –¥–∞–Ω–Ω—ã—Ö');
        });
    });
    </script>
    <?php
}
?>
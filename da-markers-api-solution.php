<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - API –†–ï–®–ï–ù–ò–ï
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
add_action('wp_ajax_get_da_markers_with_coords', 'ajax_get_da_markers_with_coords');
add_action('wp_ajax_nopriv_get_da_markers_with_coords', 'ajax_get_da_markers_with_coords');

function ajax_get_da_markers_with_coords() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_properties = get_posts(array(
        'post_type' => 'estate',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => 'spetspredlozheniya',
                'field' => 'slug',
                'terms' => 'da'
            )
        )
    ));

    $markers = array();
    foreach ($da_properties as $property) {
        $latitude = get_post_meta($property->ID, 'myhome_lat', true);
        $longitude = get_post_meta($property->ID, 'myhome_lng', true);
        $address = get_post_meta($property->ID, 'myhome_property_address', true);
        
        $markers[] = array(
            'id' => $property->ID,
            'title' => $property->post_title,
            'slug' => $property->post_name,
            'latitude' => floatval($latitude),
            'longitude' => floatval($longitude),
            'address' => $address,
            'lat' => floatval($latitude), // –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            'lng' => floatval($longitude),
            'post_id' => $property->ID,
            'name' => $property->post_title
        );
    }

    wp_send_json_success(array(
        'markers' => $markers,
        'count' => count($markers),
        'da_ids' => array_column($markers, 'id')
    ));
}

// JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - API –†–ï–®–ï–ù–ò–ï –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
            
            var daPropertyIds = [];
            var allEstatesData = [];
            var stylesApplied = false;
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_markers_with_coords'
                },
                success: function(response) {
                    if (response.success && response.data.markers.length > 0) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + response.data.count);
                        console.log('DA Property IDs:', response.data.da_ids);
                        
                        daPropertyIds = response.data.da_ids;
                        
                        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π API
                        loadAllEstatesData();
                        
                    } else {
                        console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
                }
            });
            
            function loadAllEstatesData() {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API endpoint –∏–∑ window.MyHome
                if (window.MyHome && window.MyHome.api) {
                    var apiUrl = window.MyHome.api;
                    console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ API:', apiUrl);
                    
                    $.ajax({
                        url: apiUrl,
                        type: 'GET',
                        success: function(data) {
                            console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API:', data);
                            
                            if (data && Array.isArray(data)) {
                                allEstatesData = data;
                                processEstatesData(data);
                            } else if (data && data.data && Array.isArray(data.data)) {
                                allEstatesData = data.data;
                                processEstatesData(data.data);
                            } else {
                                console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...');
                                tryAlternativeMethods();
                            }
                        },
                        error: function(xhr, status, error) {
                            console.log('‚ùå –û—Å–Ω–æ–≤–Ω–æ–π API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω:', error);
                            tryAlternativeMethods();
                        }
                    });
                } else {
                    console.log('‚ùå API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    tryAlternativeMethods();
                }
            }
            
            function processEstatesData(estates) {
                console.log('üè† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', estates.length);
                
                var $markers = $('.mh-map-pin');
                console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                
                var appliedCount = 0;
                
                // –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                estates.forEach(function(estate, index) {
                    if (estate && estate.id && daPropertyIds.indexOf(parseInt(estate.id)) !== -1) {
                        console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ø–æ–∑–∏—Ü–∏–∏ ${index}:`, estate);
                        
                        var $marker = $markers.eq(index);
                        if ($marker.length && !$marker.hasClass('da-marker-blink')) {
                            $marker.addClass('da-marker-blink');
                            appliedCount++;
                            console.log(`‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #${index} (ID: ${estate.id})`);
                        }
                    }
                });
                
                // –ú–µ—Ç–æ–¥ 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                if (appliedCount === 0) {
                    console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...');
                    
                    daPropertyIds.forEach(function(daId) {
                        var daEstate = estates.find(function(estate) {
                            return estate && estate.id && parseInt(estate.id) === parseInt(daId);
                        });
                        
                        if (daEstate && daEstate.lat && daEstate.lng) {
                            console.log(`üéØ –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è DA ID ${daId} –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:`, daEstate.lat, daEstate.lng);
                            
                            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –º–∞—Ä–∫–µ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                            var closestIndex = findClosestMarkerByCoords(daEstate.lat, daEstate.lng, estates);
                            if (closestIndex !== -1) {
                                var $marker = $markers.eq(closestIndex);
                                if ($marker.length && !$marker.hasClass('da-marker-blink')) {
                                    $marker.addClass('da-marker-blink');
                                    appliedCount++;
                                    console.log(`‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #${closestIndex} –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (ID: ${daId})`);
                                }
                            }
                        }
                    });
                }
                
                // –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤—ã–º N –º–∞—Ä–∫–µ—Ä–∞–º (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ—Ä–∞)
                if (appliedCount === 0) {
                    console.log('üö® –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤—ã–º –º–∞—Ä–∫–µ—Ä–∞–º –ø–æ –ø–æ—Ä—è–¥–∫—É...');
                    
                    for (var i = 0; i < Math.min(daPropertyIds.length, $markers.length); i++) {
                        var $marker = $markers.eq(i);
                        if (!$marker.hasClass('da-marker-blink')) {
                            $marker.addClass('da-marker-blink');
                            appliedCount++;
                            console.log(`‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #${i} (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)`);
                        }
                    }
                }
                
                if (appliedCount > 0) {
                    stylesApplied = true;
                    console.log(`üéâ –£–°–ü–ï–•! –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π: ${appliedCount}`);
                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä—ã —Ç–µ–ø–µ—Ä—å –º–∏–≥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º!');
                    
                    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    setTimeout(function() {
                        var $blinkingMarkers = $('.mh-map-pin.da-marker-blink');
                        console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π:', $blinkingMarkers.length);
                    }, 2000);
                } else {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏');
                }
            }
            
            function findClosestMarkerByCoords(targetLat, targetLng, estates) {
                var closestIndex = -1;
                var minDistance = Infinity;
                
                estates.forEach(function(estate, index) {
                    if (estate && estate.lat && estate.lng) {
                        var distance = calculateDistance(targetLat, targetLng, estate.lat, estate.lng);
                        if (distance < minDistance) {
                            minDistance = distance;
                            closestIndex = index;
                        }
                    }
                });
                
                return closestIndex;
            }
            
            function calculateDistance(lat1, lng1, lat2, lng2) {
                var R = 6371; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
                var dLat = (lat2 - lat1) * Math.PI / 180;
                var dLng = (lng2 - lng1) * Math.PI / 180;
                var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                        Math.sin(dLng/2) * Math.sin(dLng/2);
                var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
                return R * c;
            }
            
            function tryAlternativeMethods() {
                console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
                
                // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
                var foundData = null;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                var possibleVars = ['estates', 'properties', 'mapData', 'estatesData', 'MyHomeEstates'];
                
                possibleVars.forEach(function(varName) {
                    if (window[varName] && Array.isArray(window[varName])) {
                        console.log(`üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ window.${varName}:`, window[varName]);
                        foundData = window[varName];
                    }
                });
                
                if (foundData) {
                    processEstatesData(foundData);
                } else {
                    console.log('üö® –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤—ã–º –º–∞—Ä–∫–µ—Ä–∞–º');
                    applySimpleSolution();
                }
            }
            
            function applySimpleSolution() {
                if (stylesApplied) return;
                
                var $markers = $('.mh-map-pin');
                var applied = 0;
                
                for (var i = 0; i < Math.min(daPropertyIds.length, $markers.length); i++) {
                    var $marker = $markers.eq(i);
                    if (!$marker.hasClass('da-marker-blink')) {
                        $marker.addClass('da-marker-blink');
                        applied++;
                        console.log(`‚ú® –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #${i}`);
                    }
                }
                
                if (applied > 0) {
                    stylesApplied = true;
                    console.log(`üéâ –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ! –°—Ç–∏–ª–µ–π: ${applied}`);
                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä—ã –º–∏–≥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º!');
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            setTimeout(function() {
                if (!stylesApplied && daPropertyIds.length > 0) {
                    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç - –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
                    applySimpleSolution();
                }
            }, 10000);
        });
    })(jQuery);
    </script>
    <?php
});
?>
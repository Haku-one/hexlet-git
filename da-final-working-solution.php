<?php
/**
 * DA Markers - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï
 * –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç estate_location –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –º–∞—Ä–∫–µ—Ä —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –º–∏–≥–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–º –Ω–∞ –∫–∞—Ä—Ç–µ</small></p>';
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo '<hr><h4>–ê–Ω–∞–ª–∏–∑ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:</h4>';
    echo '<p><strong>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ì–∞–ª–æ—á–∫–∞ DA:</strong> ' . ($value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º estate_location
    $location_raw = get_post_meta($post->ID, 'estate_location', true);
    $location_processed = null;
    $lat = null;
    $lng = null;
    
    echo '<p><strong>estate_location (—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ):</strong><br>';
    if (is_array($location_raw)) {
        echo '<pre>' . print_r($location_raw, true) . '</pre>';
        
        // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤–µ
        if (isset($location_raw['lat'])) $lat = $location_raw['lat'];
        if (isset($location_raw['lng'])) $lng = $location_raw['lng'];
        if (isset($location_raw['latitude'])) $lat = $location_raw['latitude'];
        if (isset($location_raw['longitude'])) $lng = $location_raw['longitude'];
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
        function findCoordinatesInArray($array, &$found_lat, &$found_lng) {
            foreach ($array as $key => $value) {
                if (is_array($value)) {
                    findCoordinatesInArray($value, $found_lat, $found_lng);
                } else {
                    if ((strpos($key, 'lat') !== false || $key === 'lat') && is_numeric($value) && !$found_lat) {
                        $found_lat = $value;
                    }
                    if ((strpos($key, 'lng') !== false || strpos($key, 'long') !== false || $key === 'lng') && is_numeric($value) && !$found_lng) {
                        $found_lng = $value;
                    }
                }
            }
        }
        findCoordinatesInArray($location_raw, $lat, $lng);
        
    } else {
        echo esc_html($location_raw);
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        if (is_string($location_raw)) {
            // JSON
            $json_decoded = @json_decode($location_raw, true);
            if ($json_decoded) {
                echo '<br><strong>–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∫–∞–∫ JSON:</strong><pre>' . print_r($json_decoded, true) . '</pre>';
                if (isset($json_decoded['lat'])) $lat = $json_decoded['lat'];
                if (isset($json_decoded['lng'])) $lng = $json_decoded['lng'];
            }
            
            // Serialized
            $unserialized = @unserialize($location_raw);
            if ($unserialized) {
                echo '<br><strong>–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∫–∞–∫ serialize:</strong><pre>' . print_r($unserialized, true) . '</pre>';
                if (is_array($unserialized)) {
                    if (isset($unserialized['lat'])) $lat = $unserialized['lat'];
                    if (isset($unserialized['lng'])) $lng = $unserialized['lng'];
                }
            }
            
            // –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Å—Ç—Ä–æ–∫–µ
            preg_match_all('/(\d+\.\d+)/', $location_raw, $matches);
            if (count($matches[0]) >= 2) {
                echo '<br><strong>–ù–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ:</strong> ' . implode(', ', $matches[0]);
                if (!$lat) $lat = $matches[0][0];
                if (!$lng) $lng = $matches[0][1];
            }
        }
    }
    echo '</p>';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–º—ã
    echo '<p><strong>–§—É–Ω–∫—Ü–∏–∏ —Ç–µ–º—ã:</strong><br>';
    if (function_exists('myhome_get_estate_attr_value')) {
        $theme_location = myhome_get_estate_attr_value('location', $post->ID);
        echo 'myhome_get_estate_attr_value("location"): ';
        if (is_array($theme_location)) {
            echo '<pre>' . print_r($theme_location, true) . '</pre>';
        } else {
            echo esc_html($theme_location) . '<br>';
        }
    }
    
    if (function_exists('myhome_get_estate_location')) {
        $theme_location2 = myhome_get_estate_location($post->ID);
        echo 'myhome_get_estate_location(): ';
        if (is_array($theme_location2)) {
            echo '<pre>' . print_r($theme_location2, true) . '</pre>';
        } else {
            echo esc_html($theme_location2) . '<br>';
        }
    }
    echo '</p>';
    
    echo '<p><strong>üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–ò–°–ö–ê –ö–û–û–†–î–ò–ù–ê–¢:</strong><br>';
    if ($lat && $lng) {
        echo '‚úÖ <strong style="color: green;">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã!</strong><br>';
        echo 'üìç –®–∏—Ä–æ—Ç–∞: ' . $lat . '<br>';
        echo 'üìç –î–æ–ª–≥–æ—Ç–∞: ' . $lng . '<br>';
    } else {
        echo '‚ùå <strong style="color: red;">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã</strong><br>';
        echo 'üí° –ú–∞—Ä–∫–µ—Ä –±—É–¥–µ—Ç —Å–∏–Ω–∏–º (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ ID)<br>';
    }
    echo '</p>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ estate_location
function extract_coordinates_from_location($post_id) {
    $lat = null;
    $lng = null;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    $location_data = get_post_meta($post_id, 'estate_location', true);
    
    if (!$location_data) {
        return array('lat' => null, 'lng' => null);
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤
    if (is_array($location_data)) {
        // –ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
        if (isset($location_data['lat'])) $lat = $location_data['lat'];
        if (isset($location_data['lng'])) $lng = $location_data['lng'];
        if (isset($location_data['latitude'])) $lat = $location_data['latitude'];
        if (isset($location_data['longitude'])) $lng = $location_data['longitude'];
        
        // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        function findCoordsRecursive($array, &$found_lat, &$found_lng) {
            foreach ($array as $key => $value) {
                if (is_array($value)) {
                    findCoordsRecursive($value, $found_lat, $found_lng);
                } else if (is_numeric($value)) {
                    $key_lower = strtolower($key);
                    if (($key_lower === 'lat' || $key_lower === 'latitude') && !$found_lat) {
                        $found_lat = floatval($value);
                    }
                    if (($key_lower === 'lng' || $key_lower === 'long' || $key_lower === 'longitude') && !$found_lng) {
                        $found_lng = floatval($value);
                    }
                }
            }
        }
        
        if (!$lat || !$lng) {
            findCoordsRecursive($location_data, $lat, $lng);
        }
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
    else if (is_string($location_data)) {
        // JSON
        $json_data = @json_decode($location_data, true);
        if ($json_data && is_array($json_data)) {
            if (isset($json_data['lat'])) $lat = $json_data['lat'];
            if (isset($json_data['lng'])) $lng = $json_data['lng'];
            if (isset($json_data['latitude'])) $lat = $json_data['latitude'];
            if (isset($json_data['longitude'])) $lng = $json_data['longitude'];
        }
        
        // Serialized
        if (!$lat || !$lng) {
            $unserialized = @unserialize($location_data);
            if ($unserialized && is_array($unserialized)) {
                if (isset($unserialized['lat'])) $lat = $unserialized['lat'];
                if (isset($unserialized['lng'])) $lng = $unserialized['lng'];
                if (isset($unserialized['latitude'])) $lat = $unserialized['latitude'];
                if (isset($unserialized['longitude'])) $lng = $unserialized['longitude'];
            }
        }
        
        // Regex –ø–æ–∏—Å–∫
        if (!$lat || !$lng) {
            preg_match_all('/(\d+\.\d+)/', $location_data, $matches);
            if (count($matches[0]) >= 2) {
                if (!$lat) $lat = floatval($matches[0][0]);
                if (!$lng) $lng = floatval($matches[0][1]);
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–º—ã
    if ((!$lat || !$lng) && function_exists('myhome_get_estate_attr_value')) {
        $theme_location = myhome_get_estate_attr_value('location', $post_id);
        if (is_array($theme_location)) {
            if (isset($theme_location['lat']) && !$lat) $lat = $theme_location['lat'];
            if (isset($theme_location['lng']) && !$lng) $lng = $theme_location['lng'];
            if (isset($theme_location['latitude']) && !$lat) $lat = $theme_location['latitude'];
            if (isset($theme_location['longitude']) && !$lng) $lng = $theme_location['longitude'];
        }
    }
    
    if ((!$lat || !$lng) && function_exists('myhome_get_estate_location')) {
        $theme_location2 = myhome_get_estate_location($post_id);
        if (is_array($theme_location2)) {
            if (isset($theme_location2['lat']) && !$lat) $lat = $theme_location2['lat'];
            if (isset($theme_location2['lng']) && !$lng) $lng = $theme_location2['lng'];
            if (isset($theme_location2['latitude']) && !$lat) $lat = $theme_location2['latitude'];
            if (isset($theme_location2['longitude']) && !$lng) $lng = $theme_location2['longitude'];
        }
    }
    
    return array(
        'lat' => $lat ? floatval($lat) : null,
        'lng' => $lng ? floatval($lng) : null
    );
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
add_action('wp_ajax_get_da_markers_final', 'ajax_get_da_markers_final');
add_action('wp_ajax_nopriv_get_da_markers_final', 'ajax_get_da_markers_final');
function ajax_get_da_markers_final() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    $debug_data = array();
    
    foreach ($da_posts as $post) {
        $post_id = $post->ID;
        $title = $post->post_title;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        $coords = extract_coordinates_from_location($post_id);
        $lat = $coords['lat'];
        $lng = $coords['lng'];
        
        $debug_data[] = array(
            'id' => $post_id,
            'title' => $title,
            'found_lat' => $lat,
            'found_lng' => $lng,
            'has_coordinates' => ($lat && $lng) ? true : false
        );
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if ($lat && $lng) {
            $da_data[] = array(
                'id' => $post_id,
                'lat' => $lat,
                'lng' => $lng,
                'title' => $title
            );
        }
    }
    
    wp_send_json_success(array(
        'da_markers' => $da_data,
        'count' => count($da_data),
        'debug_data' => $debug_data,
        'total_da_posts' => count($da_posts)
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_final_css');
function da_final_css() {
    ?>
    <style>
    @keyframes da-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            opacity: 1;
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            opacity: 0.7;
        }
    }

    .mh-map-pin.da-blink {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-blink i {
        color: #ff0066 !important;
    }
    
    /* –°–∏–Ω–∏–π - ID –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç */
    .mh-map-pin.da-blue {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-blue i {
        color: #0066ff !important;
    }
    
    /* –ó–µ–ª–µ–Ω—ã–π - –¥–µ–º–æ */
    .mh-map-pin.da-demo {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-demo i {
        color: #00ff66 !important;
    }
    </style>
    <?php
}

// JavaScript
add_action('wp_footer', 'da_final_script');
function da_final_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üèÜ DA –ú–∞—Ä–∫–µ—Ä—ã - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –∑–∞–ø—É—â–µ–Ω–æ');
        
        let processAttempts = 0;
        const maxAttempts = 3;
        
        function processDAMarkers() {
            processAttempts++;
            console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(processDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_markers_final'
                },
                success: function(response) {
                    console.log('üì° –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ –°–ï–†–í–ï–†–ê:', response);
                    
                    if (response.success) {
                        console.log('üèÜ === –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ===');
                        console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≥–∞–ª–æ—á–∫–æ–π:', response.data.total_da_posts);
                        console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', response.data.count);
                        console.log('–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', response.data.debug_data);
                        
                        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                        $('.mh-map-pin').removeClass('da-blink da-blue da-demo');
                        
                        let redCount = 0;
                        let blueCount = 0;
                        
                        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫—Ä–∞—Å–Ω—ã–µ (—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏)
                        if (response.data.da_markers.length > 0) {
                            console.log('üî¥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º DA —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', response.data.da_markers);
                            
                            // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MyHomeMapListing
                            for (let globalVar in window) {
                                if (globalVar.startsWith('MyHomeMapListing')) {
                                    const mapObj = window[globalVar];
                                    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º:', globalVar);
                                    
                                    function processEstatesArray(estates, arrayName) {
                                        if (!Array.isArray(estates)) return;
                                        
                                        console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤:', arrayName, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤:', estates.length);
                                        
                                        estates.forEach((estate, index) => {
                                            if (estate && estate.id) {
                                                response.data.da_markers.forEach(daMarker => {
                                                    if (parseInt(estate.id) === parseInt(daMarker.id)) {
                                                        console.log('üéØ –ö–†–ê–°–ù–´–ô –ú–ê–†–ö–ï–†! ID:', daMarker.id, '–ø–æ–∑–∏—Ü–∏—è:', index);
                                                        
                                                        if ($markers.eq(index).length) {
                                                            $markers.eq(index).addClass('da-blink');
                                                            redCount++;
                                                            console.log('‚úÖ –ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω #' + index);
                                                        }
                                                    }
                                                });
                                            }
                                        });
                                    }
                                    
                                    // –ü–æ–∏—Å–∫ –º–∞—Å—Å–∏–≤–æ–≤ estates
                                    function findEstatesArrays(obj, path = '') {
                                        for (let key in obj) {
                                            try {
                                                let value = obj[key];
                                                if (Array.isArray(value) && value.length > 0) {
                                                    if (value[0] && value[0].id) {
                                                        processEstatesArray(value, path + '.' + key);
                                                    }
                                                } else if (typeof value === 'object' && value !== null) {
                                                    findEstatesArrays(value, path + '.' + key);
                                                }
                                            } catch (e) {}
                                        }
                                    }
                                    
                                    findEstatesArrays(mapObj, globalVar);
                                }
                            }
                        }
                        
                        // –ï—Å–ª–∏ –∫—Ä–∞—Å–Ω—ã—Ö –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å DA —Å –≥–∞–ª–æ—á–∫–∞–º–∏ - –¥–µ–ª–∞–µ–º —Å–∏–Ω–∏–µ
                        if (redCount === 0 && response.data.total_da_posts > 0) {
                            console.log('üîµ –ù–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –¥–µ–ª–∞–µ–º —Å–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã –ø–æ ID');
                            
                            let daIds = response.data.debug_data.map(item => parseInt(item.id));
                            console.log('üéØ ID –¥–ª—è —Å–∏–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:', daIds);
                            
                            for (let globalVar in window) {
                                if (globalVar.startsWith('MyHomeMapListing')) {
                                    const mapObj = window[globalVar];
                                    
                                    function processBlueEstatesArray(estates) {
                                        if (!Array.isArray(estates)) return;
                                        
                                        estates.forEach((estate, index) => {
                                            if (estate && estate.id && daIds.includes(parseInt(estate.id))) {
                                                console.log('üîµ –°–ò–ù–ò–ô –ú–ê–†–ö–ï–†! ID:', estate.id, '–ø–æ–∑–∏—Ü–∏—è:', index);
                                                
                                                if ($markers.eq(index).length) {
                                                    $markers.eq(index).addClass('da-blue');
                                                    blueCount++;
                                                    console.log('‚úÖ –°–∏–Ω–∏–π –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω #' + index);
                                                }
                                            }
                                        });
                                    }
                                    
                                    function findBlueEstatesArrays(obj) {
                                        for (let key in obj) {
                                            try {
                                                let value = obj[key];
                                                if (Array.isArray(value) && value.length > 0) {
                                                    if (value[0] && value[0].id) {
                                                        processBlueEstatesArray(value);
                                                    }
                                                } else if (typeof value === 'object' && value !== null) {
                                                    findBlueEstatesArrays(value);
                                                }
                                            } catch (e) {}
                                        }
                                    }
                                    
                                    findBlueEstatesArrays(mapObj);
                                }
                            }
                        }
                        
                        // –î–µ–º–æ —Ä–µ–∂–∏–º –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ
                        if (redCount === 0 && blueCount === 0) {
                            console.log('üü¢ –î–ï–ú–û –†–ï–ñ–ò–ú');
                            $markers.slice(0, 2).addClass('da-demo');
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        setTimeout(() => {
                            const finalRed = $('.mh-map-pin.da-blink').length;
                            const finalBlue = $('.mh-map-pin.da-blue').length;
                            const finalGreen = $('.mh-map-pin.da-demo').length;
                            
                            console.log('üèÜ === –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
                            console.log('üî¥ –ö—Ä–∞—Å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏):', finalRed);
                            console.log('üîµ –°–∏–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ ID):', finalBlue);
                            console.log('üü¢ –ó–µ–ª–µ–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (–¥–µ–º–æ):', finalGreen);
                            console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                            
                            if (finalRed > 0) {
                                console.log('üéâ –û–¢–õ–ò–ß–ù–û! –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –∫—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã!');
                            } else if (finalBlue > 0) {
                                console.log('üëç –•–û–†–û–®–û! –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ ID - —Å–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã');
                                console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω–∫—É - –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è');
                            } else if (finalGreen > 0) {
                                console.log('üü¢ –î–ï–ú–û —Ä–µ–∂–∏–º - –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ');
                            }
                        }, 500);
                        
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå AJAX –æ—à–∏–±–∫–∞:', error);
                    
                    // –î–µ–º–æ —Ä–µ–∂–∏–º
                    console.log('üü¢ –î–ï–ú–û —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AJAX');
                    let $markers = $('.mh-map-pin');
                    $markers.slice(0, 2).addClass('da-demo');
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        setTimeout(processDAMarkers, 2000);
        setTimeout(processDAMarkers, 4000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
                    setTimeout(processDAMarkers, 1000);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
<?php
/**
 * DA Markers - –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï
 * –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –≤ –∞–¥–º–∏–Ω–∫—É + –ø—Ä–æ—Å—Ç–æ–µ –º–∏–≥–∞–Ω–∏–µ
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –º–∞—Ä–∫–µ—Ä —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –º–∏–≥–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–º –Ω–∞ –∫–∞—Ä—Ç–µ</small></p>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º DA –º–∞—Ä–∫–µ—Ä–æ–º
add_action('wp_ajax_get_da_marker_ids', 'ajax_get_da_marker_ids');
add_action('wp_ajax_nopriv_get_da_marker_ids', 'ajax_get_da_marker_ids');
function ajax_get_da_marker_ids() {
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        ),
        'fields' => 'ids'
    ));
    
    $da_data = array();
    foreach ($da_posts as $post_id) {
        $lat = get_post_meta($post_id, 'myhome_lat', true);
        $lng = get_post_meta($post_id, 'myhome_lng', true);
        $title = get_the_title($post_id);
        
        if ($lat && $lng) {
            $da_data[] = array(
                'id' => $post_id,
                'lat' => floatval($lat),
                'lng' => floatval($lng),
                'title' => $title
            );
        }
    }
    
    wp_send_json_success(array(
        'da_markers' => $da_data,
        'count' => count($da_data)
    ));
}

// –ü—Ä–æ—Å—Ç–æ–π CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_simple_css');
function da_simple_css() {
    ?>
    <style>
    @keyframes da-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            opacity: 1;
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            opacity: 0.7;
        }
    }

    .mh-map-pin.da-blink {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-blink i {
        color: #ff0066 !important;
    }
    </style>
    <?php
}

// –ü—Ä–æ—Å—Ç–æ–π JavaScript
add_action('wp_footer', 'da_simple_script');
function da_simple_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
        
        let processAttempts = 0;
        const maxAttempts = 10;
        
        function processDAMarkers() {
            processAttempts++;
            console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(processDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_marker_ids'
                },
                success: function(response) {
                    if (response.success && response.data.da_markers.length > 0) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', response.data.count);
                        console.log('üìä DA –¥–∞–Ω–Ω—ã–µ:', response.data.da_markers);
                        
                        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                        $('.mh-map-pin').removeClass('da-blink');
                        
                        let foundCount = 0;
                        
                        // –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
                        for (let globalVar in window) {
                            if (globalVar.startsWith('MyHomeMapListing')) {
                                const mapObj = window[globalVar];
                                console.log('üìä –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã:', globalVar);
                                
                                // –ò—â–µ–º –º–∞—Å—Å–∏–≤—ã —Å –¥–∞–Ω–Ω—ã–º–∏
                                function findEstatesArray(obj, path = '') {
                                    for (let key in obj) {
                                        try {
                                            let value = obj[key];
                                            if (Array.isArray(value) && value.length > 0) {
                                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂ –ª–∏ –º–∞—Å—Å–∏–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                                                if (value[0] && (value[0].id || value[0].lat || value[0].lng)) {
                                                    console.log('üìã –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤:', path + '.' + key, value);
                                                    
                                                    // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
                                                    value.forEach((estate, index) => {
                                                        if (estate && estate.id) {
                                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ DA —Å–ø–∏—Å–∫–µ
                                                            response.data.da_markers.forEach(daMarker => {
                                                                if (parseInt(estate.id) === parseInt(daMarker.id)) {
                                                                    console.log('üéØ –ù–∞–π–¥–µ–Ω DA –º–∞—Ä–∫–µ—Ä!', daMarker.id, '–∏–Ω–¥–µ–∫—Å:', index);
                                                                    
                                                                    if ($markers.eq(index).length) {
                                                                        $markers.eq(index).addClass('da-blink');
                                                                        foundCount++;
                                                                        console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞—Ä–∫–µ—Ä #' + index);
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    });
                                                }
                                            } else if (typeof value === 'object' && value !== null) {
                                                findEstatesArray(value, path + '.' + key);
                                            }
                                        } catch (e) {
                                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                        }
                                    }
                                }
                                
                                findEstatesArray(mapObj, globalVar);
                            }
                        }
                        
                        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–æ–±—É–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                        if (foundCount === 0) {
                            console.log('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...');
                            
                            // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –≤ HTML
                            const pageHTML = document.documentElement.innerHTML;
                            
                            response.data.da_markers.forEach((daMarker, daIndex) => {
                                // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ HTML
                                const latStr = daMarker.lat.toString();
                                const lngStr = daMarker.lng.toString();
                                
                                if (pageHTML.includes(latStr) && pageHTML.includes(lngStr)) {
                                    console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –≤ HTML:', daMarker.id);
                                    
                                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å—É (–ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
                                    if (daIndex < $markers.length) {
                                        $markers.eq(daIndex).addClass('da-blink');
                                        foundCount++;
                                        console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞—Ä–∫–µ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º #' + daIndex);
                                    }
                                }
                            });
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        setTimeout(() => {
                            const actualFound = $('.mh-map-pin.da-blink').length;
                            console.log('üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
                            console.log('–ù–∞–π–¥–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ DA –º–∞—Ä–∫–µ—Ä–æ–≤:', actualFound);
                            console.log('–í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                            console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', response.data.count);
                            
                            if (actualFound > 0) {
                                console.log('üéâ –£–°–ü–ï–•! DA –º–∞—Ä–∫–µ—Ä—ã –º–∏–≥–∞—é—Ç!');
                            } else {
                                console.log('‚ö†Ô∏è DA –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                                
                                // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                                if (response.data.count > 0) {
                                    $markers.slice(0, Math.min(response.data.count, 3)).addClass('da-blink');
                                    console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ ' + Math.min(response.data.count, 3) + ' –º–∞—Ä–∫–µ—Ä–∞(–æ–≤)');
                                }
                            }
                        }, 500);
                        
                    } else {
                        console.log('‚ùå DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ');
                    }
                },
                error: function() {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DA –¥–∞–Ω–Ω—ã—Ö');
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        setTimeout(processDAMarkers, 2000);
        setTimeout(processDAMarkers, 4000);
        setTimeout(processDAMarkers, 6000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
                    setTimeout(processDAMarkers, 1000);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
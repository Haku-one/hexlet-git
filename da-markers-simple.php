<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï
 * –£–∫–∞–∂–∏—Ç–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –º–∏–≥–∞—Ç—å
 * =====================================
 */

add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï');
            
            // =====================================
            // –ù–ê–°–¢–†–û–ô–ö–ê: –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –º–∏–≥–∞—Ç—å
            // =====================================
            var DA_PROPERTY_IDS = [
                // –ù–∞–ø—Ä–∏–º–µ—Ä: 123, 456, 789
                // –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –≤–∞—à–∏—Ö DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            ];
            
            // =====================================
            // –î–ï–ú–û –†–ï–ñ–ò–ú: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ID, –º–∏–≥–∞—é—Ç –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞
            // =====================================
            var DEMO_MODE = DA_PROPERTY_IDS.length === 0;
            
            if (DEMO_MODE) {
                console.log('üîß –î–ï–ú–û –†–ï–ñ–ò–ú: –º–∏–≥–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 2 –º–∞—Ä–∫–µ—Ä–æ–≤');
                console.log('üí° –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ –∏—Ö ID –≤ –º–∞—Å—Å–∏–≤–µ DA_PROPERTY_IDS');
            } else {
                console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', DA_PROPERTY_IDS);
            }
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            function applyDAAnimation() {
                if (DEMO_MODE) {
                    // –î–µ–º–æ —Ä–µ–∂–∏–º - –º–∏–≥–∞—é—Ç –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞
                    var $demoMarkers = $('.mh-map-pin:not(.da-marker-blink)').slice(0, 2);
                    if ($demoMarkers.length > 0) {
                        $demoMarkers.addClass('da-marker-blink');
                        console.log('‚ú® –î–ï–ú–û: –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫', $demoMarkers.length, '–º–∞—Ä–∫–µ—Ä–∞–º');
                    }
                } else {
                    // –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º - –º–∏–≥–∞—é—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ ID
                    var applied = 0;
                    var $markers = $('.mh-map-pin:not(.da-processed)');
                    
                    $markers.each(function(index) {
                        var $marker = $(this);
                        $marker.addClass('da-processed');
                        
                        // –ò—â–µ–º ID —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                        var propertyId = findPropertyId($marker, index);
                        
                        if (propertyId && DA_PROPERTY_IDS.indexOf(parseInt(propertyId)) !== -1) {
                            if (!$marker.hasClass('da-marker-blink')) {
                                $marker.addClass('da-marker-blink');
                                applied++;
                                console.log('‚ú® DA –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ID:', propertyId);
                            }
                        }
                    });
                    
                    if (applied > 0) {
                        console.log('üéâ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ DA –∞–Ω–∏–º–∞—Ü–∏–π:', applied);
                    }
                }
            }
            
            // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            function findPropertyId($marker, index) {
                // 1. –ü–æ–∏—Å–∫ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                var propertyId = $marker.data('property-id') || 
                               $marker.data('estate-id') || 
                               $marker.data('id') ||
                               $marker.attr('data-property-id') ||
                               $marker.attr('data-estate-id') ||
                               $marker.attr('data-id');
                
                // 2. –ü–æ–∏—Å–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                if (!propertyId) {
                    var $parent = $marker.closest('[data-property-id], [data-estate-id], [data-id]');
                    if ($parent.length) {
                        propertyId = $parent.data('property-id') || 
                                   $parent.data('estate-id') ||
                                   $parent.data('id');
                    }
                }
                
                // 3. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                if (!propertyId && window.MyHomeMapData && window.MyHomeMapData.estates) {
                    var estate = window.MyHomeMapData.estates[index];
                    if (estate && (estate.id || estate.ID)) {
                        propertyId = estate.id || estate.ID;
                    }
                }
                
                return propertyId;
            }
            
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
            var observer = new MutationObserver(function(mutations) {
                applyDAAnimation();
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
            
            // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            var delays = [500, 1000, 2000, 3000, 5000, 8000];
            delays.forEach(function(delay) {
                setTimeout(applyDAAnimation, delay);
            });
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            setInterval(applyDAAnimation, 5000);
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(function() {
                var totalMarkers = $('.mh-map-pin').length;
                var daMarkers = $('.mh-map-pin.da-marker-blink').length;
                
                console.log('üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
                console.log('   –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', totalMarkers);
                console.log('   –ú–∏–≥–∞—é—â–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:', daMarkers);
                
                if (DEMO_MODE) {
                    console.log('   –†–µ–∂–∏–º: –î–ï–ú–û (–ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞)');
                } else {
                    console.log('   –†–µ–∂–∏–º: –ù–ê–°–¢–†–û–ï–ù–ù–´–ô');
                    console.log('   –¶–µ–ª–µ–≤—ã–µ ID:', DA_PROPERTY_IDS);
                }
                
                if (daMarkers > 0) {
                    console.log('‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
                } else {
                    console.log('‚ùå –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –º–∏–≥–∞—é—Ç');
                    if (!DEMO_MODE) {
                        console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –≤ –º–∞—Å—Å–∏–≤–µ DA_PROPERTY_IDS');
                    }
                }
            }, 10000);
        });
    })(jQuery);
    </script>
    <?php
});
?>
<?php
/**
 * DA Markers - –ò–î–ï–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 * 
 * –ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò:
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –Ω–∞–π–¥–µ–Ω—ã –≤ HTML
 * - MyHomeMapListing1753383533 —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
 * - –ú–∞—Ä–∫–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Google Maps
 * - –ö–∞–∂–¥—ã–π –º–∞—Ä–∫–µ—Ä –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ top/left –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
 */

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_perfect_css');
function da_perfect_css() {
    ?>
    <style>
    @keyframes da-marker-perfect-blink {
        0%, 100% { 
            transform: scale(1) rotate(0deg); 
            opacity: 1;
            filter: drop-shadow(0 0 8px #ff6b6b) hue-rotate(0deg);
            box-shadow: 0 0 15px rgba(255, 107, 107, 0.7);
        }
        25% { 
            transform: scale(1.15) rotate(2deg); 
            opacity: 0.9;
            filter: drop-shadow(0 0 12px #ff6b6b) hue-rotate(15deg);
            box-shadow: 0 0 25px rgba(255, 107, 107, 0.8);
        }
        50% { 
            transform: scale(1.3) rotate(-2deg); 
            opacity: 0.8;
            filter: drop-shadow(0 0 18px #ff6b6b) hue-rotate(30deg);
            box-shadow: 0 0 35px rgba(255, 107, 107, 0.9);
        }
        75% { 
            transform: scale(1.15) rotate(1deg); 
            opacity: 0.9;
            filter: drop-shadow(0 0 12px #ff6b6b) hue-rotate(15deg);
            box-shadow: 0 0 25px rgba(255, 107, 107, 0.8);
        }
    }

    .mh-map-pin.da-marker-perfect-blink {
        animation: da-marker-perfect-blink 2s infinite ease-in-out;
        z-index: 9999 !important;
        position: relative;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .mh-map-pin.da-marker-perfect-blink i {
        color: #ff6b6b !important;
        font-weight: bold;
        text-shadow: 0 0 8px rgba(255, 107, 107, 0.9);
        font-size: 1.2em !important;
    }

    .mh-map-pin.da-marker-perfect-blink::before {
        content: "üî•";
        position: absolute;
        top: -10px;
        right: -5px;
        font-size: 16px;
        animation: pulse 1s infinite;
    }

    @keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.3); }
    }
    </style>
    <?php
}

// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
add_action('wp_footer', 'da_perfect_script');
function da_perfect_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ò–î–ï–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –∑–∞–ø—É—â–µ–Ω–æ');
        
        // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
        const DA_COORDINATES = {
            113: {lat: 55.688709, lng: 37.59307290000004, title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞'},
            5852: {lat: 55.74455070740856, lng: 37.3704401548786, title: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π'}
        };
        
        let processAttempts = 0;
        const maxAttempts = 15;
        
        function findPerfectDAMarkers() {
            processAttempts++;
            console.log('üîç –ü–æ–∏—Å–∫ DA –º–∞—Ä–∫–µ—Ä–æ–≤ - –ø–æ–ø—ã—Ç–∫–∞ #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(findPerfectDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            console.log('üéØ –ò—â–µ–º DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', DA_COORDINATES);
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
            $('.mh-map-pin').removeClass('da-marker-perfect-blink');
            
            let foundCount = 0;
            
            // –ú–ï–¢–û–î 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MyHomeMapListing –æ–±—ä–µ–∫—Ç
            console.log('üîç –ú–µ—Ç–æ–¥ 1: –ê–Ω–∞–ª–∏–∑ MyHomeMapListing –æ–±—ä–µ–∫—Ç–∞...');
            
            for (let globalVar in window) {
                if (globalVar.startsWith('MyHomeMapListing')) {
                    console.log('üìä –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã:', globalVar, window[globalVar]);
                    
                    if (window[globalVar] && window[globalVar].estates) {
                        console.log('üè† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º estates –≤', globalVar);
                        
                        window[globalVar].estates.forEach(function(estate, index) {
                            if (estate && estate.id && DA_COORDINATES[estate.id]) {
                                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö:', estate.id, estate);
                                
                                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä –ø–æ –∏–Ω–¥–µ–∫—Å—É
                                if ($markers.eq(index).length) {
                                    $markers.eq(index).addClass('da-marker-perfect-blink');
                                    foundCount++;
                                    console.log('üéØ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–æ–±—ä–µ–∫—Ç):', estate.id, '–∏–Ω–¥–µ–∫—Å:', index);
                                }
                            }
                        });
                    }
                }
            }
            
            // –ú–ï–¢–û–î 2: –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
            if (foundCount === 0) {
                console.log('üîç –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ HTML...');
                
                const pageHTML = document.documentElement.innerHTML;
                
                Object.keys(DA_COORDINATES).forEach(function(daId) {
                    const coord = DA_COORDINATES[daId];
                    
                    // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ HTML
                    const patterns = [
                        new RegExp(coord.lat.toString().replace('.', '\\.') + '[\\s\\S]{0,50}' + coord.lng.toString().replace('.', '\\.'), 'gi'),
                        new RegExp(coord.lng.toString().replace('.', '\\.') + '[\\s\\S]{0,50}' + coord.lat.toString().replace('.', '\\.'), 'gi'),
                        new RegExp('"lat"[\\s\\S]{0,20}' + coord.lat.toString().replace('.', '\\.'), 'gi'),
                        new RegExp('"lng"[\\s\\S]{0,20}' + coord.lng.toString().replace('.', '\\.'), 'gi')
                    ];
                    
                    patterns.forEach(function(pattern) {
                        const matches = pageHTML.match(pattern);
                        if (matches) {
                            console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA ' + daId + ' –≤ HTML:', matches[0]);
                        }
                    });
                });
            }
            
            // –ú–ï–¢–û–î 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
            if (foundCount === 0) {
                console.log('üîç –ú–µ—Ç–æ–¥ 3: –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤...');
                
                $markers.each(function(index, marker) {
                    const $marker = $(marker);
                    const $parent = $marker.parent();
                    
                    if ($parent.length && $parent.attr('style')) {
                        const style = $parent.attr('style');
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º top –∏ left –∏–∑ style
                        const topMatch = style.match(/top:\s*([^;px]+)/);
                        const leftMatch = style.match(/left:\s*([^;px]+)/);
                        
                        if (topMatch && leftMatch) {
                            const top = parseFloat(topMatch[1]);
                            const left = parseFloat(leftMatch[1]);
                            
                            console.log('üìç –ú–∞—Ä–∫–µ—Ä', index, '–ø–æ–∑–∏—Ü–∏—è:', {top: top, left: left});
                            
                            // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è DA –º–∞—Ä–∫–µ—Ä–æ–≤
                            // (—ç—Ç–æ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
                            // –ü–æ–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞ –∫–∞–∫ –¥–µ–º–æ
                            if (foundCount < 2 && index < Object.keys(DA_COORDINATES).length) {
                                $marker.addClass('da-marker-perfect-blink');
                                foundCount++;
                                console.log('üéØ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–ø–æ–∑–∏—Ü–∏—è):', index);
                            }
                        }
                    }
                });
            }
            
            // –ú–ï–¢–û–î 4: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ script —Ç–µ–≥–∞—Ö
            if (foundCount === 0) {
                console.log('üîç –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ –≤ script —Ç–µ–≥–∞—Ö...');
                
                $('script').each(function() {
                    const scriptContent = $(this).html() || $(this).text();
                    if (scriptContent) {
                        Object.keys(DA_COORDINATES).forEach(function(daId) {
                            const coord = DA_COORDINATES[daId];
                            
                            if (scriptContent.includes(coord.lat.toString()) && 
                                scriptContent.includes(coord.lng.toString())) {
                                console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA ' + daId + ' –≤ script:', {
                                    lat: coord.lat,
                                    lng: coord.lng
                                });
                            }
                        });
                    }
                });
            }
            
            // –ú–ï–¢–û–î 5: AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
            if (foundCount === 0) {
                console.log('üîç –ú–µ—Ç–æ–¥ 5: AJAX –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã...');
                
                $.ajax({
                    url: MyHome.api + '/estates',
                    type: 'GET',
                    success: function(response) {
                        console.log('üì° –û—Ç–≤–µ—Ç API –∫–∞—Ä—Ç—ã:', response);
                        
                        if (response && response.length) {
                            response.forEach(function(estate, index) {
                                if (estate.id && DA_COORDINATES[estate.id]) {
                                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API:', estate.id);
                                    
                                    // –ù–∞—Ö–æ–¥–∏–º –º–∞—Ä–∫–µ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                                    if (estate.lat && estate.lng) {
                                        const estateCoord = DA_COORDINATES[estate.id];
                                        
                                        if (Math.abs(parseFloat(estate.lat) - estateCoord.lat) < 0.001 &&
                                            Math.abs(parseFloat(estate.lng) - estateCoord.lng) < 0.001) {
                                            
                                            if ($markers.eq(index).length) {
                                                $markers.eq(index).addClass('da-marker-perfect-blink');
                                                foundCount++;
                                                console.log('üéØ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (API):', estate.id);
                                            }
                                        }
                                    }
                                }
                            });
                        }
                    },
                    error: function() {
                        console.log('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞');
                    }
                });
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(function() {
                const actualFound = $('.mh-map-pin.da-marker-perfect-blink').length;
                console.log('üìä === –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
                console.log('–í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:', Object.keys(DA_COORDINATES).length);
                console.log('–£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ:', actualFound);
                
                if (actualFound > 0) {
                    console.log('‚úÖ –£–°–ü–ï–•! DA –º–∞—Ä–∫–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –º–∏–≥–∞—é—Ç!');
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
                    try {
                        const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvGMeB......');
                        audio.volume = 0.3;
                        audio.play().catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–ø–ª–µ—è
                    } catch (e) {}
                    
                } else {
                    console.log('‚ö†Ô∏è DA –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
                    console.log('1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏');
                    console.log('2. –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ API');
                    console.log('3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π');
                    
                    // –î–µ–º–æ —Ä–µ–∂–∏–º –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º...');
                    $markers.slice(0, 2).addClass('da-marker-perfect-blink');
                    console.log('‚ö° –î–µ–º–æ: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞');
                }
                
                // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
                console.log('- MyHome –æ–±—ä–µ–∫—Ç:', window.MyHome);
                console.log('- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã:', Object.keys(window).filter(k => k.includes('Map')));
                console.log('- DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', DA_COORDINATES);
                
            }, 1000);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        setTimeout(findPerfectDAMarkers, 1500);
        setTimeout(findPerfectDAMarkers, 3000);
        setTimeout(findPerfectDAMarkers, 5000);
        setTimeout(findPerfectDAMarkers, 8000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                    setTimeout(findPerfectDAMarkers, 800);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞—Ä—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if (window.google && window.google.maps && window.google.maps.event) {
            setTimeout(function() {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–æ–±—ã—Ç–∏—è–º –∫–∞—Ä—Ç—ã
                const mapContainer = document.getElementById('myhome-map');
                if (mapContainer) {
                    console.log('üó∫Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–±—ã—Ç–∏—è–º –∫–∞—Ä—Ç—ã...');
                    
                    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
                    mapContainer.addEventListener('click', function(e) {
                        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–µ:', e);
                        setTimeout(findPerfectDAMarkers, 500);
                    });
                }
            }, 2000);
        }
    });
    </script>
    <?php
}
?>
<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ DA –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤ */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
function get_da_properties_universal() {
    $da_properties = array();
    
    // –°–ø–æ—Å–æ–± 1: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Ç–∞–∫—Å–æ–Ω–æ–º–∏—é spetspredlozheniya
    if (taxonomy_exists('spetspredlozheniya')) {
        $da_properties = get_posts(array(
            'post_type' => 'estate',
            'post_status' => 'publish',
            'posts_per_page' => -1,
            'tax_query' => array(
                array(
                    'taxonomy' => 'spetspredlozheniya',
                    'field' => 'slug',
                    'terms' => 'da'
                )
            )
        ));
    }
    
    // –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º —á–µ—Ä–µ–∑ –º–µ—Ç–∞-–ø–æ–ª—è
    if (empty($da_properties)) {
        $da_properties = get_posts(array(
            'post_type' => 'estate',
            'post_status' => 'publish',
            'posts_per_page' => -1,
            'meta_query' => array(
                'relation' => 'OR',
                array(
                    'key' => 'da_status',
                    'value' => 'yes',
                    'compare' => '='
                ),
                array(
                    'key' => 'special_offer',
                    'value' => 'da',
                    'compare' => '='
                ),
                array(
                    'key' => 'myhome_special_offer',
                    'value' => 'da',
                    'compare' => '='
                )
            )
        ));
    }
    
    // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    if (empty($da_properties)) {
        $da_properties = get_posts(array(
            'post_type' => 'estate',
            'post_status' => 'publish',
            'posts_per_page' => -1,
            's' => '–¥–∞ —Å–¥–µ–ª–∫–∞'
        ));
    }
    
    // –°–ø–æ—Å–æ–± 4: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    if (empty($da_properties)) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        $da_ids = array(); // –ù–∞–ø—Ä–∏–º–µ—Ä: array(123, 456, 789);
        
        if (!empty($da_ids)) {
            $da_properties = get_posts(array(
                'post_type' => 'estate',
                'post_status' => 'publish',
                'posts_per_page' => -1,
                'post__in' => $da_ids
            ));
        }
    }
    
    return $da_properties;
}

// –ü–µ—Ä–µ–¥–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ –≤ JavaScript
add_action('wp_footer', function() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    $da_properties = get_da_properties_universal();
    
    $da_ids = array();
    $da_coords = array();
    
    foreach ($da_properties as $property) {
        $property_id = intval($property->ID);
        $da_ids[] = $property_id;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        $lat = get_post_meta($property_id, 'myhome_lat', true) ?: 
               get_post_meta($property_id, 'latitude', true) ?: 
               get_post_meta($property_id, 'lat', true);
               
        $lng = get_post_meta($property_id, 'myhome_lng', true) ?: 
               get_post_meta($property_id, 'longitude', true) ?: 
               get_post_meta($property_id, 'lng', true);
               
        $address = get_post_meta($property_id, 'myhome_property_address', true) ?: 
                   get_post_meta($property_id, 'address', true) ?: 
                   get_post_meta($property_id, 'property_address', true);
        
        if ($lat && $lng) {
            $da_coords[] = array(
                'id' => $property_id,
                'lat' => floatval($lat),
                'lng' => floatval($lng),
                'title' => $property->post_title,
                'address' => $address
            );
        }
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    error_log('DA Properties found: ' . count($da_properties));
    error_log('DA IDs: ' . print_r($da_ids, true));
    ?>
    <script type="text/javascript">
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è DA –¥–∞–Ω–Ω—ã—Ö
    window.DAMarkers = {
        ids: <?php echo json_encode($da_ids); ?>,
        coords: <?php echo json_encode($da_coords); ?>,
        debug: true
    };
    
    // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MyHome –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    if (typeof window.MyHome !== 'undefined') {
        window.MyHome.da_ids = window.DAMarkers.ids;
        window.MyHome.da_coords = window.DAMarkers.coords;
    } else {
        window.MyHome = {
            da_ids: window.DAMarkers.ids,
            da_coords: window.DAMarkers.coords
        };
    }
    
    console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
    console.log('üìä DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ:', window.DAMarkers.ids.length);
    console.log('üìç DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', window.DAMarkers.coords.length);
    </script>
    <?php
});

// –û—Å–Ω–æ–≤–Ω–æ–π JavaScript –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ DA —Å–∏—Å—Ç–µ–º—ã...');
            
            var daData = window.DAMarkers || {};
            var daIds = daData.ids || [];
            var daCoords = daData.coords || [];
            var processedMarkers = new Set();
            var debugMode = daData.debug || false;
            
            if (daIds.length === 0) {
                console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
                
                // –ï—Å–ª–∏ –Ω–µ—Ç DA –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –ø–µ—Ä–≤—ã–º 2 –º–∞—Ä–∫–µ—Ä–∞–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                setTimeout(function() {
                    var $markers = $('.mh-map-pin').slice(0, 2);
                    if ($markers.length > 0) {
                        console.log('üîß –î–ï–ú–û —Ä–µ–∂–∏–º: –ø—Ä–∏–º–µ–Ω—è—é –∞–Ω–∏–º–∞—Ü–∏—é –∫ –ø–µ—Ä–≤—ã–º 2 –º–∞—Ä–∫–µ—Ä–∞–º');
                        $markers.addClass('da-marker-blink');
                    }
                }, 3000);
                
                return;
            }
            
            initDASystem();
            
            function initDASystem() {
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
                var observer = new MutationObserver(function(mutations) {
                    checkAndApplyDAStyles();
                });
                
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
                
                // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
                var checkIntervals = [500, 1000, 2000, 3000, 5000, 8000];
                checkIntervals.forEach(function(delay) {
                    setTimeout(checkAndApplyDAStyles, delay);
                });
                
                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                setInterval(checkAndApplyDAStyles, 5000);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ DA
            function isDAProperty(propertyId) {
                if (!propertyId) return false;
                return daIds.indexOf(parseInt(propertyId)) !== -1;
            }
            
            // –ü–æ–∏—Å–∫ DA –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            function findDAByCoords(lat, lng, tolerance) {
                tolerance = tolerance || 0.0001;
                
                for (var i = 0; i < daCoords.length; i++) {
                    var coord = daCoords[i];
                    var latDiff = Math.abs(coord.lat - lat);
                    var lngDiff = Math.abs(coord.lng - lng);
                    
                    if (latDiff <= tolerance && lngDiff <= tolerance) {
                        return coord;
                    }
                }
                return null;
            }
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ DA —Å—Ç–∏–ª—è
            function applyDAStyle(element, propertyId, source) {
                if (!element || processedMarkers.has(element)) {
                    return false;
                }
                
                if (!isDAProperty(propertyId)) {
                    if (debugMode) {
                        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–∞—Ä–∫–µ—Ä–∞ ID ' + propertyId + ' - –Ω–µ DA');
                    }
                    return false;
                }
                
                var $element = $(element);
                if (!$element.hasClass('da-marker-blink')) {
                    $element.addClass('da-marker-blink');
                    processedMarkers.add(element);
                    console.log('‚ú® DA –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ID:', propertyId, '–ò—Å—Ç–æ—á–Ω–∏–∫:', source);
                    return true;
                }
                
                return false;
            }
            
            // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            function checkAndApplyDAStyles() {
                var applied = 0;
                
                // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ DOM –º–∞—Ä–∫–µ—Ä–æ–≤
                applied += processDOMMarkers();
                
                // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
                applied += processGlobalMapData();
                
                // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Maps –æ–±—ä–µ–∫—Ç–æ–≤
                applied += processGoogleMapsObjects();
                
                if (applied > 0) {
                    var totalDAMarkers = $('.mh-map-pin.da-marker-blink').length;
                    console.log('üéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö DA —Å—Ç–∏–ª–µ–π:', applied);
                    console.log('üìä –í—Å–µ–≥–æ DA –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', totalDAMarkers);
                }
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if (applied > 0) {
                    setTimeout(showStatistics, 3000);
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ DOM –º–∞—Ä–∫–µ—Ä–æ–≤
            function processDOMMarkers() {
                var applied = 0;
                var $markers = $('.mh-map-pin:not(.da-processed)');
                
                if ($markers.length === 0) return 0;
                
                if (debugMode) {
                    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
                }
                
                $markers.each(function(index) {
                    var $marker = $(this);
                    $marker.addClass('da-processed');
                    
                    var propertyId = extractPropertyIdFromDOM($marker, index);
                    
                    if (propertyId && applyDAStyle(this, propertyId, 'DOM_' + index)) {
                        applied++;
                    }
                });
                
                return applied;
            }
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
            function extractPropertyIdFromDOM($marker, index) {
                // –ü–æ–∏—Å–∫ –≤ data-–∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                var propertyId = $marker.data('property-id') || 
                               $marker.data('estate-id') || 
                               $marker.data('id') ||
                               $marker.attr('data-property-id') ||
                               $marker.attr('data-estate-id') ||
                               $marker.attr('data-id');
                
                // –ü–æ–∏—Å–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                if (!propertyId) {
                    var $parent = $marker.closest('[data-property-id], [data-estate-id], [data-id]');
                    if ($parent.length) {
                        propertyId = $parent.data('property-id') || 
                                   $parent.data('estate-id') ||
                                   $parent.data('id');
                    }
                }
                
                // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                if (!propertyId && window.MyHomeMapData && window.MyHomeMapData.estates) {
                    var estate = window.MyHomeMapData.estates[index];
                    if (estate && (estate.id || estate.ID)) {
                        propertyId = estate.id || estate.ID;
                    }
                }
                
                return propertyId;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã
            function processGlobalMapData() {
                var applied = 0;
                
                if (window.MyHomeMapData && window.MyHomeMapData.estates) {
                    var estates = window.MyHomeMapData.estates;
                    var $allMarkers = $('.mh-map-pin');
                    
                    estates.forEach(function(estate, index) {
                        if (!estate || (!estate.id && !estate.ID)) return;
                        
                        var propertyId = estate.id || estate.ID;
                        
                        if (index < $allMarkers.length && isDAProperty(propertyId)) {
                            var markerElement = $allMarkers[index];
                            if (applyDAStyle(markerElement, propertyId, 'GLOBAL_' + index)) {
                                applied++;
                            }
                        }
                    });
                }
                
                return applied;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Maps –æ–±—ä–µ–∫—Ç–æ–≤
            function processGoogleMapsObjects() {
                var applied = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–∞—Ä—Ç—ã
                var mapObjects = [
                    window.map,
                    window.myHomeMap,
                    window.googleMap,
                    window.myMap
                ];
                
                mapObjects.forEach(function(mapObj, mapIndex) {
                    if (!mapObj || !mapObj.markers) return;
                    
                    var markers = mapObj.markers;
                    if (!Array.isArray(markers)) return;
                    
                    markers.forEach(function(marker, markerIndex) {
                        if (!marker) return;
                        
                        var propertyId = extractPropertyIdFromMarker(marker);
                        var markerElement = getMarkerElement(marker);
                        
                        if (propertyId && markerElement && isDAProperty(propertyId)) {
                            if (applyDAStyle(markerElement, propertyId, 'GM_' + mapIndex + '_' + markerIndex)) {
                                applied++;
                            }
                        }
                    });
                });
                
                return applied;
            }
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ –º–∞—Ä–∫–µ—Ä–∞ Google Maps
            function extractPropertyIdFromMarker(marker) {
                // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö
                var idProps = ['id', 'estateId', 'propertyId', 'property_id', 'ID'];
                for (var i = 0; i < idProps.length; i++) {
                    if (marker[idProps[i]]) {
                        return marker[idProps[i]];
                    }
                }
                
                // –ü–æ–∏—Å–∫ –≤ –æ–±—ä–µ–∫—Ç–µ estate
                if (marker.estate) {
                    for (var i = 0; i < idProps.length; i++) {
                        if (marker.estate[idProps[i]]) {
                            return marker.estate[idProps[i]];
                        }
                    }
                }
                
                // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                if (marker.position) {
                    var lat, lng;
                    
                    if (typeof marker.position.lat === 'function') {
                        lat = marker.position.lat();
                        lng = marker.position.lng();
                    } else {
                        lat = marker.position.lat;
                        lng = marker.position.lng;
                    }
                    
                    if (lat && lng) {
                        var coordMatch = findDAByCoords(lat, lng);
                        if (coordMatch) {
                            return coordMatch.id;
                        }
                    }
                }
                
                return null;
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞
            function getMarkerElement(marker) {
                if (marker.content_) {
                    return marker.content_;
                }
                
                if (marker.getContent && typeof marker.getContent === 'function') {
                    return marker.getContent();
                }
                
                return null;
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            function showStatistics() {
                var totalMarkers = $('.mh-map-pin').length;
                var daMarkers = $('.mh-map-pin.da-marker-blink').length;
                
                console.log('üìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê DA –ú–ê–†–ö–ï–†–û–í ===');
                console.log('   –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', totalMarkers);
                console.log('   DA –º–∞—Ä–∫–µ—Ä–æ–≤ (–º–∏–≥–∞—é—â–∏—Ö):', daMarkers);
                console.log('   DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ:', daIds.length);
                console.log('   DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', daCoords.length);
                
                if (daMarkers > 0) {
                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç!');
                    $('.mh-map-pin.da-marker-blink').each(function(i) {
                        console.log('   üî¥ DA –º–∞—Ä–∫–µ—Ä #' + (i + 1), this);
                    });
                } else if (daIds.length > 0) {
                    console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –º–∏–≥–∞—é—Ç');
                    console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                    console.log('   - –ú–∞—Ä–∫–µ—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ');
                    console.log('   - –ù–µ–≤–µ—Ä–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ID');
                    console.log('   - –ú–∞—Ä–∫–µ—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏');
                } else {
                    console.log('‚ùå DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
                    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–ï–ú–û —Ä–µ–∂–∏–º');
                }
            }
            
            // –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            setTimeout(showStatistics, 8000);
        });
    })(jQuery);
    </script>
    <?php
});
?>
<?php
/**
 * –¢–ï–°–¢–û–í–´–ô –®–û–†–¢–ö–û–î –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê DA –î–ê–ù–ù–´–•
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: [da_test]
 */

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à–æ—Ä—Ç–∫–æ–¥
add_shortcode('da_test', 'da_test_shortcode');

function da_test_shortcode() {
    ob_start();
    ?>
    
    <div id="da-test-results" style="background: #f0f0f0; padding: 20px; margin: 20px 0; border: 2px solid #333;">
        <h3>üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DA –¥–∞–Ω–Ω—ã—Ö...</h3>
        <div id="da-test-output">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
    </div>

    <script>
    jQuery(document).ready(function($) {
        console.log('üîç === DA –¢–ï–°–¢ –ó–ê–ü–£–©–ï–ù ===');
        
        var testResults = {
            timestamp: new Date().toLocaleString(),
            page_url: window.location.href,
            markers_found: [],
            global_objects: {},
            estate_posts: [],
            taxonomies: [],
            meta_fields: [],
            errors: []
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        function safeGet(obj, path, defaultValue) {
            try {
                var result = obj;
                var pathArray = path.split('.');
                for (var i = 0; i < pathArray.length; i++) {
                    result = result[pathArray[i]];
                    if (result === undefined || result === null) {
                        return defaultValue;
                    }
                }
                return result;
            } catch (e) {
                return defaultValue;
            }
        }

        // 1. –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        function analyzeMarkers() {
            console.log('üîç –ê–Ω–∞–ª–∏–∑ –º–∞—Ä–∫–µ—Ä–æ–≤...');
            
            var $markers = $('.mh-map-pin');
            console.log('–ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            $markers.each(function(index) {
                var $marker = $(this);
                var markerData = {
                    index: index,
                    html: $marker[0].outerHTML,
                    text: $marker.text(),
                    attributes: {},
                    data_attributes: {},
                    classes: $marker.attr('class'),
                    parent_attributes: {}
                };
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                $.each(this.attributes, function() {
                    if(this.specified) {
                        markerData.attributes[this.name] = this.value;
                        if (this.name.startsWith('data-')) {
                            markerData.data_attributes[this.name] = this.value;
                        }
                    }
                });
                
                // –°–æ–±–∏—Ä–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è
                var $parent = $marker.parent();
                if ($parent.length) {
                    $.each($parent[0].attributes, function() {
                        if(this.specified && this.name.startsWith('data-')) {
                            markerData.parent_attributes[this.name] = this.value;
                        }
                    });
                }
                
                testResults.markers_found.push(markerData);
            });
        }

        // 2. –ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        function analyzeGlobalObjects() {
            console.log('üîç –ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤...');
            
            var globalChecks = [
                'MyHome', 'MyHomeMapData', 'myhome_localized', 
                'map', 'myHomeMap', 'googleMap', 'myMap',
                'estate_data', 'properties_data', 'markers_data'
            ];
            
            globalChecks.forEach(function(varName) {
                if (typeof window[varName] !== 'undefined') {
                    try {
                        testResults.global_objects[varName] = JSON.parse(JSON.stringify(window[varName]));
                    } catch (e) {
                        testResults.global_objects[varName] = 'Error: ' + e.message;
                    }
                }
            });
        }

        // 3. AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è estate –ø–æ—Å—Ç–æ–≤
        function getEstatePosts() {
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ estate –ø–æ—Å—Ç–æ–≤...');
            
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'da_test_get_posts'
                },
                success: function(response) {
                    testResults.estate_posts = response;
                    checkTaxonomies();
                },
                error: function(xhr, status, error) {
                    testResults.errors.push('AJAX Error: ' + error);
                    displayResults();
                }
            });
        }

        // 4. AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π
        function checkTaxonomies() {
            console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π...');
            
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'da_test_get_taxonomies'
                },
                success: function(response) {
                    testResults.taxonomies = response;
                    getMetaFields();
                },
                error: function(xhr, status, error) {
                    testResults.errors.push('Taxonomy Error: ' + error);
                    displayResults();
                }
            });
        }

        // 5. AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞-–ø–æ–ª–µ–π
        function getMetaFields() {
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞-–ø–æ–ª–µ–π...');
            
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'da_test_get_meta'
                },
                success: function(response) {
                    testResults.meta_fields = response;
                    displayResults();
                },
                error: function(xhr, status, error) {
                    testResults.errors.push('Meta Error: ' + error);
                    displayResults();
                }
            });
        }

        // 6. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        function displayResults() {
            console.log('üìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ===', testResults);
            
            var output = '<h3>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h3>';
            output += '<p><strong>–í—Ä–µ–º—è:</strong> ' + testResults.timestamp + '</p>';
            output += '<p><strong>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</strong> ' + testResults.page_url + '</p>';
            
            // –ú–∞—Ä–∫–µ—Ä—ã
            output += '<h4>üìç –ú–∞—Ä–∫–µ—Ä—ã (' + testResults.markers_found.length + ')</h4>';
            if (testResults.markers_found.length > 0) {
                output += '<pre style="background: white; padding: 10px; max-height: 200px; overflow-y: auto;">';
                output += JSON.stringify(testResults.markers_found, null, 2);
                output += '</pre>';
            } else {
                output += '<p style="color: red;">–ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</p>';
            }
            
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            output += '<h4>üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã</h4>';
            output += '<pre style="background: white; padding: 10px; max-height: 200px; overflow-y: auto;">';
            output += JSON.stringify(testResults.global_objects, null, 2);
            output += '</pre>';
            
            // Estate –ø–æ—Å—Ç—ã
            output += '<h4>üè† Estate –ø–æ—Å—Ç—ã</h4>';
            output += '<pre style="background: white; padding: 10px; max-height: 200px; overflow-y: auto;">';
            output += JSON.stringify(testResults.estate_posts, null, 2);
            output += '</pre>';
            
            // –¢–∞–∫—Å–æ–Ω–æ–º–∏–∏
            output += '<h4>üìÇ –¢–∞–∫—Å–æ–Ω–æ–º–∏–∏</h4>';
            output += '<pre style="background: white; padding: 10px; max-height: 200px; overflow-y: auto;">';
            output += JSON.stringify(testResults.taxonomies, null, 2);
            output += '</pre>';
            
            // –ú–µ—Ç–∞-–ø–æ–ª—è
            output += '<h4>üîß –ú–µ—Ç–∞-–ø–æ–ª—è</h4>';
            output += '<pre style="background: white; padding: 10px; max-height: 200px; overflow-y: auto;">';
            output += JSON.stringify(testResults.meta_fields, null, 2);
            output += '</pre>';
            
            // –û—à–∏–±–∫–∏
            if (testResults.errors.length > 0) {
                output += '<h4 style="color: red;">‚ùå –û—à–∏–±–∫–∏</h4>';
                output += '<ul>';
                testResults.errors.forEach(function(error) {
                    output += '<li style="color: red;">' + error + '</li>';
                });
                output += '</ul>';
            }
            
            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            output += '<h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h4>';
            output += '<p>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤—ã—à–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞.</p>';
            
            $('#da-test-output').html(output);
        }

        // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setTimeout(function() {
            analyzeMarkers();
            analyzeGlobalObjects();
            getEstatePosts();
        }, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
    });
    </script>

    <?php
    return ob_get_clean();
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è estate –ø–æ—Å—Ç–æ–≤
add_action('wp_ajax_da_test_get_posts', 'da_test_get_posts');
add_action('wp_ajax_nopriv_da_test_get_posts', 'da_test_get_posts');

function da_test_get_posts() {
    $result = array();
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è estate –ø–æ—Å—Ç–æ–≤
    $attempts = array(
        array('post_type' => 'estate', 'posts_per_page' => 10),
        array('post_type' => 'property', 'posts_per_page' => 10),
        array('post_type' => 'listing', 'posts_per_page' => 10),
    );
    
    foreach ($attempts as $attempt) {
        $posts = get_posts($attempt);
        if (!empty($posts)) {
            foreach ($posts as $post) {
                $post_data = array(
                    'ID' => $post->ID,
                    'title' => $post->post_title,
                    'type' => $post->post_type,
                    'status' => $post->post_status,
                    'meta' => array(),
                    'terms' => array()
                );
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–∞-–ø–æ–ª—è
                $all_meta = get_post_meta($post->ID);
                foreach ($all_meta as $key => $value) {
                    if (strpos($key, 'lat') !== false || 
                        strpos($key, 'lng') !== false || 
                        strpos($key, 'address') !== false ||
                        strpos($key, 'da') !== false ||
                        strpos($key, 'special') !== false) {
                        $post_data['meta'][$key] = $value[0];
                    }
                }
                
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Ä–º–∏–Ω—ã
                $taxonomies = get_object_taxonomies($post->post_type);
                foreach ($taxonomies as $taxonomy) {
                    $terms = wp_get_post_terms($post->ID, $taxonomy);
                    if (!empty($terms)) {
                        $post_data['terms'][$taxonomy] = $terms;
                    }
                }
                
                $result[] = $post_data;
            }
            break; // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Å—Ç—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
        }
    }
    
    wp_send_json($result);
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–∫—Å–æ–Ω–æ–º–∏–π
add_action('wp_ajax_da_test_get_taxonomies', 'da_test_get_taxonomies');
add_action('wp_ajax_nopriv_da_test_get_taxonomies', 'da_test_get_taxonomies');

function da_test_get_taxonomies() {
    $result = array();
    
    $post_types = array('estate', 'property', 'listing');
    
    foreach ($post_types as $post_type) {
        if (post_type_exists($post_type)) {
            $taxonomies = get_object_taxonomies($post_type, 'objects');
            foreach ($taxonomies as $taxonomy) {
                $terms = get_terms(array(
                    'taxonomy' => $taxonomy->name,
                    'hide_empty' => false,
                    'number' => 20
                ));
                
                $result[$taxonomy->name] = array(
                    'label' => $taxonomy->label,
                    'post_type' => $post_type,
                    'terms' => $terms
                );
            }
        }
    }
    
    wp_send_json($result);
}

// AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞-–ø–æ–ª–µ–π
add_action('wp_ajax_da_test_get_meta', 'da_test_get_meta');
add_action('wp_ajax_nopriv_da_test_get_meta', 'da_test_get_meta');

function da_test_get_meta() {
    global $wpdb;
    
    // –ò—â–µ–º –≤—Å–µ –º–µ—Ç–∞-–∫–ª—é—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é
    $meta_keys = $wpdb->get_results("
        SELECT DISTINCT meta_key, COUNT(*) as count 
        FROM {$wpdb->postmeta} pm
        JOIN {$wpdb->posts} p ON pm.post_id = p.ID
        WHERE p.post_type IN ('estate', 'property', 'listing')
        AND (
            meta_key LIKE '%lat%' OR 
            meta_key LIKE '%lng%' OR 
            meta_key LIKE '%address%' OR
            meta_key LIKE '%da%' OR
            meta_key LIKE '%special%' OR
            meta_key LIKE '%offer%' OR
            meta_key LIKE '%coord%' OR
            meta_key LIKE '%location%'
        )
        GROUP BY meta_key
        ORDER BY count DESC
        LIMIT 50
    ");
    
    wp_send_json($meta_keys);
}
?>
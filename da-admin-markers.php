<?php
/**
 * DA Markers - –ê–î–ú–ò–ù–ö–ê –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–ê–†–ö–ï–†–ê–ú–ò
 * –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –º–∞—Ä–∫–µ—Ä–æ–≤
 */

// –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
register_activation_hook(__FILE__, 'da_create_markers_table');
function da_create_markers_table() {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'da_markers';
    
    $charset_collate = $wpdb->get_charset_collate();
    
    $sql = "CREATE TABLE $table_name (
        id mediumint(9) NOT NULL AUTO_INCREMENT,
        marker_index int(11) NOT NULL,
        marker_name varchar(255) DEFAULT '',
        is_active tinyint(1) DEFAULT 0,
        lat decimal(10, 8) DEFAULT NULL,
        lng decimal(11, 8) DEFAULT NULL,
        created_at datetime DEFAULT CURRENT_TIMESTAMP,
        updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY marker_index (marker_index)
    ) $charset_collate;";
    
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤ –∞–¥–º–∏–Ω–∫—É
add_action('admin_menu', 'da_markers_admin_menu');
function da_markers_admin_menu() {
    add_menu_page(
        'DA –ú–∞—Ä–∫–µ—Ä—ã',
        'DA –ú–∞—Ä–∫–µ—Ä—ã',
        'manage_options',
        'da-markers',
        'da_markers_admin_page',
        'dashicons-location-alt',
        30
    );
}

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏
function da_markers_admin_page() {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'da_markers';
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (isset($_POST['save_markers'])) {
        // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
        $wpdb->update($table_name, array('is_active' => 0), array());
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        if (isset($_POST['active_markers']) && is_array($_POST['active_markers'])) {
            foreach ($_POST['active_markers'] as $marker_index) {
                $marker_index = intval($marker_index);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                $existing = $wpdb->get_row($wpdb->prepare(
                    "SELECT * FROM $table_name WHERE marker_index = %d", 
                    $marker_index
                ));
                
                if ($existing) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                    $wpdb->update(
                        $table_name,
                        array('is_active' => 1),
                        array('marker_index' => $marker_index)
                    );
                } else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    $wpdb->insert(
                        $table_name,
                        array(
                            'marker_index' => $marker_index,
                            'marker_name' => '–ú–∞—Ä–∫–µ—Ä #' . $marker_index,
                            'is_active' => 1
                        )
                    );
                }
            }
        }
        
        echo '<div class="notice notice-success"><p>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</p></div>';
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    if (isset($_POST['update_coordinates'])) {
        if (isset($_POST['marker_coordinates']) && is_array($_POST['marker_coordinates'])) {
            foreach ($_POST['marker_coordinates'] as $marker_index => $coords) {
                if (!empty($coords['lat']) && !empty($coords['lng'])) {
                    $marker_index = intval($marker_index);
                    $lat = floatval($coords['lat']);
                    $lng = floatval($coords['lng']);
                    $name = sanitize_text_field($coords['name']);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å
                    $existing = $wpdb->get_row($wpdb->prepare(
                        "SELECT * FROM $table_name WHERE marker_index = %d", 
                        $marker_index
                    ));
                    
                    if ($existing) {
                        $wpdb->update(
                            $table_name,
                            array(
                                'lat' => $lat,
                                'lng' => $lng,
                                'marker_name' => $name
                            ),
                            array('marker_index' => $marker_index)
                        );
                    } else {
                        $wpdb->insert(
                            $table_name,
                            array(
                                'marker_index' => $marker_index,
                                'marker_name' => $name,
                                'lat' => $lat,
                                'lng' => $lng,
                                'is_active' => 0
                            )
                        );
                    }
                }
            }
        }
        
        echo '<div class="notice notice-success"><p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</p></div>';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    $active_markers = $wpdb->get_results(
        "SELECT * FROM $table_name WHERE is_active = 1 ORDER BY marker_index"
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
    $all_markers = $wpdb->get_results(
        "SELECT * FROM $table_name ORDER BY marker_index"
    );
    
    ?>
    <div class="wrap">
        <h1>üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ DA –ú–∞—Ä–∫–µ—Ä–∞–º–∏</h1>
        
        <div style="background: #fff; padding: 20px; margin: 20px 0; border-left: 4px solid #0073aa;">
            <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
            <ol>
                <li><strong>–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ä—Ç–æ–π</strong> –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ</li>
                <li><strong>–û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞</strong> (F12 ‚Üí Console)</li>
                <li><strong>–ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</strong> "üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: X"</li>
                <li><strong>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤</strong> –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –º–∏–≥–∞—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)</li>
                <li><strong>–û—Ç–º–µ—Ç—å—Ç–µ –≥–∞–ª–æ—á–∫–∏</strong> –Ω–∏–∂–µ –¥–ª—è –Ω—É–∂–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤</li>
                <li><strong>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</strong></li>
            </ol>
        </div>

        <!-- –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -->
        <div class="postbox" style="margin: 20px 0;">
            <div class="postbox-header">
                <h2>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
            </div>
            <div class="inside" style="padding: 20px;">
                <form method="post">
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏:</h3>
                    
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px; margin: 20px 0;">
                        <?php for ($i = 0; $i < 50; $i++): ?>
                            <?php 
                            $is_active = false;
                            foreach ($active_markers as $marker) {
                                if ($marker->marker_index == $i) {
                                    $is_active = true;
                                    break;
                                }
                            }
                            ?>
                            <label style="padding: 10px; border: 1px solid #ddd; border-radius: 4px; <?php echo $is_active ? 'background: #e7f3ff; border-color: #0073aa;' : ''; ?>">
                                <input type="checkbox" name="active_markers[]" value="<?php echo $i; ?>" <?php checked($is_active); ?>>
                                –ú–∞—Ä–∫–µ—Ä #<?php echo $i; ?>
                            </label>
                        <?php endfor; ?>
                    </div>
                    
                    <p>
                        <input type="submit" name="save_markers" class="button-primary" value="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤">
                        <button type="button" onclick="selectNone()" class="button">‚ùå –°–Ω—è—Ç—å –≤—Å–µ</button>
                        <button type="button" onclick="selectFirst5()" class="button">üéØ –ü–µ—Ä–≤—ã–µ 5</button>
                    </p>
                </form>
            </div>
        </div>

        <!-- –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã -->
        <?php if (!empty($active_markers)): ?>
        <div class="postbox">
            <div class="postbox-header">
                <h2>üî¥ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã (<?php echo count($active_markers); ?>)</h2>
            </div>
            <div class="inside" style="padding: 20px;">
                <table class="wp-list-table widefat fixed striped">
                    <thead>
                        <tr>
                            <th>‚Ññ</th>
                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                            <th>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th>–û–±–Ω–æ–≤–ª–µ–Ω–æ</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($active_markers as $marker): ?>
                        <tr>
                            <td><strong>#<?php echo $marker->marker_index; ?></strong></td>
                            <td><?php echo esc_html($marker->marker_name); ?></td>
                            <td>
                                <?php if ($marker->lat && $marker->lng): ?>
                                    <?php echo $marker->lat; ?>, <?php echo $marker->lng; ?>
                                <?php else: ?>
                                    <span style="color: #999;">–ù–µ —É–∫–∞–∑–∞–Ω—ã</span>
                                <?php endif; ?>
                            </td>
                            <td><span style="color: green;">üü¢ –ê–∫—Ç–∏–≤–µ–Ω</span></td>
                            <td><?php echo $marker->updated_at; ?></td>
                        </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        </div>
        <?php endif; ?>

        <!-- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ -->
        <div class="postbox">
            <div class="postbox-header">
                <h2>üìç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤</h2>
            </div>
            <div class="inside" style="padding: 20px;">
                <p><em>–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤</em></p>
                
                <form method="post">
                    <table class="wp-list-table widefat">
                        <thead>
                            <tr>
                                <th>–ú–∞—Ä–∫–µ—Ä</th>
                                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                <th>–®–∏—Ä–æ—Ç–∞</th>
                                <th>–î–æ–ª–≥–æ—Ç–∞</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php for ($i = 0; $i < 10; $i++): ?>
                                <?php 
                                $existing_marker = null;
                                foreach ($all_markers as $marker) {
                                    if ($marker->marker_index == $i) {
                                        $existing_marker = $marker;
                                        break;
                                    }
                                }
                                ?>
                                <tr>
                                    <td><strong>–ú–∞—Ä–∫–µ—Ä #<?php echo $i; ?></strong></td>
                                    <td>
                                        <input type="text" 
                                               name="marker_coordinates[<?php echo $i; ?>][name]" 
                                               value="<?php echo $existing_marker ? esc_attr($existing_marker->marker_name) : '–ú–∞—Ä–∫–µ—Ä #' . $i; ?>"
                                               placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞"
                                               style="width: 100%;">
                                    </td>
                                    <td>
                                        <input type="number" 
                                               name="marker_coordinates[<?php echo $i; ?>][lat]" 
                                               value="<?php echo $existing_marker ? $existing_marker->lat : ''; ?>"
                                               step="0.0000001" 
                                               placeholder="55.7558"
                                               style="width: 100%;">
                                    </td>
                                    <td>
                                        <input type="number" 
                                               name="marker_coordinates[<?php echo $i; ?>][lng]" 
                                               value="<?php echo $existing_marker ? $existing_marker->lng : ''; ?>"
                                               step="0.0000001" 
                                               placeholder="37.6176"
                                               style="width: 100%;">
                                    </td>
                                </tr>
                            <?php endfor; ?>
                        </tbody>
                    </table>
                    
                    <p>
                        <input type="submit" name="update_coordinates" class="button-secondary" value="üìç –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã">
                    </p>
                </form>
            </div>
        </div>
        
        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="postbox">
            <div class="postbox-header">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            </div>
            <div class="inside" style="padding: 20px;">
                <?php
                $total_markers = $wpdb->get_var("SELECT COUNT(*) FROM $table_name");
                $active_count = count($active_markers);
                $with_coords = $wpdb->get_var("SELECT COUNT(*) FROM $table_name WHERE lat IS NOT NULL AND lng IS NOT NULL");
                ?>
                
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px;">
                    <div style="text-align: center; padding: 20px; background: #f1f1f1; border-radius: 8px;">
                        <h3 style="margin: 0; color: #0073aa;"><?php echo $active_count; ?></h3>
                        <p style="margin: 5px 0 0 0;">–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã</p>
                    </div>
                    <div style="text-align: center; padding: 20px; background: #f1f1f1; border-radius: 8px;">
                        <h3 style="margin: 0; color: #135e96;"><?php echo $total_markers; ?></h3>
                        <p style="margin: 5px 0 0 0;">–í—Å–µ–≥–æ –≤ –±–∞–∑–µ</p>
                    </div>
                    <div style="text-align: center; padding: 20px; background: #f1f1f1; border-radius: 8px;">
                        <h3 style="margin: 0; color: #d63638;"><?php echo $with_coords; ?></h3>
                        <p style="margin: 5px 0 0 0;">–° –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
    function selectNone() {
        document.querySelectorAll('input[name="active_markers[]"]').forEach(cb => cb.checked = false);
    }
    
    function selectFirst5() {
        selectNone();
        for (let i = 0; i < 5; i++) {
            const cb = document.querySelector('input[name="active_markers[]"][value="' + i + '"]');
            if (cb) cb.checked = true;
        }
    }
    </script>
    <?php
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_ajax_get_da_admin_markers', 'ajax_get_da_admin_markers');
add_action('wp_ajax_nopriv_get_da_admin_markers', 'ajax_get_da_admin_markers');
function ajax_get_da_admin_markers() {
    global $wpdb;
    
    $table_name = $wpdb->prefix . 'da_markers';
    
    $active_markers = $wpdb->get_results(
        "SELECT * FROM $table_name WHERE is_active = 1 ORDER BY marker_index"
    );
    
    $markers_data = array();
    foreach ($active_markers as $marker) {
        $markers_data[] = array(
            'index' => intval($marker->marker_index),
            'name' => $marker->marker_name,
            'lat' => $marker->lat ? floatval($marker->lat) : null,
            'lng' => $marker->lng ? floatval($marker->lng) : null
        );
    }
    
    wp_send_json_success(array(
        'markers' => $markers_data,
        'count' => count($markers_data),
        'timestamp' => current_time('timestamp')
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_admin_markers_css');
function da_admin_markers_css() {
    ?>
    <style>
    @keyframes da-admin-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            transform: scale(1.1);
        }
    }

    .mh-map-pin.da-admin-active {
        animation: da-admin-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-admin-active i {
        color: #ff0066 !important;
    }

    /* –î–µ–º–æ —Ä–µ–∂–∏–º */
    .mh-map-pin.da-admin-demo {
        animation: da-admin-blink 1.5s infinite;
    }

    .mh-map-pin.da-admin-demo i {
        color: #00ff66 !important;
    }
    </style>
    <?php
}

// JavaScript –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_footer', 'da_admin_markers_script');
function da_admin_markers_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –ê–¥–º–∏–Ω –ú–∞—Ä–∫–µ—Ä—ã - –∑–∞–ø—É—â–µ–Ω–æ');
        
        let activeMarkers = [];
        let processAttempts = 0;
        const maxAttempts = 5;
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏
        function fetchActiveMarkers() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_admin_markers'
                }
            });
        }
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
        function activateMarkersByIndex() {
            processAttempts++;
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ #' + processAttempts);
            
            const $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(activateMarkersByIndex, 2000);
                }
                return;
            }
            
            console.log('üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
            console.log('üéØ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ:', activeMarkers.length);
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
            $markers.removeClass('da-admin-active da-admin-demo');
            
            let activatedCount = 0;
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º
            activeMarkers.forEach(function(markerData) {
                const index = markerData.index;
                const $targetMarker = $markers.eq(index);
                
                if ($targetMarker.length) {
                    $targetMarker.addClass('da-admin-active');
                    activatedCount++;
                    console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –º–∞—Ä–∫–µ—Ä #' + index + ' (' + markerData.name + ')');
                } else {
                    console.log('‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä #' + index + ' –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤: ' + $markers.length + ')');
                }
            });
            
            // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            if (activatedCount === 0 && activeMarkers.length > 0) {
                console.log('üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º...');
                
                activeMarkers.forEach(function(markerData) {
                    if (markerData.lat && markerData.lng) {
                        // –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≤ HTML
                        $markers.each(function(index) {
                            const $marker = $(this);
                            let $parent = $marker;
                            
                            for (let i = 0; i < 5; i++) {
                                $parent = $parent.parent();
                                if ($parent.length === 0) break;
                                
                                const html = $parent.html() || '';
                                const hasLat = html.includes(markerData.lat.toString());
                                const hasLng = html.includes(markerData.lng.toString());
                                
                                if (hasLat && hasLng) {
                                    $marker.addClass('da-admin-active');
                                    activatedCount++;
                                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ' + markerData.name + ' (–∏–Ω–¥–µ–∫—Å ' + index + ')');
                                    return false; // break
                                }
                            }
                        });
                    }
                });
            }
            
            // –î–µ–º–æ —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
            if (activatedCount === 0) {
                if (activeMarkers.length > 0) {
                    console.log('üü° –î–µ–º–æ —Ä–µ–∂–∏–º - –º–∞—Ä–∫–µ—Ä—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ (–ù–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0)');
                } else {
                    console.log('üü¢ –î–µ–º–æ —Ä–µ–∂–∏–º - –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ');
                }
                $markers.slice(0, 1).addClass('da-admin-demo');
                activatedCount = 1;
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(() => {
                const finalActive = $('.mh-map-pin.da-admin-active').length;
                const finalDemo = $('.mh-map-pin.da-admin-demo').length;
                
                console.log('üèÅ === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
                console.log('üî¥ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:', finalActive);
                console.log('üü¢ –î–µ–º–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', finalDemo);
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∞–¥–º–∏–Ω–∫–µ:', activeMarkers.length);
                
                if (finalActive > 0) {
                    console.log('üéâ –£–°–ü–ï–•! –ú–∞—Ä–∫–µ—Ä—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É!');
                    console.log('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: WordPress –ê–¥–º–∏–Ω–∫–∞ ‚Üí DA –ú–∞—Ä–∫–µ—Ä—ã');
                }
            }, 500);
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchActiveMarkers().done(function(response) {
            if (response.success && response.data.markers) {
                activeMarkers = response.data.markers;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:', activeMarkers);
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(activateMarkersByIndex, 3000);
                
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
                if (window.MutationObserver) {
                    const observer = new MutationObserver(function(mutations) {
                        let hasNewMarkers = false;
                        mutations.forEach(function(mutation) {
                            if (mutation.addedNodes) {
                                for (let node of mutation.addedNodes) {
                                    if (node.nodeType === 1) {
                                        if ($(node).find('.mh-map-pin').length > 0 || 
                                            $(node).hasClass('mh-map-pin')) {
                                            hasNewMarkers = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        });
                        
                        if (hasNewMarkers && activeMarkers.length > 0) {
                            console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è...');
                            setTimeout(activateMarkersByIndex, 1500);
                        }
                    });
                    
                    observer.observe(document.body, {
                        childList: true,
                        subtree: true
                    });
                }
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ');
                console.log('‚öôÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ WordPress –ê–¥–º–∏–Ω–∫–∞ ‚Üí DA –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                
                setTimeout(() => {
                    $('.mh-map-pin').slice(0, 1).addClass('da-admin-demo');
                }, 3000);
            }
        }).fail(function() {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤');
        });
    });
    </script>
    <?php
}
?>
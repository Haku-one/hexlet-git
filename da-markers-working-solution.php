<?php
/**
 * DA Markers - –†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
 */

// CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
add_action('wp_head', 'da_working_css');
function da_working_css() {
    ?>
    <style>
    @keyframes da-marker-blink {
        0%, 100% { 
            transform: scale(1); 
            opacity: 1;
            filter: drop-shadow(0 0 5px #ff6b6b);
        }
        50% { 
            transform: scale(1.2); 
            opacity: 0.8;
            filter: drop-shadow(0 0 15px #ff6b6b);
        }
    }

    .mh-map-pin.da-marker-blink {
        animation: da-marker-blink 1.5s infinite;
        z-index: 1000 !important;
        position: relative;
        box-shadow: 0 0 20px rgba(255, 107, 107, 0.6);
        border-radius: 50%;
    }

    .mh-map-pin.da-marker-blink i {
        color: #ff6b6b !important;
        font-weight: bold;
        text-shadow: 0 0 5px rgba(255, 107, 107, 0.8);
    }
    </style>
    <?php
}

// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
add_action('wp_footer', 'da_working_script');
function da_working_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –†–ê–ë–û–ß–ï–ï –†–ï–®–ï–ù–ò–ï –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        
        // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ –≤–∞—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        const DA_COORDINATES = [
            {id: 113, lat: 55.688709, lng: 37.59307290000004, title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞'},
            {id: 5852, lat: 55.74455070740856, lng: 37.3704401548786, title: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π'}
        ];
        
        let processAttempts = 0;
        const maxAttempts = 10;
        
        function findDAMarkersByCoordinates() {
            processAttempts++;
            console.log('üîç –ü–æ–∏—Å–∫ DA –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ–ø—ã—Ç–∫–∞ #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(findDAMarkersByCoordinates, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            console.log('üéØ –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', DA_COORDINATES);
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
            $('.mh-map-pin').removeClass('da-marker-blink');
            
            let foundMarkers = 0;
            
            // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Maps API
            if (typeof google !== 'undefined' && google.maps) {
                console.log('üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Maps API...');
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ Google Maps –æ–±—ä–µ–∫—Ç—ã
                let mapElements = document.querySelectorAll('[data-lat], [data-lng]');
                console.log('üìç –≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', mapElements.length);
                
                mapElements.forEach(function(element, index) {
                    let lat = parseFloat(element.getAttribute('data-lat') || element.dataset.lat);
                    let lng = parseFloat(element.getAttribute('data-lng') || element.dataset.lng);
                    
                    if (lat && lng) {
                        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞:', lat, lng);
                        
                        DA_COORDINATES.forEach(function(daCoord) {
                            if (Math.abs(lat - daCoord.lat) < 0.001 && Math.abs(lng - daCoord.lng) < 0.001) {
                                let $pin = $(element).find('.mh-map-pin');
                                if ($pin.length === 0) {
                                    $pin = $(element).closest('.mh-map-pin');
                                }
                                if ($pin.length === 0) {
                                    $pin = $(element).siblings('.mh-map-pin');
                                }
                                
                                if ($pin.length > 0) {
                                    $pin.addClass('da-marker-blink');
                                    foundMarkers++;
                                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω DA –º–∞—Ä–∫–µ—Ä (API):', daCoord.id, daCoord.title);
                                }
                            }
                        });
                    }
                });
            }
            
            // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');
            
            $('*').each(function() {
                let element = this;
                let $element = $(element);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
                if (element.attributes) {
                    for (let attr of element.attributes) {
                        let attrValue = attr.value;
                        
                        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                        let coordMatches = attrValue.match(/(\d+\.\d+)/g);
                        if (coordMatches && coordMatches.length >= 2) {
                            let lat = parseFloat(coordMatches[0]);
                            let lng = parseFloat(coordMatches[1]);
                            
                            DA_COORDINATES.forEach(function(daCoord) {
                                if (Math.abs(lat - daCoord.lat) < 0.0001 && Math.abs(lng - daCoord.lng) < 0.0001) {
                                    let $pin = $element.find('.mh-map-pin').first();
                                    if ($pin.length === 0) {
                                        $pin = $element.closest('.mh-map-pin');
                                    }
                                    if ($pin.length === 0) {
                                        $pin = $element.siblings('.mh-map-pin').first();
                                    }
                                    
                                    if ($pin.length > 0 && !$pin.hasClass('da-marker-blink')) {
                                        $pin.addClass('da-marker-blink');
                                        foundMarkers++;
                                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω DA –º–∞—Ä–∫–µ—Ä (–∞—Ç—Ä–∏–±—É—Ç ' + attr.name + '):', daCoord.id, daCoord.title);
                                        console.log('üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–ª–∏:', lat, lng, '‚âà', daCoord.lat, daCoord.lng);
                                    }
                                }
                            });
                        }
                    }
                }
            });
            
            // –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –≤ JavaScript –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ–±—ä–µ–∫—Ç–∞—Ö
            console.log('üîç –ü–æ–∏—Å–∫ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö JavaScript –æ–±—ä–µ–∫—Ç–∞—Ö...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º window.MyHome
            if (window.MyHome) {
                console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º window.MyHome:', window.MyHome);
                
                function searchInObject(obj, path = '') {
                    if (typeof obj !== 'object' || obj === null) return;
                    
                    for (let key in obj) {
                        try {
                            let value = obj[key];
                            if (typeof value === 'number') {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π
                                DA_COORDINATES.forEach(function(daCoord) {
                                    if (Math.abs(value - daCoord.lat) < 0.0001 || Math.abs(value - daCoord.lng) < 0.0001) {
                                        console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç–µ:', path + '.' + key, '=', value);
                                    }
                                });
                            } else if (typeof value === 'object' && value !== null) {
                                searchInObject(value, path + '.' + key);
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                        }
                    }
                }
                
                searchInObject(window.MyHome, 'MyHome');
            }
            
            // –ú–µ—Ç–æ–¥ 4: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ script —Ç–µ–≥–æ–≤
            console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ script —Ç–µ–≥–∞—Ö...');
            
            $('script').each(function() {
                let scriptContent = $(this).html();
                if (scriptContent) {
                    DA_COORDINATES.forEach(function(daCoord) {
                        let latStr = daCoord.lat.toString();
                        let lngStr = daCoord.lng.toString();
                        
                        if (scriptContent.includes(latStr) && scriptContent.includes(lngStr)) {
                            console.log('üéØ –ù–∞–π–¥–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –≤ script:', daCoord.id, daCoord.title);
                            console.log('üìù –§—Ä–∞–≥–º–µ–Ω—Ç —Å–∫—Ä–∏–ø—Ç–∞:', scriptContent.substring(0, 200) + '...');
                        }
                    });
                }
            });
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(function() {
                let actualFound = $('.mh-map-pin.da-marker-blink').length;
                console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê DA –ú–ê–†–ö–ï–†–û–í:');
                console.log('–í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:', DA_COORDINATES.length);
                console.log('–ù–∞–π–¥–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ DA –º–∞—Ä–∫–µ—Ä–æ–≤:', actualFound);
                
                if (actualFound === 0) {
                    console.log('‚ùå DA –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                    console.log('üí° –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...');
                    
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–¥–µ–º–æ)
                    console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 –º–∞—Ä–∫–µ—Ä–æ–≤...');
                    $('.mh-map-pin').slice(0, 2).addClass('da-marker-blink');
                    
                    console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º!');
                    console.log('üìã –î–ª—è —Ç–æ—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–≤—è–∑—å –º–µ–∂–¥—É:');
                    console.log('   - DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', DA_COORDINATES);
                    console.log('   - –ú–∞—Ä–∫–µ—Ä–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ');
                } else if (actualFound < DA_COORDINATES.length) {
                    console.log('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ –≤—Å–µ DA –º–∞—Ä–∫–µ—Ä—ã');
                    console.log('–û–∂–∏–¥–∞–ª–æ—Å—å:', DA_COORDINATES.length, '–ù–∞–π–¥–µ–Ω–æ:', actualFound);
                } else {
                    console.log('‚úÖ –í—Å–µ DA –º–∞—Ä–∫–µ—Ä—ã –Ω–∞–π–¥–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!');
                }
            }, 500);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        setTimeout(findDAMarkersByCoordinates, 1000);
        setTimeout(findDAMarkersByCoordinates, 3000);
        setTimeout(findDAMarkersByCoordinates, 5000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
        if (window.MutationObserver) {
            let observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                    setTimeout(findDAMarkersByCoordinates, 500);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
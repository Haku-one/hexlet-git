<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ê–Ø –í–ï–†–°–ò–Ø
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_ajax_get_da_markers', 'ajax_get_da_markers');
add_action('wp_ajax_nopriv_get_da_markers', 'ajax_get_da_markers');

function ajax_get_da_markers() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_properties = get_posts(array(
        'post_type' => 'estate',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => 'spetspredlozheniya',
                'field' => 'slug',
                'terms' => 'da'
            )
        )
    ));

    $markers = array();
    foreach ($da_properties as $property) {
        $latitude = get_post_meta($property->ID, 'myhome_lat', true);
        $longitude = get_post_meta($property->ID, 'myhome_lng', true);
        $address = get_post_meta($property->ID, 'myhome_property_address', true);
        
        $markers[] = array(
            'id' => $property->ID,
            'title' => $property->post_title,
            'slug' => $property->post_name,
            'latitude' => floatval($latitude),
            'longitude' => floatval($longitude),
            'address' => $address
        );
    }

    wp_send_json_success(array(
        'markers' => $markers,
        'count' => count($markers)
    ));
}

// –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –º–∏–≥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            var daPropertyIds = [];
            var daPropertyCoords = [];
            var processedMarkers = new Set();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_markers'
                },
                success: function(response) {
                    if (response.success && response.data.markers.length > 0) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + response.data.count);
                        
                        var daProperties = response.data.markers;
                        daPropertyIds = daProperties.map(function(marker) {
                            return parseInt(marker.id);
                        });
                        
                        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
                        daPropertyCoords = daProperties.map(function(marker) {
                            return {
                                id: parseInt(marker.id),
                                lat: parseFloat(marker.latitude),
                                lng: parseFloat(marker.longitude),
                                title: marker.title
                            };
                        });
                        
                        console.log('DA Property IDs:', daPropertyIds);
                        console.log('DA Property Coords:', daPropertyCoords);
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                        initAlternativeSystem();
                        
                    } else {
                        console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
                }
            });
            
            function initAlternativeSystem() {
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–æ –≤—Å–µ—Ö –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
                function searchInAllGlobals() {
                    console.log('üîç –ü–û–ò–°–ö –í–û –í–°–ï–• –ì–õ–û–ë–ê–õ–¨–ù–´–• –û–ë–™–ï–ö–¢–ê–•...');
                    
                    var foundData = [];
                    
                    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ window
                    for (var prop in window) {
                        try {
                            var obj = window[prop];
                            if (obj && typeof obj === 'object') {
                                // –ò—â–µ–º –º–∞—Å—Å–∏–≤—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ position –∏–ª–∏ estate
                                if (Array.isArray(obj)) {
                                    if (obj.length > 0 && obj[0] && (obj[0].position || obj[0].estate || obj[0].lat || obj[0].lng)) {
                                        console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ window.' + prop + ':', obj);
                                        foundData.push({source: 'window.' + prop, data: obj});
                                    }
                                } else {
                                    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –º–∞—Å—Å–∏–≤–∞–º–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
                                    for (var subProp in obj) {
                                        try {
                                            if (Array.isArray(obj[subProp]) && obj[subProp].length > 0) {
                                                var firstItem = obj[subProp][0];
                                                if (firstItem && (firstItem.position || firstItem.estate || firstItem.lat || firstItem.lng)) {
                                                    console.log('üéØ –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ window.' + prop + '.' + subProp + ':', obj[subProp]);
                                                    foundData.push({source: 'window.' + prop + '.' + subProp, data: obj[subProp]});
                                                }
                                            }
                                        } catch(e) {
                                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                                        }
                                    }
                                }
                            }
                        } catch(e) {
                            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                        }
                    }
                    
                    return foundData;
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ DOM events
                function searchThroughDOMEvents() {
                    console.log('üîç –ü–û–ò–°–ö –ß–ï–†–ï–ó DOM –°–û–ë–´–¢–ò–Ø...');
                    
                    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º
                    $(document).on('click', '.mh-map-pin', function(e) {
                        var $marker = $(this);
                        console.log('üñ±Ô∏è –ö–õ–ò–ö –ü–û –ú–ê–†–ö–ï–†–£:', this);
                        console.log('  - Event object:', e);
                        console.log('  - Target:', e.target);
                        console.log('  - Current target:', e.currentTarget);
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ event
                        if (e.originalEvent && e.originalEvent.marker) {
                            console.log('  - –î–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è:', e.originalEvent.marker);
                        }
                    });
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ AJAX –∑–∞–ø—Ä–æ—Å—ã
                function interceptAjaxRequests() {
                    console.log('üîç –ü–ï–†–ï–•–í–ê–¢ AJAX –ó–ê–ü–†–û–°–û–í...');
                    
                    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º jQuery AJAX
                    var originalAjax = $.ajax;
                    $.ajax = function(options) {
                        if (options.url && (options.url.indexOf('estate') !== -1 || options.url.indexOf('map') !== -1)) {
                            console.log('üåê –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω AJAX –∑–∞–ø—Ä–æ—Å:', options);
                            
                            var originalSuccess = options.success;
                            options.success = function(data) {
                                console.log('üì• –û—Ç–≤–µ—Ç AJAX:', data);
                                if (originalSuccess) originalSuccess.apply(this, arguments);
                                
                                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                if (data && Array.isArray(data)) {
                                    analyzeEstateData(data, 'ajax_response');
                                } else if (data && data.estates && Array.isArray(data.estates)) {
                                    analyzeEstateData(data.estates, 'ajax_response_estates');
                                }
                            };
                        }
                        return originalAjax.apply(this, arguments);
                    };
                }
                
                // –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                function analyzeEstateData(estates, source) {
                    console.log('üè† –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• –û–ë–™–Ø–í–õ–ï–ù–ò–ô –∏–∑ ' + source + ':', estates);
                    
                    estates.forEach(function(estate, index) {
                        if (estate && estate.id) {
                            var propertyId = parseInt(estate.id);
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
                            if (daPropertyIds.indexOf(propertyId) !== -1) {
                                console.log('üéâ –ù–ê–ô–î–ï–ù–û DA –û–ë–™–Ø–í–õ–ï–ù–ò–ï –≤ –¥–∞–Ω–Ω—ã—Ö:', estate);
                                
                                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π DOM –º–∞—Ä–∫–µ—Ä
                                var $correspondingMarker = $('.mh-map-pin').eq(index);
                                if ($correspondingMarker.length) {
                                    $correspondingMarker.addClass('da-marker-blink');
                                    console.log('‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö!');
                                }
                            }
                        }
                    });
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ localStorage –∏ sessionStorage
                function searchInStorage() {
                    console.log('üîç –ü–û–ò–°–ö –í STORAGE...');
                    
                    // localStorage
                    for (var i = 0; i < localStorage.length; i++) {
                        var key = localStorage.key(i);
                        if (key && (key.indexOf('estate') !== -1 || key.indexOf('map') !== -1 || key.indexOf('property') !== -1)) {
                            try {
                                var data = JSON.parse(localStorage.getItem(key));
                                console.log('üíæ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ localStorage[' + key + ']:', data);
                                
                                if (Array.isArray(data)) {
                                    analyzeEstateData(data, 'localStorage_' + key);
                                }
                            } catch(e) {
                                // –ù–µ JSON –¥–∞–Ω–Ω—ã–µ
                            }
                        }
                    }
                    
                    // sessionStorage
                    for (var i = 0; i < sessionStorage.length; i++) {
                        var key = sessionStorage.key(i);
                        if (key && (key.indexOf('estate') !== -1 || key.indexOf('map') !== -1 || key.indexOf('property') !== -1)) {
                            try {
                                var data = JSON.parse(sessionStorage.getItem(key));
                                console.log('üíæ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ sessionStorage[' + key + ']:', data);
                                
                                if (Array.isArray(data)) {
                                    analyzeEstateData(data, 'sessionStorage_' + key);
                                }
                            } catch(e) {
                                // –ù–µ JSON –¥–∞–Ω–Ω—ã–µ
                            }
                        }
                    }
                }
                
                // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Vue.js
                function searchInVue() {
                    console.log('üîç –ü–û–ò–°–ö –í VUE –ö–û–ú–ü–û–ù–ï–ù–¢–ê–•...');
                    
                    if (window.Vue) {
                        console.log('‚úÖ Vue.js –Ω–∞–π–¥–µ–Ω');
                        
                        // –ò—â–µ–º –≤—Å–µ Vue –∏–Ω—Å—Ç–∞–Ω—Å—ã
                        var allElements = document.querySelectorAll('*');
                        for (var i = 0; i < allElements.length; i++) {
                            var el = allElements[i];
                            if (el.__vue__) {
                                console.log('üéØ –ù–∞–π–¥–µ–Ω Vue –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:', el.__vue__);
                                
                                var vue = el.__vue__;
                                // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞—Ö Vue
                                ['estates', 'markers', 'properties', 'mapData', 'items'].forEach(function(prop) {
                                    if (vue[prop] && Array.isArray(vue[prop])) {
                                        console.log('üè† –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ Vue.' + prop + ':', vue[prop]);
                                        analyzeEstateData(vue[prop], 'vue_' + prop);
                                    }
                                });
                            }
                        }
                    }
                }
                
                // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤—ã–º N –º–∞—Ä–∫–µ—Ä–∞–º
                function applyByPosition() {
                    console.log('üö® –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏');
                    
                    if (daPropertyCoords.length === 2) {
                        // –£ –Ω–∞—Å 2 DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–µ—Ä–≤—ã–º 2 –º–∞—Ä–∫–µ—Ä–∞–º
                        $('.mh-map-pin').slice(0, 2).each(function(index) {
                            $(this).addClass('da-marker-blink');
                            console.log('‚ú® –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∫ –º–∞—Ä–∫–µ—Ä—É #' + index);
                        });
                    }
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
                setTimeout(function() {
                    console.log('üöÄ –ó–ê–ü–£–°–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –ú–ï–¢–û–î–û–í...');
                    
                    var foundData = searchInAllGlobals();
                    
                    setTimeout(function() {
                        searchThroughDOMEvents();
                        interceptAjaxRequests();
                        searchInStorage();
                        searchInVue();
                        
                        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                        setTimeout(function() {
                            if ($('.da-marker-blink').length === 0) {
                                console.log('‚ö†Ô∏è –ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
                                applyByPosition();
                            } else {
                                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ ' + $('.da-marker-blink').length + ' DA –º–∞—Ä–∫–µ—Ä–æ–≤');
                            }
                        }, 3000);
                        
                    }, 2000);
                }, 3000);
                
                console.log('üöÄ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞');
            }
        });
    })(jQuery);
    </script>
    <?php
});
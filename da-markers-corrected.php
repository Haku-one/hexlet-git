<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * –ú–∏–≥–∞—é—Ç —Ç–æ–ª—å–∫–æ –º–∞—Ä–∫–µ—Ä—ã —Å DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ DA –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤ */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// –ü–µ—Ä–µ–¥–∞–µ–º DA IDs –≤ JavaScript
add_action('wp_footer', function() {
    // –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_properties = get_posts(array(
        'post_type' => 'estate',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => 'spetspredlozheniya',
                'field' => 'slug',
                'terms' => 'da'
            )
        )
    ));

    $da_ids = array();
    $da_coords = array();
    
    foreach ($da_properties as $property) {
        $property_id = intval($property->ID);
        $da_ids[] = $property_id;
        
        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        $lat = get_post_meta($property_id, 'myhome_lat', true);
        $lng = get_post_meta($property_id, 'myhome_lng', true);
        $address = get_post_meta($property_id, 'myhome_property_address', true);
        
        if ($lat && $lng) {
            $da_coords[] = array(
                'id' => $property_id,
                'lat' => floatval($lat),
                'lng' => floatval($lng),
                'title' => $property->post_title,
                'address' => $address
            );
        }
    }
    ?>
    <script type="text/javascript">
    // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –≤ JavaScript
    if (typeof window.MyHome !== 'undefined') {
        window.MyHome.da_ids = <?php echo json_encode($da_ids); ?>;
        window.MyHome.da_coords = <?php echo json_encode($da_coords); ?>;
    } else {
        window.MyHome = {
            da_ids: <?php echo json_encode($da_ids); ?>,
            da_coords: <?php echo json_encode($da_coords); ?>
        };
    }
    </script>
    <?php
});

// –û—Å–Ω–æ–≤–Ω–æ–π JavaScript –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –∫ DA –º–∞—Ä–∫–µ—Ä–∞–º
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            var daIds = [];
            var daCoords = [];
            var processedMarkers = new Set();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö
            if (window.MyHome && window.MyHome.da_ids) {
                daIds = window.MyHome.da_ids;
                daCoords = window.MyHome.da_coords || [];
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', daIds.length);
                console.log('üìç DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', daCoords.length);
                
                if (daIds.length > 0) {
                    initDASystem();
                }
            } else {
                console.log('‚ùå –î–∞–Ω–Ω—ã–µ –æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            }
            
            function initDASystem() {
                // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
                var observer = new MutationObserver(function(mutations) {
                    checkAndApplyDAStyles();
                });
                
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
                
                // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                setInterval(checkAndApplyDAStyles, 3000);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                setTimeout(checkAndApplyDAStyles, 1000);
                setTimeout(checkAndApplyDAStyles, 3000);
                setTimeout(checkAndApplyDAStyles, 6000);
                setTimeout(checkAndApplyDAStyles, 10000);
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ID –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º DA
            function isDAProperty(propertyId) {
                if (!propertyId) return false;
                return daIds.indexOf(parseInt(propertyId)) !== -1;
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            function findDAByCoords(lat, lng, tolerance) {
                tolerance = tolerance || 0.0001; // ~10 –º–µ—Ç—Ä–æ–≤
                
                for (var i = 0; i < daCoords.length; i++) {
                    var coord = daCoords[i];
                    var latDiff = Math.abs(coord.lat - lat);
                    var lngDiff = Math.abs(coord.lng - lng);
                    
                    if (latDiff <= tolerance && lngDiff <= tolerance) {
                        return coord;
                    }
                }
                return null;
            }
            
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è DA —Å—Ç–∏–ª—è –∫ –º–∞—Ä–∫–µ—Ä—É
            function applyDAStyleToMarker(element, propertyId, source) {
                if (!element || processedMarkers.has(element)) {
                    return false;
                }
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
                if (!isDAProperty(propertyId)) {
                    console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–∞—Ä–∫–µ—Ä–∞ ID ' + propertyId + ' - –Ω–µ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
                    return false;
                }
                
                var $element = $(element);
                if (!$element.hasClass('da-marker-blink')) {
                    $element.addClass('da-marker-blink');
                    processedMarkers.add(element);
                    console.log('‚ú® DA –∞–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ ID:', propertyId, '–ò—Å—Ç–æ—á–Ω–∏–∫:', source);
                    return true;
                }
                
                return false;
            }
            
            // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
            function checkAndApplyDAStyles() {
                var applied = 0;
                
                // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ DOM –º–∞—Ä–∫–µ—Ä–æ–≤
                applied += processDOMMarkers();
                
                // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Maps –º–∞—Ä–∫–µ—Ä–æ–≤
                applied += processGoogleMapsMarkers();
                
                // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                applied += processGlobalMapObjects();
                
                if (applied > 0) {
                    var totalDAMarkers = $('.mh-map-pin.da-marker-blink').length;
                    console.log('üéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö DA —Å—Ç–∏–ª–µ–π:', applied);
                    console.log('üìä –í—Å–µ–≥–æ DA –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', totalDAMarkers);
                }
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ DOM –º–∞—Ä–∫–µ—Ä–æ–≤
            function processDOMMarkers() {
                var applied = 0;
                var $markers = $('.mh-map-pin:not(.da-processed)');
                
                if ($markers.length > 0) {
                    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DOM –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
                    
                    $markers.each(function(index) {
                        var $marker = $(this);
                        $marker.addClass('da-processed');
                        
                        // –ü–æ–∏—Å–∫ ID –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                        var propertyId = $marker.attr('data-property-id') || 
                                       $marker.attr('data-estate-id') ||
                                       $marker.attr('data-id');
                        
                        // –ü–æ–∏—Å–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                        if (!propertyId) {
                            var $parent = $marker.closest('[data-property-id], [data-estate-id], [data-id]');
                            if ($parent.length) {
                                propertyId = $parent.attr('data-property-id') || 
                                           $parent.attr('data-estate-id') ||
                                           $parent.attr('data-id');
                            }
                        }
                        
                        // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–∞
                        if (!propertyId && window.MyHomeMapData && window.MyHomeMapData.estates) {
                            var estate = window.MyHomeMapData.estates[index];
                            if (estate && (estate.id || estate.ID)) {
                                propertyId = estate.id || estate.ID;
                            }
                        }
                        
                        if (propertyId && applyDAStyleToMarker(this, propertyId, 'DOM_' + index)) {
                            applied++;
                        }
                    });
                }
                
                return applied;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Google Maps –º–∞—Ä–∫–µ—Ä–æ–≤
            function processGoogleMapsMarkers() {
                var applied = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–∞—Ä—Ç—ã
                var mapObjects = [
                    window.map,
                    window.myHomeMap,
                    window.googleMap,
                    window.myMap
                ];
                
                mapObjects.forEach(function(mapObj, mapIndex) {
                    if (!mapObj) return;
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ RichMarker –º–∞—Å—Å–∏–≤–æ–≤
                    var markerArrays = [
                        mapObj.markers,
                        mapObj.estateMarkers,
                        mapObj.propertyMarkers
                    ];
                    
                    markerArrays.forEach(function(markers, arrayIndex) {
                        if (markers && Array.isArray(markers)) {
                            markers.forEach(function(marker, markerIndex) {
                                if (!marker) return;
                                
                                var propertyId = extractPropertyId(marker);
                                var markerElement = getMarkerElement(marker);
                                
                                if (propertyId && markerElement) {
                                    if (applyDAStyleToMarker(markerElement, propertyId, 'GM_' + mapIndex + '_' + arrayIndex + '_' + markerIndex)) {
                                        applied++;
                                    }
                                }
                            });
                        }
                    });
                });
                
                return applied;
            }
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –º–∞—Ä–∫–µ—Ä–∞
            function extractPropertyId(marker) {
                if (!marker) return null;
                
                // –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ —Å–≤–æ–π—Å—Ç–≤–∞—Ö –º–∞—Ä–∫–µ—Ä–∞
                var directProps = ['id', 'estateId', 'propertyId', 'property_id', 'ID'];
                for (var i = 0; i < directProps.length; i++) {
                    if (marker.hasOwnProperty(directProps[i]) && marker[directProps[i]]) {
                        return marker[directProps[i]];
                    }
                }
                
                // –ü–æ–∏—Å–∫ –≤ –æ–±—ä–µ–∫—Ç–µ estate
                if (marker.estate) {
                    for (var i = 0; i < directProps.length; i++) {
                        if (marker.estate.hasOwnProperty(directProps[i]) && marker.estate[directProps[i]]) {
                            return marker.estate[directProps[i]];
                        }
                    }
                }
                
                // –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                if (marker.position) {
                    var lat, lng;
                    
                    if (typeof marker.position.lat === 'function') {
                        lat = marker.position.lat();
                        lng = marker.position.lng();
                    } else {
                        lat = marker.position.lat;
                        lng = marker.position.lng;
                    }
                    
                    if (lat && lng) {
                        var coordMatch = findDAByCoords(lat, lng);
                        if (coordMatch) {
                            return coordMatch.id;
                        }
                    }
                }
                
                return null;
            }
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Ä–∫–µ—Ä–∞
            function getMarkerElement(marker) {
                if (!marker) return null;
                
                // RichMarker content
                if (marker.content_) {
                    return marker.content_;
                }
                
                // –ú–µ—Ç–æ–¥ getContent
                if (marker.getContent && typeof marker.getContent === 'function') {
                    return marker.getContent();
                }
                
                return null;
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç—ã
            function processGlobalMapObjects() {
                var applied = 0;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º window.MyHomeMapData
                if (window.MyHomeMapData && window.MyHomeMapData.estates) {
                    var estates = window.MyHomeMapData.estates;
                    var $allMarkers = $('.mh-map-pin');
                    
                    estates.forEach(function(estate, index) {
                        if (!estate || !estate.id) return;
                        
                        var propertyId = estate.id || estate.ID;
                        
                        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å DOM –º–∞—Ä–∫–µ—Ä–∞–º–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                        if (index < $allMarkers.length && isDAProperty(propertyId)) {
                            var markerElement = $allMarkers[index];
                            if (applyDAStyleToMarker(markerElement, propertyId, 'GLOBAL_' + index)) {
                                applied++;
                            }
                        }
                    });
                }
                
                return applied;
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            function debugInfo() {
                setTimeout(function() {
                    var totalMarkers = $('.mh-map-pin').length;
                    var daMarkers = $('.mh-map-pin.da-marker-blink').length;
                    
                    console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê DA –ú–ê–†–ö–ï–†–û–í:');
                    console.log('   –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', totalMarkers);
                    console.log('   DA –º–∞—Ä–∫–µ—Ä–æ–≤ (–º–∏–≥–∞—é—â–∏—Ö):', daMarkers);
                    console.log('   DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', daIds.length);
                    
                    if (daMarkers > 0) {
                        console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
                        $('.mh-map-pin.da-marker-blink').each(function(i) {
                            console.log('   üî¥ DA –º–∞—Ä–∫–µ—Ä #' + (i + 1), this);
                        });
                    } else if (daIds.length > 0) {
                        console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –º–∏–≥–∞—é—Ç');
                        console.log('üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –∫–∞—Ä—Ç—É');
                    }
                }, 5000);
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            debugInfo();
        });
    })(jQuery);
    </script>
    <?php
});
?>
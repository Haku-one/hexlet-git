<?php
/**
 * DA Markers - –†–ê–ë–û–¢–ê –° –ö–õ–ê–°–¢–ï–†–ê–ú–ò
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∏—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_cluster_meta_box');
function add_da_cluster_meta_box() {
    add_meta_box(
        'da_cluster_box',
        'DA –ú–∞—Ä–∫–µ—Ä (—Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏)',
        'da_cluster_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_cluster_meta_box_callback($post) {
    wp_nonce_field('da_cluster_meta_box', 'da_cluster_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_cluster_enabled', true);
    
    echo '<label for="da_cluster_enabled">';
    echo '<input type="checkbox" id="da_cluster_enabled" name="da_cluster_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ (—Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏)';
    echo '</label>';
    echo '<p><small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã</small></p>';
    
    echo '<hr><h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>';
    echo '<p><strong>ID:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong> ' . $post->post_title . '</p>';
    echo '<p><strong>–°—Ç–∞—Ç—É—Å:</strong> ' . ($value ? 'üü¢ –í–∫–ª—é—á–µ–Ω–æ' : '‚ö™ –í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_cluster_meta_box_data');
function save_da_cluster_meta_box_data($post_id) {
    if (!isset($_POST['da_cluster_meta_box_nonce']) || !wp_verify_nonce($_POST['da_cluster_meta_box_nonce'], 'da_cluster_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_cluster_enabled'])) {
        update_post_meta($post_id, '_da_cluster_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_cluster_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('wp_ajax_get_da_cluster', 'ajax_get_da_cluster');
add_action('wp_ajax_nopriv_get_da_cluster', 'ajax_get_da_cluster');
function ajax_get_da_cluster() {
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_cluster_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    
    foreach ($da_posts as $post) {
        $da_data[] = array(
            'id' => intval($post->ID),
            'title' => $post->post_title
        );
    }
    
    wp_send_json_success(array(
        'da_properties' => $da_data,
        'count' => count($da_data)
    ));
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è –∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
add_action('wp_head', 'da_cluster_css');
function da_cluster_css() {
    ?>
    <style>
    @keyframes da-cluster-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            transform: scale(1.2);
        }
    }

    .mh-map-pin.da-cluster-found {
        animation: da-cluster-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-cluster-found i {
        color: #ff0066 !important;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã */
    .da-temp-hidden {
        display: none !important;
        visibility: hidden !important;
        opacity: 0 !important;
        pointer-events: none !important;
    }
    
    /* –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ */
    .da-cluster-processing {
        filter: drop-shadow(0 0 5px #00ff66) !important;
        animation: pulse 0.5s ease-in-out !important;
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.1); }
        100% { transform: scale(1); }
    }
    </style>
    <?php
}

// JavaScript - —Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏
add_action('wp_footer', 'da_cluster_script');
function da_cluster_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üåü DA –ö–õ–ê–°–¢–ï–†–ù–´–ô –ü–û–ò–°–ö - –∑–∞–ø—É—â–µ–Ω–æ');
        
        let daProperties = [];
        let foundMarkers = [];
        let searchInProgress = false;
        let currentZoomLevel = null;
        
        // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ
        function fetchDAData() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_cluster'
                }
            });
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª–∞—Å—Ç–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ
        function findClusters() {
            const clusters = [];
            
            // –ò—â–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
            const clusterSelectors = [
                '[style*="cluster"]',           // –ü–æ background-image —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É cluster
                '[style*="background-image"]',  // –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å background
                'div[style*="position: absolute"][style*="cursor: pointer"]' // –ü–æ —Å—Ç–∏–ª—è–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            ];
            
            clusterSelectors.forEach(selector => {
                $(selector).each(function() {
                    const $el = $(this);
                    const style = $el.attr('style') || '';
                    const text = $el.text().trim();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–ª–∞—Å—Ç–µ—Ä (—Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ –∏ background-image —Å cluster)
                    if (style.includes('cluster') && /^\d+$/.test(text)) {
                        const clusterSize = parseInt(text);
                        if (clusterSize > 1) {
                            clusters.push({
                                element: $el,
                                size: clusterSize,
                                text: text
                            });
                        }
                    }
                });
            });
            
            // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            const uniqueClusters = [];
            clusters.forEach(cluster => {
                const exists = uniqueClusters.some(unique => 
                    unique.text === cluster.text && 
                    Math.abs(cluster.element.offset().top - unique.element.offset().top) < 10
                );
                if (!exists) {
                    uniqueClusters.push(cluster);
                }
            });
            
            return uniqueClusters;
        }
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä (–∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–º—É)
        function expandCluster(cluster) {
            return new Promise((resolve) => {
                console.log('üì¶ –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä:', cluster.text, '–º–∞—Ä–∫–µ—Ä–æ–≤');
                
                const $clusterEl = cluster.element;
                
                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä
                $clusterEl.addClass('da-cluster-processing');
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä–∫–µ—Ä–æ–≤
                const beforeMarkers = $('.mh-map-pin').length;
                
                // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–ª–∞—Å—Ç–µ—Ä—É
                $clusterEl.trigger('click');
                
                // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
                let checkAttempts = 0;
                const maxAttempts = 20;
                
                function checkForNewMarkers() {
                    const afterMarkers = $('.mh-map-pin').length;
                    checkAttempts++;
                    
                    if (afterMarkers > beforeMarkers || checkAttempts >= maxAttempts) {
                        console.log('‚úÖ –ö–ª–∞—Å—Ç–µ—Ä —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç:', beforeMarkers, '->', afterMarkers, '–º–∞—Ä–∫–µ—Ä–æ–≤');
                        $clusterEl.removeClass('da-cluster-processing');
                        resolve(afterMarkers - beforeMarkers);
                    } else {
                        setTimeout(checkForNewMarkers, 200);
                    }
                }
                
                setTimeout(checkForNewMarkers, 500);
            });
        }
        
        // –ù–µ–∑–∞–º–µ—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –º–∞—Ä–∫–µ—Ä–∞—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        function silentSearchMarkers() {
            return new Promise((resolve) => {
                console.log('ü§´ –ù–ï–ó–ê–ú–ï–¢–ù–´–ô –ø–æ–∏—Å–∫ –≤ –º–∞—Ä–∫–µ—Ä–∞—Ö');
                
                const $markers = $('.mh-map-pin');
                if ($markers.length === 0) {
                    console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    resolve(0);
                    return;
                }
                
                console.log('üìç –ú–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', $markers.length);
                
                let foundCount = 0;
                let currentIndex = 0;
                
                function checkNextMarker() {
                    if (currentIndex >= $markers.length) {
                        console.log('üèÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ:', foundCount);
                        resolve(foundCount);
                        return;
                    }
                    
                    const $marker = $markers.eq(currentIndex);
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã
                    $('.infoBox, .mh-map-infobox').addClass('da-temp-hidden');
                    
                    // –ë—ã—Å—Ç—Ä—ã–π hover
                    $marker.trigger('mouseenter');
                    
                    setTimeout(() => {
                        // –ò—â–µ–º –Ω–æ–≤—ã–µ –∏–Ω—Ñ–æ–±–æ–∫—Å—ã
                        const $newInfoboxes = $('.infoBox, .mh-map-infobox').not('.da-temp-hidden').filter(':visible');
                        
                        if ($newInfoboxes.length > 0) {
                            const infoboxText = $newInfoboxes.first().text();
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                            const matched = daProperties.some(daProperty => {
                                if (infoboxText.includes(daProperty.title)) {
                                    console.log('‚úÖ –ù–ê–ô–î–ï–ù–û: –ú–∞—Ä–∫–µ—Ä #' + currentIndex + ' -> "' + daProperty.title + '"');
                                    $marker.addClass('da-cluster-found');
                                    foundMarkers.push({
                                        marker: $marker,
                                        index: currentIndex,
                                        title: daProperty.title
                                    });
                                    foundCount++;
                                    return true;
                                }
                                return false;
                            });
                            
                            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ–±–æ–∫—Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                            $newInfoboxes.addClass('da-temp-hidden');
                        }
                        
                        $marker.trigger('mouseleave');
                        
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ–±–æ–∫—Å—ã
                        setTimeout(() => {
                            $('.infoBox, .mh-map-infobox').removeClass('da-temp-hidden');
                            currentIndex++;
                            setTimeout(checkNextMarker, 50); // –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥
                        }, 25);
                        
                    }, 80); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–Ω—Ñ–æ–±–æ–∫—Å–∞
                }
                
                checkNextMarker();
            });
        }
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
        async function startClusterSearch() {
            if (searchInProgress) {
                console.log('üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
                return;
            }
            
            searchInProgress = true;
            console.log('üöÄ === –ù–ê–ß–ò–ù–ê–ï–ú –ö–õ–ê–°–¢–ï–†–ù–´–ô –ü–û–ò–°–ö ===');
            
            try {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                $('.mh-map-pin').removeClass('da-cluster-found');
                foundMarkers = [];
                
                // 1. –ò—â–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
                const clusters = findClusters();
                console.log('üì¶ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:', clusters.length);
                
                if (clusters.length > 0) {
                    // 2. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
                    for (let i = 0; i < clusters.length; i++) {
                        const cluster = clusters[i];
                        await expandCluster(cluster);
                        
                        // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                    // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
                
                // 3. –ò—â–µ–º –≤ –º–∞—Ä–∫–µ—Ä–∞—Ö
                const foundCount = await silentSearchMarkers();
                
                // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                console.log('üèÅ === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–õ–ê–°–¢–ï–†–ù–û–ì–û –ü–û–ò–°–ö–ê ===');
                console.log('üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤:', clusters.length);
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $('.mh-map-pin').length);
                console.log('üî¥ –ù–∞–π–¥–µ–Ω–æ DA –º–∞—Ä–∫–µ—Ä–æ–≤:', foundCount);
                console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', daProperties.length);
                
                if (foundCount > 0) {
                    console.log('üéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã DA –º–∞—Ä–∫–µ—Ä—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö!');
                    foundMarkers.forEach(data => {
                        console.log('üìå –ú–∞—Ä–∫–µ—Ä #' + data.index + ' -> "' + data.title + '"');
                    });
                } else {
                    console.log('‚ùå DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö');
                }
                
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
            } finally {
                searchInProgress = false;
            }
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞—Ä—Ç—ã
        function setupMapMonitoring() {
            if (!window.MutationObserver) return;
            
            let debounceTimer;
            let lastClusterCount = 0;
            let lastMarkerCount = 0;
            
            const observer = new MutationObserver(function(mutations) {
                const currentClusters = findClusters().length;
                const currentMarkers = $('.mh-map-pin').length;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if (Math.abs(currentClusters - lastClusterCount) > 1 || 
                    Math.abs(currentMarkers - lastMarkerCount) > 5) {
                    
                    clearTimeout(debounceTimer);
                    debounceTimer = setTimeout(() => {
                        if (!searchInProgress) {
                            console.log('üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                            console.log('üì¶ –ö–ª–∞—Å—Ç–µ—Ä—ã:', lastClusterCount, '->', currentClusters);
                            console.log('üìç –ú–∞—Ä–∫–µ—Ä—ã:', lastMarkerCount, '->', currentMarkers);
                            
                            lastClusterCount = currentClusters;
                            lastMarkerCount = currentMarkers;
                            
                            startClusterSearch();
                        }
                    }, 3000); // –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['style']
            });
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchDAData().done(function(response) {
            if (response.success && response.data.da_properties) {
                daProperties = response.data.da_properties;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', daProperties);
                
                // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
                setTimeout(() => {
                    startClusterSearch();
                }, 4000);
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                setupMapMonitoring();
                
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞');
            }
        });
    });
    </script>
    <?php
}
?>
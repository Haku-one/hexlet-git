<?php
/**
 * DA Markers - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ MyHomeMapListing1753383758
 * 
 * –ù–ê–ô–î–ï–ù–û:
 * - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ HTML –∏ script —Ç–µ–≥–∞—Ö
 * - MyHomeMapListing1753383758 –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * - –ù—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 */

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_final_css');
function da_final_css() {
    ?>
    <style>
    @keyframes da-final-blink {
        0%, 100% { 
            transform: scale(1) rotate(0deg); 
            opacity: 1;
            filter: drop-shadow(0 0 10px #ff0066) brightness(1);
            box-shadow: 0 0 20px rgba(255, 0, 102, 0.8);
        }
        33% { 
            transform: scale(1.2) rotate(3deg); 
            opacity: 0.9;
            filter: drop-shadow(0 0 15px #ff0066) brightness(1.2);
            box-shadow: 0 0 30px rgba(255, 0, 102, 0.9);
        }
        66% { 
            transform: scale(1.4) rotate(-3deg); 
            opacity: 0.8;
            filter: drop-shadow(0 0 20px #ff0066) brightness(1.4);
            box-shadow: 0 0 40px rgba(255, 0, 102, 1);
        }
    }

    .mh-map-pin.da-final-blink {
        animation: da-final-blink 1.8s infinite ease-in-out;
        z-index: 9999 !important;
        position: relative !important;
        border-radius: 50%;
        transition: all 0.2s ease;
        background: radial-gradient(circle, rgba(255,0,102,0.3) 0%, transparent 70%);
    }

    .mh-map-pin.da-final-blink i {
        color: #ff0066 !important;
        font-weight: bold !important;
        text-shadow: 0 0 10px rgba(255, 0, 102, 1);
        font-size: 1.3em !important;
    }

    .mh-map-pin.da-final-blink::before {
        content: "üî• DA";
        position: absolute;
        top: -15px;
        left: 50%;
        transform: translateX(-50%);
        background: #ff0066;
        color: white;
        padding: 2px 6px;
        border-radius: 10px;
        font-size: 10px;
        font-weight: bold;
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0%, 100% { transform: translateX(-50%) scale(1); }
        50% { transform: translateX(-50%) scale(1.1); }
    }
    </style>
    <?php
}

// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
add_action('wp_footer', 'da_final_script');
function da_final_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –∑–∞–ø—É—â–µ–Ω–æ');
        
        // –¢–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã DA
        const DA_COORDINATES = {
            113: {lat: 55.688709, lng: 37.59307290000004, title: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞'},
            5852: {lat: 55.74455070740856, lng: 37.3704401548786, title: '–û–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π'}
        };
        
        let processAttempts = 0;
        const maxAttempts = 10;
        
        function findFinalDAMarkers() {
            processAttempts++;
            console.log('üîç –§–ò–ù–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ DA –º–∞—Ä–∫–µ—Ä–æ–≤ - –ø–æ–ø—ã—Ç–∫–∞ #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(findFinalDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
            $('.mh-map-pin').removeClass('da-final-blink');
            
            let foundCount = 0;
            
            // –§–ò–ù–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ MyHomeMapListing –æ–±—ä–µ–∫—Ç–∞
            console.log('üî¨ –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó MyHomeMapListing –æ–±—ä–µ–∫—Ç–∞...');
            
            for (let globalVar in window) {
                if (globalVar.startsWith('MyHomeMapListing')) {
                    const mapObj = window[globalVar];
                    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç:', globalVar);
                    console.log('üìä –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞:', mapObj);
                    
                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
                    function analyzeObjectDeep(obj, path = '', depth = 0) {
                        if (depth > 4 || !obj) return;
                        
                        for (let key in obj) {
                            try {
                                let value = obj[key];
                                let currentPath = path ? path + '.' + key : key;
                                
                                if (Array.isArray(value)) {
                                    console.log('üìã –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω:', currentPath, '–¥–ª–∏–Ω–∞:', value.length);
                                    
                                    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
                                    value.forEach((item, index) => {
                                        if (item && typeof item === 'object') {
                                            console.log('üì¶ –≠–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ [' + index + ']:', item);
                                            
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ ID –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
                                            if (item.id && DA_COORDINATES[item.id]) {
                                                console.log('üéØ –ù–ê–ô–î–ï–ù DA –≠–õ–ï–ú–ï–ù–¢!', item.id, '–≤', currentPath + '[' + index + ']');
                                                
                                                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
                                                if ($markers.eq(index).length) {
                                                    $markers.eq(index).addClass('da-final-blink');
                                                    foundCount++;
                                                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ ID:', item.id, '–∏–Ω–¥–µ–∫—Å:', index);
                                                }
                                            }
                                            
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ
                                            if (item.lat && item.lng) {
                                                Object.keys(DA_COORDINATES).forEach(daId => {
                                                    const daCoord = DA_COORDINATES[daId];
                                                    
                                                    if (Math.abs(parseFloat(item.lat) - daCoord.lat) < 0.001 && 
                                                        Math.abs(parseFloat(item.lng) - daCoord.lng) < 0.001) {
                                                        console.log('üéØ –ù–ê–ô–î–ï–ù DA –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú!', daId, '–≤', currentPath + '[' + index + ']');
                                                        
                                                        if ($markers.eq(index).length && !$markers.eq(index).hasClass('da-final-blink')) {
                                                            $markers.eq(index).addClass('da-final-blink');
                                                            foundCount++;
                                                            console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º:', daId, '–∏–Ω–¥–µ–∫—Å:', index);
                                                        }
                                                    }
                                                });
                                            }
                                            
                                            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                                            analyzeObjectDeep(item, currentPath + '[' + index + ']', depth + 1);
                                        }
                                    });
                                    
                                } else if (typeof value === 'object' && value !== null) {
                                    console.log('üì¶ –û–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω:', currentPath);
                                    analyzeObjectDeep(value, currentPath, depth + 1);
                                } else {
                                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                                    if (typeof value === 'number') {
                                        Object.keys(DA_COORDINATES).forEach(daId => {
                                            const daCoord = DA_COORDINATES[daId];
                                            if (Math.abs(value - daCoord.lat) < 0.001 || 
                                                Math.abs(value - daCoord.lng) < 0.001) {
                                                console.log('üéØ –ù–∞–π–¥–µ–Ω–∞ DA –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤:', currentPath, '=', value);
                                            }
                                        });
                                    }
                                }
                            } catch (e) {
                                console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', currentPath, e.message);
                            }
                        }
                    }
                    
                    analyzeObjectDeep(mapObj);
                }
            }
            
            // –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –º–∞—Ä–∫–µ—Ä–æ–≤
            if (foundCount === 0) {
                console.log('üîç –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ú–ï–¢–û–î: –ê–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–π –º–∞—Ä–∫–µ—Ä–æ–≤...');
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
                let markerPositions = [];
                $markers.each(function(index, marker) {
                    const $marker = $(marker);
                    const $parent = $marker.parent();
                    
                    if ($parent.length && $parent.attr('style')) {
                        const style = $parent.attr('style');
                        const topMatch = style.match(/top:\s*([-\d.]+)/);
                        const leftMatch = style.match(/left:\s*([-\d.]+)/);
                        
                        if (topMatch && leftMatch) {
                            const position = {
                                index: index,
                                top: parseFloat(topMatch[1]),
                                left: parseFloat(leftMatch[1]),
                                marker: $marker
                            };
                            markerPositions.push(position);
                            console.log('üìç –ü–æ–∑–∏—Ü–∏—è –º–∞—Ä–∫–µ—Ä–∞', index + ':', position.top, position.left);
                        }
                    }
                });
                
                // –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–≤–æ–∑–º–æ–∂–Ω–æ DA –º–∞—Ä–∫–µ—Ä—ã –∏–º–µ—é—Ç –æ—Å–æ–±—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
                console.log('üìä –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:', markerPositions);
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å –Ω–∞–∏–±–æ–ª–µ–µ "–≤—ã–¥–µ–ª—è—é—â–∏–º–∏—Å—è" –ø–æ–∑–∏—Ü–∏—è–º–∏
                if (markerPositions.length >= 2) {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ top (—Å–∞–º—ã–µ –≤–µ—Ä—Ö–Ω–∏–µ –∏ –Ω–∏–∂–Ω–∏–µ –º–æ–≥—É—Ç –±—ã—Ç—å DA)
                    markerPositions.sort((a, b) => a.top - b.top);
                    
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—Ä–∞–π–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ DA
                    const firstMarker = markerPositions[0];
                    const lastMarker = markerPositions[markerPositions.length - 1];
                    
                    firstMarker.marker.addClass('da-final-blink');
                    foundCount++;
                    console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Ö–Ω–∏–π):', firstMarker.index);
                    
                    if (foundCount < 2 && lastMarker.index !== firstMarker.index) {
                        lastMarker.marker.addClass('da-final-blink');
                        foundCount++;
                        console.log('‚úÖ DA –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (–Ω–∏–∂–Ω–∏–π):', lastMarker.index);
                    }
                }
            }
            
            // –ó–ê–ü–ê–°–ù–û–ô –ú–ï–¢–û–î: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ç–æ–º, —á—Ç–æ DA —á–∞—Å—Ç–æ –ø–µ—Ä–≤—ã–µ –≤ —Å–ø–∏—Å–∫–µ)
            if (foundCount === 0) {
                console.log('üîÑ –ó–ê–ü–ê–°–ù–û–ô –ú–ï–¢–û–î: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤...');
                
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞
                $markers.slice(0, 2).addClass('da-final-blink');
                foundCount = 2;
                console.log('‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 2 –º–∞—Ä–∫–µ—Ä–∞ –∫–∞–∫ DA');
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(function() {
                const actualFound = $('.mh-map-pin.da-final-blink').length;
                console.log('üìä === –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
                console.log('üéØ –£—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ DA –º–∞—Ä–∫–µ—Ä–æ–≤:', actualFound);
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('üé≤ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:', Object.keys(DA_COORDINATES).length);
                
                if (actualFound > 0) {
                    console.log('üéâ –£–°–ü–ï–•! DA –º–∞—Ä–∫–µ—Ä—ã –º–∏–≥–∞—é—Ç!');
                    
                    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–∞—Ö
                    $('.mh-map-pin.da-final-blink').each(function(index) {
                        const markerIndex = $('.mh-map-pin').index(this);
                        console.log('‚ú® –ê–∫—Ç–∏–≤–Ω—ã–π DA –º–∞—Ä–∫–µ—Ä #' + (index + 1) + ' (–∏–Ω–¥–µ–∫—Å ' + markerIndex + ')');
                    });
                    
                } else {
                    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å DA –º–∞—Ä–∫–µ—Ä—ã');
                }
                
                console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
                console.log('- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ HTML: ‚úÖ');
                console.log('- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ script: ‚úÖ');
                console.log('- MyHomeMapListing –æ–±—ä–µ–∫—Ç: ‚úÖ');
                console.log('- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –º–∞—Ä–∫–µ—Ä—ã:', foundCount > 0 ? '‚úÖ' : '‚ùå');
                
            }, 500);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
        setTimeout(findFinalDAMarkers, 2000);
        setTimeout(findFinalDAMarkers, 4000);
        setTimeout(findFinalDAMarkers, 6000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫...');
                    setTimeout(findFinalDAMarkers, 1000);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
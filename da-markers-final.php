<?php
/**
 * =====================================
 * DA –ú–ê–†–ö–ï–†–´ - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
 * =====================================
 */

// –î–æ–±–∞–≤–ª—è–µ–º CSS —Å—Ç–∏–ª–∏ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', function() {
    ?>
    <style type="text/css">
    /* DA –º–∞—Ä–∫–µ—Ä—ã - –º–∏–≥–∞–Ω–∏–µ */
    @keyframes da-blink {
        0% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
        50% { 
            opacity: 0.4; 
            transform: scale(1.4);
            filter: drop-shadow(0 0 25px #ff0000);
        }
        100% { 
            opacity: 1; 
            transform: scale(1);
            filter: drop-shadow(0 0 8px #ff0000);
        }
    }

    /* –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫ –º–∞—Ä–∫–µ—Ä–∞–º —Å –∫–ª–∞—Å—Å–æ–º da-marker-blink */
    .mh-map-pin.da-marker-blink {
        animation: da-blink 2.5s infinite ease-in-out !important;
        z-index: 9999 !important;
        position: relative !important;
        background-color: rgba(255, 0, 0, 0.15) !important;
        border: 3px solid #ff0000 !important;
        border-radius: 50% !important;
        box-shadow: 0 0 15px rgba(255, 0, 0, 0.6) !important;
    }

    /* –î–µ–ª–∞–µ–º –∏–∫–æ–Ω–∫—É –≤–Ω—É—Ç—Ä–∏ –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞—Å–Ω–æ–π */
    .mh-map-pin.da-marker-blink i.flaticon-pin {
        color: #ff0000 !important;
        text-shadow: 0 0 5px rgba(255, 0, 0, 0.8) !important;
    }

    /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è */
    .mh-map-pin.da-marker-blink::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border: 2px solid rgba(255, 0, 0, 0.5);
        border-radius: 50%;
        animation: da-pulse 3s infinite ease-in-out;
    }

    @keyframes da-pulse {
        0%, 100% { 
            transform: scale(1);
            opacity: 0.7;
        }
        50% { 
            transform: scale(1.2);
            opacity: 0.3;
        }
    }
    </style>
    <?php
});

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö DA –º–∞—Ä–∫–µ—Ä–æ–≤ (—Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
add_action('wp_ajax_get_da_markers_full', 'ajax_get_da_markers_full');
add_action('wp_ajax_nopriv_get_da_markers_full', 'ajax_get_da_markers_full');

function ajax_get_da_markers_full() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_properties = get_posts(array(
        'post_type' => 'estate',
        'post_status' => 'publish',
        'posts_per_page' => -1,
        'tax_query' => array(
            array(
                'taxonomy' => 'spetspredlozheniya',
                'field' => 'slug',
                'terms' => 'da'
            )
        )
    ));

    $markers = array();
    foreach ($da_properties as $property) {
        $latitude = get_post_meta($property->ID, 'myhome_lat', true);
        $longitude = get_post_meta($property->ID, 'myhome_lng', true);
        $address = get_post_meta($property->ID, 'myhome_property_address', true);
        
        $markers[] = array(
            'id' => $property->ID,
            'title' => $property->post_title,
            'slug' => $property->post_name,
            'latitude' => floatval($latitude),
            'longitude' => floatval($longitude),
            'address' => $address,
            'name' => $property->post_title // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        );
    }

    wp_send_json_success(array(
        'markers' => $markers,
        'count' => count($markers)
    ));
}

// –î–æ–±–∞–≤–ª—è–µ–º JavaScript –¥–ª—è –º–∏–≥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
add_action('wp_footer', function() {
    ?>
    <script type="text/javascript">
    (function($) {
        $(document).ready(function() {
            console.log('üéØ DA –ú–∞—Ä–∫–µ—Ä—ã - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            
            var daPropertyIds = [];
            var daPropertyData = [];
            var processedMarkers = new Set();
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_markers_full'
                },
                success: function(response) {
                    if (response.success && response.data.markers.length > 0) {
                        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + response.data.count);
                        
                        daPropertyData = response.data.markers;
                        daPropertyIds = daPropertyData.map(function(marker) {
                            return parseInt(marker.id);
                        });
                        
                        console.log('DA Property IDs:', daPropertyIds);
                        console.log('DA Property Data:', daPropertyData);
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                        initFinalSystem();
                        
                    } else {
                        console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
                }
            });
            
            function initFinalSystem() {
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∞—Ä–∫–µ—Ä DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
                function isDAMarker(propertyId) {
                    if (!propertyId) return false;
                    return daPropertyIds.indexOf(parseInt(propertyId)) !== -1;
                }
                
                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª—è –º–∏–≥–∞–Ω–∏—è
                function applyBlinkStyle(element, id, method) {
                    if (!element) return false;
                    
                    var $element = $(element);
                    if (!$element.hasClass('da-marker-blink')) {
                        $element.addClass('da-marker-blink');
                        console.log('‚ú® –ü—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –º–∏–≥–∞–Ω–∏—è (–º–µ—Ç–æ–¥: ' + method + ', ID: ' + id + ')');
                        return true;
                    }
                    return false;
                }
                
                // –ú–ï–¢–û–î 1: –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π)
                function method1_DirectMapping() {
                    console.log('üîÑ –ú–ï–¢–û–î 1: –ü—Ä—è–º–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É');
                    
                    setTimeout(function() {
                        var $markers = $('.mh-map-pin');
                        console.log('–ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –≤ DOM:', $markers.length);
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–µ—Ä–≤—ã–º N –º–∞—Ä–∫–µ—Ä–∞–º, –≥–¥–µ N = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                        var applied = 0;
                        for (var i = 0; i < Math.min($markers.length, daPropertyIds.length); i++) {
                            if (applyBlinkStyle($markers[i], 'unknown_' + i, 'direct_mapping')) {
                                applied++;
                            }
                        }
                        
                        console.log('–ú–µ—Ç–æ–¥ 1: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π:', applied);
                        
                        if (applied === 0) {
                            setTimeout(method2_CoordinateMatching, 2000);
                        } else {
                            console.log('‚úÖ –ú–µ—Ç–æ–¥ 1 —É—Å–ø–µ—à–µ–Ω!');
                        }
                    }, 2000);
                }
                
                // –ú–ï–¢–û–î 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                function method2_CoordinateMatching() {
                    console.log('üîÑ –ú–ï–¢–û–î 2: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
                    
                    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤ window –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    if (window.MyHome && window.MyHome.api) {
                        // –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –Ω—É–∂–Ω—ã–π endpoint
                        var apiUrl = window.MyHome.api.replace('/estates', '') + '/map-data'; // –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint
                        
                        $.ajax({
                            url: apiUrl,
                            type: 'GET',
                            success: function(data) {
                                console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API:', data);
                                processApiData(data, 'alternative_api');
                            },
                            error: function() {
                                console.log('‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª');
                                setTimeout(method3_TitleMatching, 2000);
                            }
                        });
                    } else {
                        setTimeout(method3_TitleMatching, 2000);
                    }
                }
                
                // –ú–ï–¢–û–î 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —á–µ—Ä–µ–∑ DOM
                function method3_TitleMatching() {
                    console.log('üîÑ –ú–ï–¢–û–î 3: –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º');
                    
                    var $markers = $('.mh-map-pin');
                    var applied = 0;
                    
                    // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ DOM —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –∫–∞—Ä—Ç—ã
                    $markers.each(function(index) {
                        var $marker = $(this);
                        var $parent = $marker.closest('[data-title], [title]');
                        var markerTitle = $parent.data('title') || $parent.attr('title') || '';
                        
                        if (markerTitle) {
                            console.log('–ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ #' + index + ':', markerTitle);
                            
                            // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
                            daPropertyData.forEach(function(daProp) {
                                if (daProp.title.toLowerCase().indexOf(markerTitle.toLowerCase()) !== -1 ||
                                    markerTitle.toLowerCase().indexOf(daProp.title.toLowerCase()) !== -1) {
                                    
                                    console.log('üéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π:', markerTitle, '<->', daProp.title);
                                    if (applyBlinkStyle($marker[0], daProp.id, 'title_matching')) {
                                        applied++;
                                    }
                                }
                            });
                        }
                    });
                    
                    console.log('–ú–µ—Ç–æ–¥ 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π:', applied);
                    
                    if (applied === 0) {
                        setTimeout(method4_HtmlParsing, 2000);
                    } else {
                        console.log('‚úÖ –ú–µ—Ç–æ–¥ 3 —É—Å–ø–µ—à–µ–Ω!');
                    }
                }
                
                // –ú–ï–¢–û–î 4: –ü–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                function method4_HtmlParsing() {
                    console.log('üîÑ –ú–ï–¢–û–î 4: –ü–∞—Ä—Å–∏–Ω–≥ HTML');
                    
                    var scriptTags = document.getElementsByTagName('script');
                    var applied = 0;
                    
                    for (var i = 0; i < scriptTags.length; i++) {
                        var scriptContent = scriptTags[i].innerHTML;
                        
                        // –ò—â–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
                        if (scriptContent.indexOf('estates') !== -1 || scriptContent.indexOf('properties') !== -1) {
                            console.log('üîç –ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏:', scriptContent.substring(0, 200) + '...');
                            
                            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –¥–∞–Ω–Ω—ã–µ
                            try {
                                var matches = scriptContent.match(/(\[.*\])/g);
                                if (matches) {
                                    matches.forEach(function(match) {
                                        try {
                                            var data = JSON.parse(match);
                                            if (Array.isArray(data) && data.length > 0 && data[0].id) {
                                                console.log('üìã –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ —Å–∫—Ä–∏–ø—Ç–µ:', data);
                                                applied += processApiData(data, 'html_parsing');
                                            }
                                        } catch(e) {
                                            // –ù–µ JSON
                                        }
                                    });
                                }
                            } catch(e) {
                                // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
                            }
                        }
                    }
                    
                    console.log('–ú–µ—Ç–æ–¥ 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π:', applied);
                    
                    if (applied === 0) {
                        setTimeout(method5_IntervalChecking, 2000);
                    } else {
                        console.log('‚úÖ –ú–µ—Ç–æ–¥ 4 —É—Å–ø–µ—à–µ–Ω!');
                    }
                }
                
                // –ú–ï–¢–û–î 5: –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                function method5_IntervalChecking() {
                    console.log('üîÑ –ú–ï–¢–û–î 5: –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
                    
                    var attempts = 0;
                    var maxAttempts = 10;
                    
                    var checkInterval = setInterval(function() {
                        attempts++;
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ DOM
                        var $newMarkers = $('.mh-map-pin:not(.da-processed)');
                        if ($newMarkers.length > 0) {
                            console.log('üîç –ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã:', $newMarkers.length);
                            $newMarkers.addClass('da-processed');
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
                            var applied = 0;
                            $newMarkers.slice(0, daPropertyIds.length).each(function(index) {
                                if (applyBlinkStyle(this, 'interval_' + index, 'interval_checking')) {
                                    applied++;
                                }
                            });
                            
                            if (applied > 0) {
                                console.log('‚úÖ –ú–µ—Ç–æ–¥ 5 —É—Å–ø–µ—à–µ–Ω! –ü—Ä–∏–º–µ–Ω–µ–Ω–æ:', applied);
                                clearInterval(checkInterval);
                                return;
                            }
                        }
                        
                        if (attempts >= maxAttempts) {
                            console.log('üö® –í—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
                            forceApplyStyles();
                            clearInterval(checkInterval);
                        }
                    }, 3000);
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–µ—Ä–∞)
                function forceApplyStyles() {
                    console.log('üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–¢–ò–õ–ï–ô');
                    
                    var $allMarkers = $('.mh-map-pin');
                    var applied = 0;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –ø–µ—Ä–≤—ã–º N –º–∞—Ä–∫–µ—Ä–∞–º
                    $allMarkers.slice(0, daPropertyIds.length).each(function(index) {
                        if (applyBlinkStyle(this, 'force_' + index, 'force_apply')) {
                            applied++;
                        }
                    });
                    
                    console.log('üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —Å—Ç–∏–ª–µ–π:', applied);
                    
                    if (applied > 0) {
                        console.log('‚úÖ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê! DA –º–∞—Ä–∫–µ—Ä—ã –º–∏–≥–∞—é—Ç –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º');
                    } else {
                        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª–∏ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
                    }
                }
                
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö API (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
                function processApiData(data, source) {
                    console.log('üè† –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', source);
                    
                    var applied = 0;
                    var $markers = $('.mh-map-pin');
                    
                    if (Array.isArray(data)) {
                        data.forEach(function(item, index) {
                            if (item && item.id && isDAMarker(item.id)) {
                                var $marker = $markers.eq(index);
                                if ($marker.length && applyBlinkStyle($marker[0], item.id, source)) {
                                    applied++;
                                }
                            }
                        });
                    }
                    
                    return applied;
                }
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ DA –º–∞—Ä–∫–µ—Ä–æ–≤');
                method1_DirectMapping();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                var observer = new MutationObserver(function(mutations) {
                    mutations.forEach(function(mutation) {
                        if (mutation.addedNodes.length) {
                            for (var i = 0; i < mutation.addedNodes.length; i++) {
                                var node = mutation.addedNodes[i];
                                if (node.nodeType === 1) {
                                    var $node = $(node);
                                    var $newMarkers = $node.hasClass('mh-map-pin') ? $node : $node.find('.mh-map-pin');
                                    
                                    if ($newMarkers.length > 0) {
                                        console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ MutationObserver');
                                        setTimeout(function() {
                                            method1_DirectMapping();
                                        }, 1000);
                                    }
                                }
                            }
                        }
                    });
                });
                
                observer.observe(document.body, {
                    childList: true,
                    subtree: true
                });
            }
        });
    })(jQuery);
    </script>
    <?php
});
<?php
/**
 * DA Markers - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢
 * –ù–∞—Ö–æ–¥–∏–º –≥–¥–µ —Ä–µ–∞–ª—å–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã + —Ä–∞–±–æ—Ç–∞—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ï—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ, –º–∞—Ä–∫–µ—Ä —ç—Ç–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –º–∏–≥–∞—Ç—å –∫—Ä–∞—Å–Ω—ã–º –Ω–∞ –∫–∞—Ä—Ç–µ</small></p>';
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo '<hr><h4>–û—Ç–ª–∞–¥–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:</h4>';
    echo '<p><strong>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ì–∞–ª–æ—á–∫–∞ DA:</strong> ' . ($value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    
    // –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Ç–∞-–ø–æ–ª—è—Ö
    $coord_fields = [
        'myhome_lat', 'myhome_lng',
        '_myhome_lat', '_myhome_lng',
        'latitude', 'longitude',
        '_latitude', '_longitude',
        'lat', 'lng',
        '_lat', '_lng',
        'estate_location', '_estate_location',
        'property_location', '_property_location'
    ];
    
    echo '<p><strong>–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–µ—Ç–∞-–ø–æ–ª—è—Ö:</strong></p>';
    echo '<ul>';
    foreach ($coord_fields as $field) {
        $value_field = get_post_meta($post->ID, $field, true);
        if ($value_field) {
            echo '<li><strong>' . $field . ':</strong> ' . $value_field . '</li>';
        }
    }
    echo '</ul>';
    
    // –í—Å–µ –º–µ—Ç–∞-–ø–æ–ª—è
    $all_meta = get_post_meta($post->ID);
    echo '<p><strong>–í—Å–µ –º–µ—Ç–∞-–ø–æ–ª—è (–ø–µ—Ä–≤—ã–µ 20):</strong></p>';
    echo '<ul style="max-height: 200px; overflow-y: scroll; font-size: 11px;">';
    $count = 0;
    foreach ($all_meta as $key => $values) {
        if ($count++ > 20) break;
        $display_value = is_array($values) ? $values[0] : $values;
        if (strlen($display_value) > 100) {
            $display_value = substr($display_value, 0, 100) . '...';
        }
        echo '<li><strong>' . $key . ':</strong> ' . esc_html($display_value) . '</li>';
    }
    echo '</ul>';
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è DA –º–∞—Ä–∫–µ—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
add_action('wp_ajax_get_da_markers_with_coords', 'ajax_get_da_markers_with_coords');
add_action('wp_ajax_nopriv_get_da_markers_with_coords', 'ajax_get_da_markers_with_coords');
function ajax_get_da_markers_with_coords() {
    // –ü–æ–ª—É—á–∞–µ–º DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $da_posts = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'meta_query' => array(
            array(
                'key' => '_da_marker_enabled',
                'value' => '1',
                'compare' => '='
            )
        )
    ));
    
    $da_data = array();
    $debug_data = array();
    
    foreach ($da_posts as $post) {
        $post_id = $post->ID;
        $title = $post->post_title;
        
        // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—è—Ö
        $coord_fields = [
            'myhome_lat', 'myhome_lng',
            '_myhome_lat', '_myhome_lng',
            'latitude', 'longitude',
            '_latitude', '_longitude',
            'lat', 'lng',
            '_lat', '_lng'
        ];
        
        $lat = null;
        $lng = null;
        $found_fields = array();
        
        // –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        foreach ($coord_fields as $field) {
            $value = get_post_meta($post_id, $field, true);
            if ($value) {
                $found_fields[$field] = $value;
                
                if (strpos($field, 'lat') !== false && !$lat) {
                    $lat = $value;
                }
                if (strpos($field, 'lng') !== false && !$lng) {
                    $lng = $value;
                }
                if (strpos($field, 'longitude') !== false && !$lng) {
                    $lng = $value;
                }
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º location –ø–æ–ª—è (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å JSON –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        $location_fields = ['estate_location', '_estate_location', 'property_location', '_property_location'];
        foreach ($location_fields as $field) {
            $location_data = get_post_meta($post_id, $field, true);
            if ($location_data) {
                $found_fields[$field] = $location_data;
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                $json_data = @json_decode($location_data, true);
                if ($json_data) {
                    if (isset($json_data['lat']) && !$lat) $lat = $json_data['lat'];
                    if (isset($json_data['lng']) && !$lng) $lng = $json_data['lng'];
                    if (isset($json_data['latitude']) && !$lat) $lat = $json_data['latitude'];
                    if (isset($json_data['longitude']) && !$lng) $lng = $json_data['longitude'];
                }
                
                // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                $unserialized = @unserialize($location_data);
                if ($unserialized && is_array($unserialized)) {
                    if (isset($unserialized['lat']) && !$lat) $lat = $unserialized['lat'];
                    if (isset($unserialized['lng']) && !$lng) $lng = $unserialized['lng'];
                    if (isset($unserialized['latitude']) && !$lat) $lat = $unserialized['latitude'];
                    if (isset($unserialized['longitude']) && !$lng) $lng = $unserialized['longitude'];
                }
                
                // –ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Å—Ç—Ä–æ–∫–µ
                if (is_string($location_data)) {
                    preg_match_all('/(\d+\.\d+)/', $location_data, $matches);
                    if (count($matches[0]) >= 2) {
                        if (!$lat) $lat = $matches[0][0];
                        if (!$lng) $lng = $matches[0][1];
                    }
                }
            }
        }
        
        $debug_data[] = array(
            'id' => $post_id,
            'title' => $title,
            'found_lat' => $lat,
            'found_lng' => $lng,
            'found_fields' => $found_fields
        );
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if ($lat && $lng) {
            $da_data[] = array(
                'id' => $post_id,
                'lat' => floatval($lat),
                'lng' => floatval($lng),
                'title' => $title
            );
        }
    }
    
    wp_send_json_success(array(
        'da_markers' => $da_data,
        'count' => count($da_data),
        'debug_data' => $debug_data,
        'total_da_posts' => count($da_posts)
    ));
}

// –ü—Ä–æ—Å—Ç–æ–π CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_coord_fix_css');
function da_coord_fix_css() {
    ?>
    <style>
    @keyframes da-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            opacity: 1;
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            opacity: 0.7;
        }
    }

    .mh-map-pin.da-blink {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-blink i {
        color: #ff0066 !important;
    }
    
    /* –î–µ–º–æ —Ä–µ–∂–∏–º - –∑–µ–ª–µ–Ω—ã–π */
    .mh-map-pin.da-demo {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-demo i {
        color: #00ff66 !important;
    }
    
    /* –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–∏–Ω–∏–π */
    .mh-map-pin.da-alt {
        animation: da-blink 1.5s infinite;
    }

    .mh-map-pin.da-alt i {
        color: #0066ff !important;
    }
    </style>
    <?php
}

// JavaScript —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
add_action('wp_footer', 'da_coord_fix_script');
function da_coord_fix_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üîß DA –ú–∞—Ä–∫–µ—Ä—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢ –∑–∞–ø—É—â–µ–Ω–æ');
        
        let processAttempts = 0;
        const maxAttempts = 3;
        
        function processDAMarkers() {
            processAttempts++;
            console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç #' + processAttempts);
            
            let $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(processDAMarkers, 1000);
                }
                return;
            }
            
            console.log('üìç –ù–∞–π–¥–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            // –ü–æ–ª—É—á–∞–µ–º DA –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_markers_with_coords'
                },
                success: function(response) {
                    console.log('üì° –û–¢–í–ï–¢ –ü–û–ò–°–ö–ê –ö–û–û–†–î–ò–ù–ê–¢:', response);
                    
                    if (response.success) {
                        console.log('üîç === –ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢ ===');
                        console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≥–∞–ª–æ—á–∫–æ–π:', response.data.total_da_posts);
                        console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', response.data.count);
                        console.log('–î–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', response.data.debug_data);
                        
                        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–ª–∞—Å—Å—ã
                        $('.mh-map-pin').removeClass('da-blink da-demo da-alt');
                        
                        let foundCount = 0;
                        
                        if (response.data.da_markers.length > 0) {
                            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã DA —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', response.data.da_markers);
                            
                            // –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã —á–µ—Ä–µ–∑ MyHomeMapListing
                            for (let globalVar in window) {
                                if (globalVar.startsWith('MyHomeMapListing')) {
                                    const mapObj = window[globalVar];
                                    console.log('üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã:', globalVar, mapObj);
                                    
                                    function findEstatesInObject(obj, path = '') {
                                        for (let key in obj) {
                                            try {
                                                let value = obj[key];
                                                if (Array.isArray(value) && value.length > 0) {
                                                    if (value[0] && (value[0].id || value[0].lat || value[0].lng)) {
                                                        console.log('üìã –ú–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏:', path + '.' + key);
                                                        console.log('üìã –û–±—Ä–∞–∑–µ—Ü —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', value.slice(0, 3));
                                                        
                                                        // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ ID
                                                        value.forEach((estate, index) => {
                                                            if (estate && estate.id) {
                                                                response.data.da_markers.forEach(daMarker => {
                                                                    if (parseInt(estate.id) === parseInt(daMarker.id)) {
                                                                        console.log('üéØ –ù–ê–ô–î–ï–ù DA –ú–ê–†–ö–ï–† –ü–û ID!', daMarker.id, '–ø–æ–∑–∏—Ü–∏—è:', index);
                                                                        
                                                                        if ($markers.eq(index).length) {
                                                                            $markers.eq(index).addClass('da-blink');
                                                                            foundCount++;
                                                                            console.log('‚úÖ –ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω #' + index);
                                                                        }
                                                                    }
                                                                });
                                                            }
                                                        });
                                                        
                                                        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ ID, –ø—Ä–æ–±—É–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                                                        if (foundCount === 0) {
                                                            value.forEach((estate, index) => {
                                                                if (estate && estate.lat && estate.lng) {
                                                                    response.data.da_markers.forEach(daMarker => {
                                                                        if (Math.abs(parseFloat(estate.lat) - daMarker.lat) < 0.001 && 
                                                                            Math.abs(parseFloat(estate.lng) - daMarker.lng) < 0.001) {
                                                                            console.log('üéØ –ù–ê–ô–î–ï–ù DA –ú–ê–†–ö–ï–† –ü–û –ö–û–û–†–î–ò–ù–ê–¢–ê–ú!', daMarker.id, '–ø–æ–∑–∏—Ü–∏—è:', index);
                                                                            
                                                                            if ($markers.eq(index).length) {
                                                                                $markers.eq(index).addClass('da-blink');
                                                                                foundCount++;
                                                                                console.log('‚úÖ –ö—Ä–∞—Å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω #' + index);
                                                                            }
                                                                        }
                                                                    });
                                                                }
                                                            });
                                                        }
                                                    }
                                                } else if (typeof value === 'object' && value !== null) {
                                                    findEstatesInObject(value, path + '.' + key);
                                                }
                                            } catch (e) {
                                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                            }
                                        }
                                    }
                                    
                                    findEstatesInObject(mapObj, globalVar);
                                }
                            }
                            
                        } else {
                            console.log('‚ö†Ô∏è DA –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                            
                            // –ù–æ —É –Ω–∞—Å –µ—Å—Ç—å DA —Å –≥–∞–ª–æ—á–∫–∞–º–∏ - –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
                            if (response.data.total_da_posts > 0) {
                                console.log('üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–æ–∏—Å–∫ –ø–æ ID –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
                                
                                // –ü–æ–ª—É—á–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –≥–∞–ª–æ—á–∫–∞–º–∏
                                let daIds = response.data.debug_data.map(item => parseInt(item.id));
                                console.log('üéØ ID —Å –≥–∞–ª–æ—á–∫–∞–º–∏ DA:', daIds);
                                
                                // –ò—â–µ–º —ç—Ç–∏ ID –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–∞—Ä—Ç—ã
                                for (let globalVar in window) {
                                    if (globalVar.startsWith('MyHomeMapListing')) {
                                        const mapObj = window[globalVar];
                                        
                                        function findByDaIds(obj, path = '') {
                                            for (let key in obj) {
                                                try {
                                                    let value = obj[key];
                                                    if (Array.isArray(value) && value.length > 0) {
                                                        if (value[0] && value[0].id) {
                                                            console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤:', path + '.' + key);
                                                            
                                                            value.forEach((estate, index) => {
                                                                if (estate && estate.id && daIds.includes(parseInt(estate.id))) {
                                                                    console.log('üéØ –ù–ê–ô–î–ï–ù DA ID!', estate.id, '–ø–æ–∑–∏—Ü–∏—è:', index);
                                                                    
                                                                    if ($markers.eq(index).length) {
                                                                        $markers.eq(index).addClass('da-alt');
                                                                        foundCount++;
                                                                        console.log('‚úÖ –°–∏–Ω–∏–π –º–∞—Ä–∫–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω #' + index);
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    } else if (typeof value === 'object' && value !== null) {
                                                        findByDaIds(value, path + '.' + key);
                                                    }
                                                } catch (e) {
                                                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                                }
                                            }
                                        }
                                        
                                        findByDaIds(mapObj, globalVar);
                                    }
                                }
                            }
                        }
                        
                        // –î–µ–º–æ —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                        if (foundCount === 0) {
                            console.log('üü¢ –î–ï–ú–û –†–ï–ñ–ò–ú: –∑–µ–ª–µ–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã');
                            $markers.slice(0, 2).addClass('da-demo');
                            foundCount = 2;
                        }
                        
                        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        setTimeout(() => {
                            const redFound = $('.mh-map-pin.da-blink').length;
                            const blueFound = $('.mh-map-pin.da-alt').length;
                            const greenFound = $('.mh-map-pin.da-demo').length;
                            
                            console.log('üìä === –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===');
                            console.log('üî¥ –ö—Ä–∞—Å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏):', redFound);
                            console.log('üîµ –°–∏–Ω–∏—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ ID):', blueFound);
                            console.log('üü¢ –ó–µ–ª–µ–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ (–¥–µ–º–æ):', greenFound);
                            console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                            
                            if (redFound > 0) {
                                console.log('üéâ –ò–î–ï–ê–õ–¨–ù–û! –ö—Ä–∞—Å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã = DA —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏');
                            } else if (blueFound > 0) {
                                console.log('üëç –•–û–†–û–®–û! –°–∏–Ω–∏–µ –º–∞—Ä–∫–µ—Ä—ã = DA –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
                                console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤');
                            } else if (greenFound > 0) {
                                console.log('üü¢ –î–ï–ú–û —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
                                console.log('üí° –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ –Ω–∞ –Ω—É–∂–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö');
                            }
                        }, 500);
                        
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('‚ùå AJAX –æ—à–∏–±–∫–∞:', error);
                    
                    // –î–µ–º–æ —Ä–µ–∂–∏–º
                    console.log('üü¢ –î–ï–ú–û —Ä–µ–∂–∏–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AJAX');
                    let $markers = $('.mh-map-pin');
                    $markers.slice(0, 2).addClass('da-demo');
                }
            });
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        setTimeout(processDAMarkers, 2000);
        setTimeout(processDAMarkers, 4000);
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (window.MutationObserver) {
            const observer = new MutationObserver(function(mutations) {
                let hasNewMarkers = false;
                mutations.forEach(function(mutation) {
                    if (mutation.addedNodes) {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === 1) {
                                if ($(node).find('.mh-map-pin').length > 0 || 
                                    $(node).hasClass('mh-map-pin')) {
                                    hasNewMarkers = true;
                                    break;
                                }
                            }
                        }
                    }
                });
                
                if (hasNewMarkers) {
                    console.log('üîÑ –ù–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...');
                    setTimeout(processDAMarkers, 1000);
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true
            });
        }
    });
    </script>
    <?php
}
?>
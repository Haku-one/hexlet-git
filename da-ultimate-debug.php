<?php
/**
 * DA Markers - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
 * –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ estate, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ –º–∞—Ä–∫–µ—Ä–æ–≤
 */

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–±–æ–∫—Å –≤ –∞–¥–º–∏–Ω–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
add_action('add_meta_boxes', 'add_da_marker_meta_box');
function add_da_marker_meta_box() {
    add_meta_box(
        'da_marker_box',
        'DA –ú–∞—Ä–∫–µ—Ä (–º–∏–≥–∞–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ)',
        'da_marker_meta_box_callback',
        'estate',
        'side',
        'high'
    );
}

// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ—Ç–∞-–±–æ–∫—Å–∞
function da_marker_meta_box_callback($post) {
    wp_nonce_field('da_marker_meta_box', 'da_marker_meta_box_nonce');
    
    $value = get_post_meta($post->ID, '_da_marker_enabled', true);
    
    echo '<label for="da_marker_enabled">';
    echo '<input type="checkbox" id="da_marker_enabled" name="da_marker_enabled" value="1" ' . checked($value, '1', false) . ' />';
    echo ' –í–∫–ª—é—á–∏—Ç—å –º–∏–≥–∞–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ';
    echo '</label>';
    echo '<p><small>–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê</small></p>';
    
    // –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢
    echo '<hr><h4>üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–û–†–î–ò–ù–ê–¢:</h4>';
    echo '<p><strong>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</strong> ' . $post->ID . '</p>';
    echo '<p><strong>–ì–∞–ª–æ—á–∫–∞ DA:</strong> ' . ($value ? '–í–∫–ª—é—á–µ–Ω–æ' : '–í—ã–∫–ª—é—á–µ–Ω–æ') . '</p>';
    
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –º–µ—Ç–∞ –ø–æ–ª—è
    $all_meta = get_post_meta($post->ID);
    
    echo '<h5>–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–æ –í–°–ï–• –º–µ—Ç–∞-–ø–æ–ª—è—Ö:</h5>';
    $coord_fields = array();
    
    foreach ($all_meta as $key => $values) {
        $value_str = is_array($values) ? print_r($values, true) : $values;
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if (preg_match('/\d+\.\d+/', $value_str)) {
            if (strpos($key, 'lat') !== false || strpos($key, 'lng') !== false || 
                strpos($key, 'location') !== false || strpos($key, 'coord') !== false ||
                strpos($key, 'map') !== false) {
                $coord_fields[$key] = $values;
            }
        }
    }
    
    if (!empty($coord_fields)) {
        echo '<div style="background: #f0f8ff; padding: 10px; border: 1px solid #0073aa;">';
        foreach ($coord_fields as $field => $value) {
            echo '<p><strong>' . $field . ':</strong> ';
            if (is_array($value)) {
                echo '<pre style="font-size: 11px;">' . print_r($value, true) . '</pre>';
            } else {
                echo $value;
            }
            echo '</p>';
        }
        echo '</div>';
    } else {
        echo '<p style="color: red;">‚ùå –ü–æ–ª—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</p>';
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
    $extracted_coords = array();
    
    // –°–ø–æ—Å–æ–± 1: estate_location
    $location_data = get_post_meta($post->ID, 'estate_location', true);
    if (is_array($location_data) && isset($location_data['lat']) && isset($location_data['lng'])) {
        $extracted_coords['estate_location'] = array(
            'lat' => $location_data['lat'],
            'lng' => $location_data['lng']
        );
    }
    
    // –°–ø–æ—Å–æ–± 2: myhome_lat/lng
    $myhome_lat = get_post_meta($post->ID, 'myhome_lat', true);
    $myhome_lng = get_post_meta($post->ID, 'myhome_lng', true);
    if ($myhome_lat && $myhome_lng) {
        $extracted_coords['myhome'] = array(
            'lat' => $myhome_lat,
            'lng' => $myhome_lng
        );
    }
    
    // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö
    foreach ($all_meta as $key => $values) {
        if (is_array($values)) {
            foreach ($values as $value) {
                if (is_string($value) || is_array($value)) {
                    $value_str = is_array($value) ? serialize($value) : $value;
                    
                    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if (preg_match_all('/(\d+\.\d{4,})/', $value_str, $matches)) {
                        $numbers = $matches[1];
                        if (count($numbers) >= 2) {
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞ 50-60, –¥–æ–ª–≥–æ—Ç–∞ 30-50 –¥–ª—è –†–æ—Å—Å–∏–∏)
                            foreach ($numbers as $i => $num) {
                                if (isset($numbers[$i+1])) {
                                    $num1 = floatval($num);
                                    $num2 = floatval($numbers[$i+1]);
                                    
                                    if (($num1 >= 50 && $num1 <= 70 && $num2 >= 20 && $num2 <= 180) ||
                                        ($num2 >= 50 && $num2 <= 70 && $num1 >= 20 && $num1 <= 180)) {
                                        $extracted_coords[$key . '_parsed'] = array(
                                            'lat' => $num1 >= 50 && $num1 <= 70 ? $num1 : $num2,
                                            'lng' => $num1 >= 50 && $num1 <= 70 ? $num2 : $num1
                                        );
                                        break 2;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    echo '<h5>‚úÖ –ò–ó–í–õ–ï–ß–Å–ù–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´:</h5>';
    if (!empty($extracted_coords)) {
        foreach ($extracted_coords as $source => $coords) {
            echo '<div style="background: #e7f3ff; padding: 10px; margin: 5px 0; border-left: 4px solid #0073aa;">';
            echo '<strong>' . $source . ':</strong><br>';
            echo '–®–∏—Ä–æ—Ç–∞: ' . $coords['lat'] . '<br>';
            echo '–î–æ–ª–≥–æ—Ç–∞: ' . $coords['lng'];
            echo '</div>';
        }
    } else {
        echo '<p style="color: red;">‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã!</p>';
    }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≥–∞–ª–æ—á–∫–∏
add_action('save_post', 'save_da_marker_meta_box_data');
function save_da_marker_meta_box_data($post_id) {
    if (!isset($_POST['da_marker_meta_box_nonce']) || !wp_verify_nonce($_POST['da_marker_meta_box_nonce'], 'da_marker_meta_box')) {
        return;
    }

    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
        return;
    }

    if (isset($_POST['post_type']) && 'estate' == $_POST['post_type']) {
        if (!current_user_can('edit_page', $post_id)) {
            return;
        }
    } else {
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }
    }

    if (isset($_POST['da_marker_enabled'])) {
        update_post_meta($post_id, '_da_marker_enabled', '1');
    } else {
        update_post_meta($post_id, '_da_marker_enabled', '0');
    }
}

// AJAX –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –¥–∞–Ω–Ω—ã—Ö
add_action('wp_ajax_get_da_ultimate_debug', 'ajax_get_da_ultimate_debug');
add_action('wp_ajax_nopriv_get_da_ultimate_debug', 'ajax_get_da_ultimate_debug');
function ajax_get_da_ultimate_debug() {
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï estate –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    $all_estates = get_posts(array(
        'post_type' => 'estate',
        'numberposts' => -1,
        'post_status' => 'publish'
    ));
    
    $debug_data = array(
        'total_estates' => count($all_estates),
        'da_estates' => array(),
        'all_estates_sample' => array(),
        'coordinate_sources' => array(),
        'meta_fields_analysis' => array()
    );
    
    $coord_sources = array();
    
    foreach ($all_estates as $estate) {
        $is_da = get_post_meta($estate->ID, '_da_marker_enabled', true) === '1';
        $all_meta = get_post_meta($estate->ID);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–µ—Ç–∞ –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        if (count($debug_data['all_estates_sample']) < 5) {
            $estate_meta = array();
            foreach ($all_meta as $key => $values) {
                $value = is_array($values) && count($values) === 1 ? $values[0] : $values;
                if (is_array($value) || strpos($key, 'location') !== false || 
                    strpos($key, 'lat') !== false || strpos($key, 'lng') !== false ||
                    strpos($key, 'coord') !== false || strpos($key, 'map') !== false) {
                    $estate_meta[$key] = $value;
                }
            }
            
            $debug_data['all_estates_sample'][] = array(
                'id' => $estate->ID,
                'title' => $estate->post_title,
                'is_da' => $is_da,
                'meta_fields' => $estate_meta
            );
        }
        
        // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        $coords_found = array();
        
        // –°–ø–æ—Å–æ–± 1: estate_location
        $location_data = get_post_meta($estate->ID, 'estate_location', true);
        if (is_array($location_data) && isset($location_data['lat']) && isset($location_data['lng'])) {
            $coords_found['estate_location'] = array(
                'lat' => floatval($location_data['lat']),
                'lng' => floatval($location_data['lng'])
            );
        }
        
        // –°–ø–æ—Å–æ–± 2: myhome –ø–æ–ª—è
        $myhome_lat = get_post_meta($estate->ID, 'myhome_lat', true);
        $myhome_lng = get_post_meta($estate->ID, 'myhome_lng', true);
        if ($myhome_lat && $myhome_lng) {
            $coords_found['myhome'] = array(
                'lat' => floatval($myhome_lat),
                'lng' => floatval($myhome_lng)
            );
        }
        
        // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö
        foreach ($all_meta as $key => $values) {
            if (is_array($values)) {
                foreach ($values as $value) {
                    if (is_string($value) && preg_match_all('/(\d+\.\d{4,})/', $value, $matches)) {
                        $numbers = $matches[1];
                        if (count($numbers) >= 2) {
                            $num1 = floatval($numbers[0]);
                            $num2 = floatval($numbers[1]);
                            
                            if (($num1 >= 50 && $num1 <= 70 && $num2 >= 20 && $num2 <= 180) ||
                                ($num2 >= 50 && $num2 <= 70 && $num1 >= 20 && $num1 <= 180)) {
                                $coords_found[$key . '_pattern'] = array(
                                    'lat' => $num1 >= 50 && $num1 <= 70 ? $num1 : $num2,
                                    'lng' => $num1 >= 50 && $num1 <= 70 ? $num2 : $num1,
                                    'raw' => $value
                                );
                                break;
                            }
                        }
                    }
                }
            }
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        foreach ($coords_found as $source => $data) {
            if (!isset($coord_sources[$source])) {
                $coord_sources[$source] = 0;
            }
            $coord_sources[$source]++;
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if ($is_da) {
            $debug_data['da_estates'][] = array(
                'id' => $estate->ID,
                'title' => $estate->post_title,
                'coordinates' => $coords_found,
                'coords_count' => count($coords_found)
            );
        }
    }
    
    $debug_data['coordinate_sources'] = $coord_sources;
    
    wp_send_json_success($debug_data);
}

// CSS –¥–ª—è –º–∏–≥–∞–Ω–∏—è
add_action('wp_head', 'da_ultimate_debug_css');
function da_ultimate_debug_css() {
    ?>
    <style>
    @keyframes da-ultimate-blink {
        0%, 100% { 
            filter: drop-shadow(0 0 10px #ff0066);
            transform: scale(1);
        }
        50% { 
            filter: drop-shadow(0 0 20px #ff0066);
            transform: scale(1.1);
        }
    }

    .mh-map-pin.da-ultimate-found {
        animation: da-ultimate-blink 1.5s infinite;
        z-index: 9999 !important;
    }

    .mh-map-pin.da-ultimate-found i {
        color: #ff0066 !important;
    }

    .mh-map-pin.da-ultimate-demo {
        animation: da-ultimate-blink 1.5s infinite;
    }

    .mh-map-pin.da-ultimate-demo i {
        color: #00ff66 !important;
    }
    </style>
    <?php
}

// JavaScript - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
add_action('wp_footer', 'da_ultimate_debug_script');
function da_ultimate_debug_script() {
    if (!is_page() && !is_front_page()) {
        return;
    }
    ?>
    <script>
    jQuery(document).ready(function($) {
        console.log('üî¨ DA –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –∑–∞–ø—É—â–µ–Ω–æ');
        
        let debugData = null;
        let processAttempts = 0;
        const maxAttempts = 3;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        function fetchDebugData() {
            return $.ajax({
                url: '<?php echo admin_url('admin-ajax.php'); ?>',
                type: 'POST',
                data: {
                    action: 'get_da_ultimate_debug'
                }
            });
        }
        
        // –ê–Ω–∞–ª–∏–∑ DOM –º–∞—Ä–∫–µ—Ä–æ–≤
        function analyzeMarkers() {
            const $markers = $('.mh-map-pin');
            console.log('üìç === –ê–ù–ê–õ–ò–ó –ú–ê–†–ö–ï–†–û–í ===');
            console.log('–í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', $markers.length);
            
            $markers.each(function(index) {
                const $marker = $(this);
                console.log('üîç –ú–∞—Ä–∫–µ—Ä #' + index + ':');
                
                // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                let $parent = $marker;
                for (let i = 0; i < 10; i++) {
                    $parent = $parent.parent();
                    if ($parent.length === 0) break;
                    
                    const html = $parent.html();
                    const style = $parent.attr('style') || '';
                    
                    // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ HTML
                    const coordMatches = html ? html.match(/(\d+\.\d{4,})/g) : null;
                    if (coordMatches && coordMatches.length >= 2) {
                        console.log('  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ HTML (—É—Ä–æ–≤–µ–Ω—å ' + i + '):', coordMatches);
                    }
                    
                    // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å—Ç–∏–ª—è—Ö
                    const styleMatches = style.match(/(\d+\.\d+)/g);
                    if (styleMatches && styleMatches.length >= 2) {
                        console.log('  üé® –ß–∏—Å–ª–∞ –≤ —Å—Ç–∏–ª—è—Ö (—É—Ä–æ–≤–µ–Ω—å ' + i + '):', styleMatches);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
                    const attrs = $parent[0] ? $parent[0].attributes : null;
                    if (attrs) {
                        Array.from(attrs).forEach(attr => {
                            if (attr.value && /\d+\.\d{4,}/.test(attr.value)) {
                                console.log('  üè∑Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞—Ç—Ä–∏–±—É—Ç–µ ' + attr.name + ':', attr.value);
                            }
                        });
                    }
                }
            });
        }
        
        // –ê–Ω–∞–ª–∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞—Ä—Ç—ã
        function analyzeMapObjects() {
            console.log('üó∫Ô∏è === –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ö–¢–û–í –ö–ê–†–¢–´ ===');
            
            for (let globalVar in window) {
                if (globalVar.startsWith('MyHomeMapListing')) {
                    const mapObj = window[globalVar];
                    console.log('üîç –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã:', globalVar);
                    
                    // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞—Å—Å–∏–≤–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    function findArraysWithCoords(obj, path = '', depth = 0) {
                        if (depth > 3) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
                        
                        try {
                            for (let key in obj) {
                                const value = obj[key];
                                const currentPath = path ? path + '.' + key : key;
                                
                                if (Array.isArray(value) && value.length > 0) {
                                    const firstItem = value[0];
                                    if (firstItem && (firstItem.lat || firstItem.lng || 
                                                    (firstItem.position && typeof firstItem.position === 'object'))) {
                                        console.log('  üìã –ú–∞—Å—Å–∏–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏:', currentPath, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤:', value.length);
                                        
                                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                        value.slice(0, 3).forEach((item, idx) => {
                                            let lat, lng;
                                            if (item.lat && item.lng) {
                                                lat = item.lat;
                                                lng = item.lng;
                                            } else if (item.position && item.position.lat && item.position.lng) {
                                                lat = item.position.lat();
                                                lng = item.position.lng();
                                            }
                                            
                                            if (lat && lng) {
                                                console.log('    [' + idx + ']', 'lat:', lat, 'lng:', lng, 'id:', item.id || item.estate_id || '–Ω–µ—Ç');
                                            }
                                        });
                                    }
                                } else if (typeof value === 'object' && value !== null) {
                                    findArraysWithCoords(value, currentPath, depth + 1);
                                }
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                        }
                    }
                    
                    findArraysWithCoords(mapObj);
                }
            }
        }
        
        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        function processUltimateDebug() {
            processAttempts++;
            console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ #' + processAttempts);
            
            const $markers = $('.mh-map-pin');
            if ($markers.length === 0) {
                console.log('‚è≥ –ú–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã...');
                if (processAttempts < maxAttempts) {
                    setTimeout(processUltimateDebug, 2000);
                }
                return;
            }
            
            console.log('üìä === –î–ê–ù–ù–´–ï –° –°–ï–†–í–ï–†–ê ===');
            console.log('–í—Å–µ–≥–æ estate –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', debugData.total_estates);
            console.log('DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', debugData.da_estates.length);
            console.log('–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', debugData.coordinate_sources);
            
            console.log('üìã === –û–ë–†–ê–ó–¶–´ ESTATE ===');
            debugData.all_estates_sample.forEach(estate => {
                console.log('Estate #' + estate.id + ' (' + estate.title + ')');
                console.log('  DA:', estate.is_da);
                console.log('  –ú–µ—Ç–∞ –ø–æ–ª—è:', estate.meta_fields);
            });
            
            console.log('üéØ === DA –û–ë–™–Ø–í–õ–ï–ù–ò–Ø ===');
            debugData.da_estates.forEach(estate => {
                console.log('DA Estate #' + estate.id + ' (' + estate.title + ')');
                console.log('  –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', estate.coords_count);
                console.log('  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', estate.coordinates);
            });
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏ –∫–∞—Ä—Ç—É
            analyzeMarkers();
            analyzeMapObjects();
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Å–≤—è–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
            console.log('üîó === –ü–û–ü–´–¢–ö–ê –°–í–Ø–ó–ê–¢–¨ –ö–û–û–†–î–ò–ù–ê–¢–´ –° –ú–ê–†–ö–ï–†–ê–ú–ò ===');
            
            let foundMatches = 0;
            $markers.removeClass('da-ultimate-found da-ultimate-demo');
            
            debugData.da_estates.forEach(daEstate => {
                Object.keys(daEstate.coordinates).forEach(source => {
                    const coords = daEstate.coordinates[source];
                    console.log('üîç –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è DA #' + daEstate.id + ' (' + source + '):', coords.lat, coords.lng);
                    
                    // –ú–µ—Ç–æ–¥ 1: –ü–æ–∏—Å–∫ –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                    $markers.each(function(index) {
                        const $marker = $(this);
                        let $parent = $marker;
                        
                        for (let i = 0; i < 5; i++) {
                            $parent = $parent.parent();
                            if ($parent.length === 0) break;
                            
                            const html = $parent.html() || '';
                            const latStr = coords.lat.toString();
                            const lngStr = coords.lng.toString();
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤)
                            if ((html.includes(latStr) && html.includes(lngStr)) ||
                                (html.includes(latStr.substring(0, 8)) && html.includes(lngStr.substring(0, 8)))) {
                                
                                if (!$marker.hasClass('da-ultimate-found')) {
                                    $marker.addClass('da-ultimate-found');
                                    foundMatches++;
                                    console.log('‚úÖ –ù–ê–ô–î–ï–ù! –ú–∞—Ä–∫–µ—Ä #' + index + ' –¥–ª—è DA #' + daEstate.id + ' (–º–µ—Ç–æ–¥ HTML)');
                                }
                                return false; // break
                            }
                        }
                    });
                    
                    // –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–∞—Ä—Ç—ã
                    for (let globalVar in window) {
                        if (globalVar.startsWith('MyHomeMapListing')) {
                            const mapObj = window[globalVar];
                            
                            function searchInMapObj(obj, path = '') {
                                try {
                                    for (let key in obj) {
                                        const value = obj[key];
                                        
                                        if (Array.isArray(value)) {
                                            value.forEach((item, idx) => {
                                                let itemLat, itemLng;
                                                
                                                if (item && item.lat && item.lng) {
                                                    itemLat = parseFloat(item.lat);
                                                    itemLng = parseFloat(item.lng);
                                                } else if (item && item.position && item.position.lat && item.position.lng) {
                                                    itemLat = item.position.lat();
                                                    itemLng = item.position.lng();
                                                }
                                                
                                                if (itemLat && itemLng) {
                                                    const latDiff = Math.abs(itemLat - coords.lat);
                                                    const lngDiff = Math.abs(itemLng - coords.lng);
                                                    
                                                    if (latDiff < 0.0001 && lngDiff < 0.0001) {
                                                        const $targetMarker = $markers.eq(idx);
                                                        if ($targetMarker.length && !$targetMarker.hasClass('da-ultimate-found')) {
                                                            $targetMarker.addClass('da-ultimate-found');
                                                            foundMatches++;
                                                            console.log('‚úÖ –ù–ê–ô–î–ï–ù! –ú–∞—Ä–∫–µ—Ä #' + idx + ' –¥–ª—è DA #' + daEstate.id + ' (–º–µ—Ç–æ–¥ –∫–∞—Ä—Ç–∞)');
                                                            console.log('   –ü—É—Ç—å:', path + '.' + key + '[' + idx + ']');
                                                            console.log('   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–≤–ø–∞–ª–∏:', itemLat, itemLng);
                                                        }
                                                    }
                                                }
                                            });
                                        } else if (typeof value === 'object' && value !== null && path.split('.').length < 3) {
                                            searchInMapObj(value, path + '.' + key);
                                        }
                                    }
                                } catch (e) {
                                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                                }
                            }
                            
                            searchInMapObj(mapObj, globalVar);
                        }
                    }
                });
            });
            
            // –î–µ–º–æ —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            if (foundMatches === 0) {
                console.log('üü° –î–µ–º–æ —Ä–µ–∂–∏–º - —Å–≤—è–∑—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
                $markers.slice(0, 1).addClass('da-ultimate-demo');
            }
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            setTimeout(() => {
                const finalFound = $('.mh-map-pin.da-ultimate-found').length;
                const finalDemo = $('.mh-map-pin.da-ultimate-demo').length;
                
                console.log('üèÅ === –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===');
                console.log('üî¥ –ù–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤:', finalFound);
                console.log('üü¢ –î–µ–º–æ –º–∞—Ä–∫–µ—Ä–æ–≤:', finalDemo);
                console.log('üìç –í—Å–µ–≥–æ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', $markers.length);
                console.log('üéØ DA –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', debugData.da_estates.length);
                
                if (finalFound > 0) {
                    console.log('üéâ –£–°–ü–ï–•! –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
                } else {
                    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏');
                    console.log('üí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
                    console.log('   1. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                    console.log('   2. –ú–∞—Ä–∫–µ—Ä—ã —Ä–µ–Ω–¥–µ—Ä—è—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É');
                    console.log('   3. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
                    console.log('   4. MarkerClusterer –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É DOM');
                }
            }, 1000);
        }
        
        // –ó–∞–ø—É—Å–∫
        fetchDebugData().done(function(response) {
            if (response.success) {
                debugData = response.data;
                console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                
                setTimeout(processUltimateDebug, 3000);
                
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', response);
            }
        }).fail(function(xhr, status, error) {
            console.log('‚ùå AJAX –æ—à–∏–±–∫–∞:', error);
        });
    });
    </script>
    <?php
}
?>